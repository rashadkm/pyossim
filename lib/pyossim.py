# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyossim', [dirname(__file__)])
        except ImportError:
            import _pyossim
            return _pyossim
        if fp is not None:
            try:
                _mod = imp.load_module('_pyossim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyossim = swig_import_helper()
    del swig_import_helper
else:
    import _pyossim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


ossimInit_HEADER = _pyossim.ossimInit_HEADER
class ossimInit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimInit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimInit, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimInit
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimInit_instance
    if _newclass:instance = staticmethod(_pyossim.ossimInit_instance)
    def addOptions(self, *args): return _pyossim.ossimInit_addOptions(self, *args)
    def initialize(self, *args): return _pyossim.ossimInit_initialize(self, *args)
    def finalize(self): return _pyossim.ossimInit_finalize(self)
    def usage(self): return _pyossim.ossimInit_usage(self)
    def getElevEnabledFlag(self): return _pyossim.ossimInit_getElevEnabledFlag(self)
    def setElevEnabledFlag(self, *args): return _pyossim.ossimInit_setElevEnabledFlag(self, *args)
    def setPluginLoaderEnabledFlag(self, *args): return _pyossim.ossimInit_setPluginLoaderEnabledFlag(self, *args)
    def loadPlugins(self, *args): return _pyossim.ossimInit_loadPlugins(self, *args)
    def initializePlugins(self): return _pyossim.ossimInit_initializePlugins(self)
    def initializeDefaultFactories(self): return _pyossim.ossimInit_initializeDefaultFactories(self)
    def initializeElevation(self): return _pyossim.ossimInit_initializeElevation(self)
    def initializeLogFile(self): return _pyossim.ossimInit_initializeLogFile(self)
    def version(self): return _pyossim.ossimInit_version(self)
    def appName(self): return _pyossim.ossimInit_appName(self)
ossimInit_swigregister = _pyossim.ossimInit_swigregister
ossimInit_swigregister(ossimInit)

def ossimInit_instance():
  return _pyossim.ossimInit_instance()
ossimInit_instance = _pyossim.ossimInit_instance

PYOSSIM_SCALAR_UNKNOWN = _pyossim.PYOSSIM_SCALAR_UNKNOWN
PYOSSIM_UINT8 = _pyossim.PYOSSIM_UINT8
PYOSSIM_SINT8 = _pyossim.PYOSSIM_SINT8
PYOSSIM_UINT16 = _pyossim.PYOSSIM_UINT16
PYOSSIM_SINT16 = _pyossim.PYOSSIM_SINT16
PYOSSIM_UINT32 = _pyossim.PYOSSIM_UINT32
PYOSSIM_SINT32 = _pyossim.PYOSSIM_SINT32
PYOSSIM_FLOAT32 = _pyossim.PYOSSIM_FLOAT32
PYOSSIM_FLOAT64 = _pyossim.PYOSSIM_FLOAT64
PYOSSIM_CINT16 = _pyossim.PYOSSIM_CINT16
PYOSSIM_CINT32 = _pyossim.PYOSSIM_CINT32
PYOSSIM_CFLOAT32 = _pyossim.PYOSSIM_CFLOAT32
PYOSSIM_CFLOAT64 = _pyossim.PYOSSIM_CFLOAT64
PYOSSIM_UCHAR = _pyossim.PYOSSIM_UCHAR
PYOSSIM_USHORT16 = _pyossim.PYOSSIM_USHORT16
PYOSSIM_SSHORT16 = _pyossim.PYOSSIM_SSHORT16
PYOSSIM_USHORT11 = _pyossim.PYOSSIM_USHORT11
PYOSSIM_FLOAT = _pyossim.PYOSSIM_FLOAT
PYOSSIM_NORMALIZED_FLOAT = _pyossim.PYOSSIM_NORMALIZED_FLOAT
PYOSSIM_DOUBLE = _pyossim.PYOSSIM_DOUBLE
PYOSSIM_NORMALIZED_DOUBLE = _pyossim.PYOSSIM_NORMALIZED_DOUBLE
class ossimReferenced(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimReferenced, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimReferenced, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimReferenced(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimReferenced___set__(self, *args)
    def ref(self): return _pyossim.ossimReferenced_ref(self)
    def unref(self): return _pyossim.ossimReferenced_unref(self)
    def unref_nodelete(self): return _pyossim.ossimReferenced_unref_nodelete(self)
    def referenceCount(self): return _pyossim.ossimReferenced_referenceCount(self)
ossimReferenced_swigregister = _pyossim.ossimReferenced_swigregister
ossimReferenced_swigregister(ossimReferenced)

class ossimObject(ossimReferenced):
    __swig_setmethods__ = {}
    for _s in [ossimReferenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimReferenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimObject, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimObject()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimObject
    __del__ = lambda self : None;
    def dup(self): return _pyossim.ossimObject_dup(self)
    def getShortName(self): return _pyossim.ossimObject_getShortName(self)
    def getLongName(self): return _pyossim.ossimObject_getLongName(self)
    def getDescription(self): return _pyossim.ossimObject_getDescription(self)
    def getClassName(self): return _pyossim.ossimObject_getClassName(self)
    def getType(self): return _pyossim.ossimObject_getType(self)
    def canCastTo(self, *args): return _pyossim.ossimObject_canCastTo(self, *args)
    def saveState(self, *args): return _pyossim.ossimObject_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimObject_loadState(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimObject_ossimObject_print(self, *args)
    def isEqualTo(self, *args): return _pyossim.ossimObject_isEqualTo(self, *args)
    def accept(self, *args): return _pyossim.ossimObject_accept(self, *args)
ossimObject_swigregister = _pyossim.ossimObject_swigregister
ossimObject_swigregister(ossimObject)

class ossimObjectFactory(ossimObject):
    __swig_setmethods__ = {}
    for _s in [ossimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimObjectFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimObjectFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimObjectFactory
    __del__ = lambda self : None;
    def createObject(self, *args): return _pyossim.ossimObjectFactory_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimObjectFactory_getTypeNameList(self, *args)
ossimObjectFactory_swigregister = _pyossim.ossimObjectFactory_swigregister
ossimObjectFactory_swigregister(ossimObjectFactory)

class ossimProcessInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimProcessInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimProcessInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    PROCESS_STATUS_UNKNOWN = _pyossim.ossimProcessInterface_PROCESS_STATUS_UNKNOWN
    PROCESS_STATUS_EXECUTING = _pyossim.ossimProcessInterface_PROCESS_STATUS_EXECUTING
    PROCESS_STATUS_ABORTED = _pyossim.ossimProcessInterface_PROCESS_STATUS_ABORTED
    PROCESS_STATUS_ABORT_REQUEST = _pyossim.ossimProcessInterface_PROCESS_STATUS_ABORT_REQUEST
    PROCESS_STATUS_NOT_EXECUTING = _pyossim.ossimProcessInterface_PROCESS_STATUS_NOT_EXECUTING
    __swig_destroy__ = _pyossim.delete_ossimProcessInterface
    __del__ = lambda self : None;
    def getObject(self, *args): return _pyossim.ossimProcessInterface_getObject(self, *args)
    def execute(self): return _pyossim.ossimProcessInterface_execute(self)
    def abort(self): return _pyossim.ossimProcessInterface_abort(self)
    def needsAborting(self): return _pyossim.ossimProcessInterface_needsAborting(self)
    def isAbortRequested(self): return _pyossim.ossimProcessInterface_isAbortRequested(self)
    def isAborted(self): return _pyossim.ossimProcessInterface_isAborted(self)
    def isExecuting(self): return _pyossim.ossimProcessInterface_isExecuting(self)
    def getProcessStatus(self): return _pyossim.ossimProcessInterface_getProcessStatus(self)
    def setProcessStatus(self, *args): return _pyossim.ossimProcessInterface_setProcessStatus(self, *args)
    def getPercentComplete(self): return _pyossim.ossimProcessInterface_getPercentComplete(self)
    def setPercentComplete(self, *args): return _pyossim.ossimProcessInterface_setPercentComplete(self, *args)
    def getManager(self): return _pyossim.ossimProcessInterface_getManager(self)
    def enableEvents(self): return _pyossim.ossimProcessInterface_enableEvents(self)
    def disableEvents(self): return _pyossim.ossimProcessInterface_disableEvents(self)
    def setCurrentMessage(self, *args): return _pyossim.ossimProcessInterface_setCurrentMessage(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimProcessInterface_ossimObject_print(self, *args)
ossimProcessInterface_swigregister = _pyossim.ossimProcessInterface_swigregister
ossimProcessInterface_swigregister(ossimProcessInterface)

class ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler()
        try: self.this.append(this)
        except: self.this = this
    def addFactory(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_addFactory(self, *args)
    def isFactoryRegistered(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_isFactoryRegistered(self, *args)
    def registerFactory(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_registerFactory(self, *args)
    def unregisterFactory(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_unregisterFactory(self, *args)
    def unregisterAllFactories(self): return _pyossim.ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_unregisterAllFactories(self)
    def registerFactoryToFront(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_registerFactoryToFront(self, *args)
    def registerFactoryBefore(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_registerFactoryBefore(self, *args)
    def getAllTypeNamesFromRegistry(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_getAllTypeNamesFromRegistry(self, *args)
    def createObjectFromRegistry(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_createObjectFromRegistry(self, *args)
    def createNativeObjectFromRegistry(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_createNativeObjectFromRegistry(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler
    __del__ = lambda self : None;
ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_swigregister = _pyossim.ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_swigregister
ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler_swigregister(ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler)

ossimImageHandlerRegistry_HEADER = _pyossim.ossimImageHandlerRegistry_HEADER
class ossimImageHandlerRegistry(ossimObjectFactory,ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler):
    __swig_setmethods__ = {}
    for _s in [ossimObjectFactory,ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageHandlerRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObjectFactory,ossimFactoryListInterface_ossimImageHandlerFactoryBase_ossimImageHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageHandlerRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimImageHandlerRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimImageHandlerRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimImageHandlerRegistry_instance)
    def open(self, *args): return _pyossim.ossimImageHandlerRegistry_open(self, *args)
    def createObject(self, *args): return _pyossim.ossimImageHandlerRegistry_createObject(self, *args)
    def openBySuffix(self, *args): return _pyossim.ossimImageHandlerRegistry_openBySuffix(self, *args)
    def getImageHandlersBySuffix(self, *args): return _pyossim.ossimImageHandlerRegistry_getImageHandlersBySuffix(self, *args)
    def getImageHandlersByMimeType(self, *args): return _pyossim.ossimImageHandlerRegistry_getImageHandlersByMimeType(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimImageHandlerRegistry_getTypeNameList(self, *args)
    def getSupportedExtensions(self, *args): return _pyossim.ossimImageHandlerRegistry_getSupportedExtensions(self, *args)
    def printReaderProps(self, *args): return _pyossim.ossimImageHandlerRegistry_printReaderProps(self, *args)
ossimImageHandlerRegistry_swigregister = _pyossim.ossimImageHandlerRegistry_swigregister
ossimImageHandlerRegistry_swigregister(ossimImageHandlerRegistry)

def ossimImageHandlerRegistry_instance():
  return _pyossim.ossimImageHandlerRegistry_instance()
ossimImageHandlerRegistry_instance = _pyossim.ossimImageHandlerRegistry_instance


def ossimImageHandlerRegistryGetInstance():
  return _pyossim.ossimImageHandlerRegistryGetInstance()
ossimImageHandlerRegistryGetInstance = _pyossim.ossimImageHandlerRegistryGetInstance

def ReadImageDataNumPy(*args, **kwargs):
  return _pyossim.ReadImageDataNumPy(*args, **kwargs)
ReadImageDataNumPy = _pyossim.ReadImageDataNumPy

def WriteImageDataNumPy(*args, **kwargs):
  return _pyossim.WriteImageDataNumPy(*args, **kwargs)
WriteImageDataNumPy = _pyossim.WriteImageDataNumPy

def WriteImageDataToFile_C(*args):
  return _pyossim.WriteImageDataToFile_C(*args)
WriteImageDataToFile_C = _pyossim.WriteImageDataToFile_C
import numpy

dtypesmap = {  

PYOSSIM_UINT8           :   numpy.uint8,
PYOSSIM_SINT8           :   numpy.uint8,
PYOSSIM_UINT16          :   numpy.uint16,
PYOSSIM_SINT16          :   numpy.uint16,
PYOSSIM_UINT32          :   numpy.uint32,
PYOSSIM_SINT32          :   numpy.uint32,
PYOSSIM_FLOAT32         :   numpy.float32,
PYOSSIM_FLOAT64         :   numpy.float64,
PYOSSIM_CINT16          :   numpy.complex64,
PYOSSIM_CINT32          :   numpy.complex64,
PYOSSIM_CFLOAT32        :   numpy.complex64,
PYOSSIM_CFLOAT64        :   numpy.complex128

}


    
def find_dtype(dtype_):
    if isinstance(dtype_, type):
        if dtype_ == numpy.int8:
            return PYOSSIM_UINT8
        if dtype_ == numpy.complex64:
            return PYOSSIM_CFLOAT32
        
        for key, value in dtypesmap.items():
            if value == dtype_:
                return key
        return None
    else:
        try:
            return dtypesmap[dtype_]
        except KeyError:
            return None

def NumpyTypeToOssimType(numpy_dtype):
    if not isinstance(numpy_dtype, type):
        raise TypeError("Input must be a type")
    return find_dtype(numpy_dtype)

def OssimTypeToNumpyType(ossim_dtype):
    return find_dtype(ossim_dtype)
    

def ReadImageSourceNumPy(tile,ossim_dtype,band_index,numpy_dtype,size,buf_obj=None):
    buf_obj = numpy.empty([size.y,size.x], dtype = numpy_dtype)
    if ReadImageDataNumPy(tile.get(),ossim_dtype,band_index,size,buf_obj)!= 0:
        return None

    return buf_obj


def ossimImageSourceAsArray( handler,buf_array=None):

    extent = handler.getBoundingRect()
    tile = handler.getTile(extent)
    size = tile.getImageRectangle().size()
    nbands = tile.getNumberOfBands()
    ossim_dtype = tile.getScalarType()


    numpy_dtype = OssimTypeToNumpyType( ossim_dtype )
    if numpy_dtype == None:
        ossim_dtype = PYOSSIM_FLOAT32
        numpy_dtype = numpy.float32
    else:
        ossim_dtype = NumpyTypeToOssimType( numpy_dtype )


    array_list = []
    for band_index in range(0,nbands):
        if tile.valid():
            band_array = ReadImageSourceNumPy(tile, ossim_dtype, band_index, numpy_dtype, size)
            array_list.append( numpy.reshape( band_array, [1,size.y,size.x] ) )
        else:
            print "Invalid tile from numpy"

    return numpy.concatenate( array_list )



def WriteArrayToImageData( tile, array, band=0):

    buf_list = []

    ossim_dtype = tile.getScalarType()

    for a in array.flat:
        buf_list.append(a)


    return WriteImageDataNumPy( tile, ossim_dtype, band, buf_list)


def WriteImageDataToFile( imdata, fname, writer="JpegWriter"):
    return WriteImageDataToFile_C( imdata, fname, ossimString(writer))


class ossim2dTo2dTransform(ossimObject):
    __swig_setmethods__ = {}
    for _s in [ossimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossim2dTo2dTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossim2dTo2dTransform, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def forward(self, *args): return _pyossim.ossim2dTo2dTransform_forward(self, *args)
    def inverse(self, *args): return _pyossim.ossim2dTo2dTransform_inverse(self, *args)
    def __set__(self, *args): return _pyossim.ossim2dTo2dTransform___set__(self, *args)
    def getOrigin(self): return _pyossim.ossim2dTo2dTransform_getOrigin(self)
    def ossimObject_print(self, *args): return _pyossim.ossim2dTo2dTransform_ossimObject_print(self, *args)
    def saveState(self, *args): return _pyossim.ossim2dTo2dTransform_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossim2dTo2dTransform_loadState(self, *args)
    def setConvergenceThreshold(self, *args): return _pyossim.ossim2dTo2dTransform_setConvergenceThreshold(self, *args)
    def setMaxIterations(self, *args): return _pyossim.ossim2dTo2dTransform_setMaxIterations(self, *args)
    def setDxDy(self, *args): return _pyossim.ossim2dTo2dTransform_setDxDy(self, *args)
ossim2dTo2dTransform_swigregister = _pyossim.ossim2dTo2dTransform_swigregister
ossim2dTo2dTransform_swigregister(ossim2dTo2dTransform)

class ossim2dBilinearTransform(ossim2dTo2dTransform):
    __swig_setmethods__ = {}
    for _s in [ossim2dTo2dTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossim2dBilinearTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ossim2dTo2dTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossim2dBilinearTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossim2dBilinearTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossim2dBilinearTransform_dup(self)
    def __set__(self, *args): return _pyossim.ossim2dBilinearTransform___set__(self, *args)
    def setFromPoints(self, *args): return _pyossim.ossim2dBilinearTransform_setFromPoints(self, *args)
    def forward(self, *args): return _pyossim.ossim2dBilinearTransform_forward(self, *args)
    def inverse(self, *args): return _pyossim.ossim2dBilinearTransform_inverse(self, *args)
    def saveState(self, *args): return _pyossim.ossim2dBilinearTransform_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossim2dBilinearTransform_loadState(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossim2dBilinearTransform_ossimObject_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossim2dBilinearTransform
    __del__ = lambda self : None;
ossim2dBilinearTransform_swigregister = _pyossim.ossim2dBilinearTransform_swigregister
ossim2dBilinearTransform_swigregister(ossim2dBilinearTransform)

class ossim2dLinearRegression(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossim2dLinearRegression, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossim2dLinearRegression, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossim2dLinearRegression()
        try: self.this.append(this)
        except: self.this = this
    def getEquation(self, *args): return _pyossim.ossim2dLinearRegression_getEquation(self, *args)
    def addPoint(self, *args): return _pyossim.ossim2dLinearRegression_addPoint(self, *args)
    def clear(self): return _pyossim.ossim2dLinearRegression_clear(self)
    def solve(self): return _pyossim.ossim2dLinearRegression_solve(self)
    def getNumberOfPoints(self): return _pyossim.ossim2dLinearRegression_getNumberOfPoints(self)
    __swig_destroy__ = _pyossim.delete_ossim2dLinearRegression
    __del__ = lambda self : None;
ossim2dLinearRegression_swigregister = _pyossim.ossim2dLinearRegression_swigregister
ossim2dLinearRegression_swigregister(ossim2dLinearRegression)

class ossim2dTo2dIdentityTransform(ossim2dTo2dTransform):
    __swig_setmethods__ = {}
    for _s in [ossim2dTo2dTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossim2dTo2dIdentityTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ossim2dTo2dTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossim2dTo2dIdentityTransform, name)
    __repr__ = _swig_repr
    def forward(self, *args): return _pyossim.ossim2dTo2dIdentityTransform_forward(self, *args)
    def inverse(self, *args): return _pyossim.ossim2dTo2dIdentityTransform_inverse(self, *args)
    def __set__(self, *args): return _pyossim.ossim2dTo2dIdentityTransform___set__(self, *args)
    def __init__(self): 
        this = _pyossim.new_ossim2dTo2dIdentityTransform()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossim2dTo2dIdentityTransform
    __del__ = lambda self : None;
ossim2dTo2dIdentityTransform_swigregister = _pyossim.ossim2dTo2dIdentityTransform_swigregister
ossim2dTo2dIdentityTransform_swigregister(ossim2dTo2dIdentityTransform)

class ossim2dTo2dShiftTransform(ossim2dTo2dTransform):
    __swig_setmethods__ = {}
    for _s in [ossim2dTo2dTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossim2dTo2dShiftTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ossim2dTo2dTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossim2dTo2dShiftTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossim2dTo2dShiftTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossim2dTo2dShiftTransform_dup(self)
    def __set__(self, *args): return _pyossim.ossim2dTo2dShiftTransform___set__(self, *args)
    def forward(self, *args): return _pyossim.ossim2dTo2dShiftTransform_forward(self, *args)
    def inverse(self, *args): return _pyossim.ossim2dTo2dShiftTransform_inverse(self, *args)
    def saveState(self, *args): return _pyossim.ossim2dTo2dShiftTransform_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossim2dTo2dShiftTransform_loadState(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossim2dTo2dShiftTransform_ossimObject_print(self, *args)
ossim2dTo2dShiftTransform_swigregister = _pyossim.ossim2dTo2dShiftTransform_swigregister
ossim2dTo2dShiftTransform_swigregister(ossim2dTo2dShiftTransform)

class ossim2dTo2dTransformFactoryBase(ossimObjectFactory):
    __swig_setmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossim2dTo2dTransformFactoryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossim2dTo2dTransformFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def createObject(self, *args): return _pyossim.ossim2dTo2dTransformFactoryBase_createObject(self, *args)
    def createTransform(self, *args): return _pyossim.ossim2dTo2dTransformFactoryBase_createTransform(self, *args)
    __swig_destroy__ = _pyossim.delete_ossim2dTo2dTransformFactoryBase
    __del__ = lambda self : None;
ossim2dTo2dTransformFactoryBase_swigregister = _pyossim.ossim2dTo2dTransformFactoryBase_swigregister
ossim2dTo2dTransformFactoryBase_swigregister(ossim2dTo2dTransformFactoryBase)

class ossim2dTo2dTransformFactory(ossim2dTo2dTransformFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ossim2dTo2dTransformFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossim2dTo2dTransformFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ossim2dTo2dTransformFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossim2dTo2dTransformFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossim2dTo2dTransformFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossim2dTo2dTransformFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossim2dTo2dTransformFactory_instance)
    def createTransform(self, *args): return _pyossim.ossim2dTo2dTransformFactory_createTransform(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossim2dTo2dTransformFactory_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossim2dTo2dTransformFactory
    __del__ = lambda self : None;
ossim2dTo2dTransformFactory_swigregister = _pyossim.ossim2dTo2dTransformFactory_swigregister
ossim2dTo2dTransformFactory_swigregister(ossim2dTo2dTransformFactory)

def ossim2dTo2dTransformFactory_instance():
  return _pyossim.ossim2dTo2dTransformFactory_instance()
ossim2dTo2dTransformFactory_instance = _pyossim.ossim2dTo2dTransformFactory_instance

class ossimAdjustableParameterInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimAdjustableParameterInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimAdjustableParameterInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimAdjustableParameterInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def getParameter(self): return _pyossim.ossimAdjustableParameterInfo_getParameter(self)
    def setParameter(self, *args): return _pyossim.ossimAdjustableParameterInfo_setParameter(self, *args)
    def getSigma(self): return _pyossim.ossimAdjustableParameterInfo_getSigma(self)
    def setSigma(self, *args): return _pyossim.ossimAdjustableParameterInfo_setSigma(self, *args)
    def getDescription(self): return _pyossim.ossimAdjustableParameterInfo_getDescription(self)
    def setDescription(self, *args): return _pyossim.ossimAdjustableParameterInfo_setDescription(self, *args)
    def getUnit(self): return _pyossim.ossimAdjustableParameterInfo_getUnit(self)
    def setUnit(self, *args): return _pyossim.ossimAdjustableParameterInfo_setUnit(self, *args)
    def getUnitAsString(self): return _pyossim.ossimAdjustableParameterInfo_getUnitAsString(self)
    def setCenter(self, *args): return _pyossim.ossimAdjustableParameterInfo_setCenter(self, *args)
    def getCenter(self): return _pyossim.ossimAdjustableParameterInfo_getCenter(self)
    def setOffset(self, *args): return _pyossim.ossimAdjustableParameterInfo_setOffset(self, *args)
    def computeOffset(self): return _pyossim.ossimAdjustableParameterInfo_computeOffset(self)
    def setLockFlag(self, *args): return _pyossim.ossimAdjustableParameterInfo_setLockFlag(self, *args)
    def getLockFlag(self): return _pyossim.ossimAdjustableParameterInfo_getLockFlag(self)
    def loadState(self, *args): return _pyossim.ossimAdjustableParameterInfo_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimAdjustableParameterInfo_saveState(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimAdjustableParameterInfo
    __del__ = lambda self : None;
ossimAdjustableParameterInfo_swigregister = _pyossim.ossimAdjustableParameterInfo_swigregister
ossimAdjustableParameterInfo_swigregister(ossimAdjustableParameterInfo)

class ossimAdjustableParameterInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimAdjustableParameterInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimAdjustableParameterInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimAdjustableParameterInterface
    __del__ = lambda self : None;
    def newAdjustment(self, numberOfParameters = 0): return _pyossim.ossimAdjustableParameterInterface_newAdjustment(self, numberOfParameters)
    def setAdjustmentDescription(self, *args): return _pyossim.ossimAdjustableParameterInterface_setAdjustmentDescription(self, *args)
    def getAdjustmentDescription(self): return _pyossim.ossimAdjustableParameterInterface_getAdjustmentDescription(self)
    def setCurrentAdjustment(self, *args): return _pyossim.ossimAdjustableParameterInterface_setCurrentAdjustment(self, *args)
    def eraseAdjustment(self, *args): return _pyossim.ossimAdjustableParameterInterface_eraseAdjustment(self, *args)
    def initAdjustableParameters(self): return _pyossim.ossimAdjustableParameterInterface_initAdjustableParameters(self)
    def resetAdjustableParameters(self, notify = False): return _pyossim.ossimAdjustableParameterInterface_resetAdjustableParameters(self, notify)
    def copyAdjustment(self, *args): return _pyossim.ossimAdjustableParameterInterface_copyAdjustment(self, *args)
    def getBaseObject(self): return _pyossim.ossimAdjustableParameterInterface_getBaseObject(self)
    def const_ossimAdjustableParameterInterface_getBaseObject(self): return _pyossim.ossimAdjustableParameterInterface_const_ossimAdjustableParameterInterface_getBaseObject(self)
    def keepAdjustment(self, *args): return _pyossim.ossimAdjustableParameterInterface_keepAdjustment(self, *args)
    def __set__(self, *args): return _pyossim.ossimAdjustableParameterInterface___set__(self, *args)
    def removeAllAdjustments(self): return _pyossim.ossimAdjustableParameterInterface_removeAllAdjustments(self)
    def getNumberOfAdjustableParameters(self): return _pyossim.ossimAdjustableParameterInterface_getNumberOfAdjustableParameters(self)
    def getAdjustableParameter(self, *args): return _pyossim.ossimAdjustableParameterInterface_getAdjustableParameter(self, *args)
    def setAdjustableParameter(self, *args): return _pyossim.ossimAdjustableParameterInterface_setAdjustableParameter(self, *args)
    def getParameterSigma(self, *args): return _pyossim.ossimAdjustableParameterInterface_getParameterSigma(self, *args)
    def setParameterSigma(self, *args): return _pyossim.ossimAdjustableParameterInterface_setParameterSigma(self, *args)
    def getParameterUnit(self, *args): return _pyossim.ossimAdjustableParameterInterface_getParameterUnit(self, *args)
    def setParameterUnit(self, *args): return _pyossim.ossimAdjustableParameterInterface_setParameterUnit(self, *args)
    def setParameterCenter(self, *args): return _pyossim.ossimAdjustableParameterInterface_setParameterCenter(self, *args)
    def getParameterCenter(self, *args): return _pyossim.ossimAdjustableParameterInterface_getParameterCenter(self, *args)
    def computeParameterOffset(self, *args): return _pyossim.ossimAdjustableParameterInterface_computeParameterOffset(self, *args)
    def setParameterOffset(self, *args): return _pyossim.ossimAdjustableParameterInterface_setParameterOffset(self, *args)
    def getParameterDescription(self, *args): return _pyossim.ossimAdjustableParameterInterface_getParameterDescription(self, *args)
    def setParameterDescription(self, *args): return _pyossim.ossimAdjustableParameterInterface_setParameterDescription(self, *args)
    def findParameterIdxGivenDescription(self, *args): return _pyossim.ossimAdjustableParameterInterface_findParameterIdxGivenDescription(self, *args)
    def findParameterIdxContainingDescription(self, *args): return _pyossim.ossimAdjustableParameterInterface_findParameterIdxContainingDescription(self, *args)
    def isParameterLocked(self, *args): return _pyossim.ossimAdjustableParameterInterface_isParameterLocked(self, *args)
    def setParameterLockFlag(self, *args): return _pyossim.ossimAdjustableParameterInterface_setParameterLockFlag(self, *args)
    def getParameterLockFlag(self, *args): return _pyossim.ossimAdjustableParameterInterface_getParameterLockFlag(self, *args)
    def lockAllParametersCurrentAdjustment(self): return _pyossim.ossimAdjustableParameterInterface_lockAllParametersCurrentAdjustment(self)
    def unlockAllParametersCurrentAdjustment(self): return _pyossim.ossimAdjustableParameterInterface_unlockAllParametersCurrentAdjustment(self)
    def lockAllParameters(self, *args): return _pyossim.ossimAdjustableParameterInterface_lockAllParameters(self, *args)
    def unlockAllParameters(self, *args): return _pyossim.ossimAdjustableParameterInterface_unlockAllParameters(self, *args)
    def resizeAdjustableParameterArray(self, *args): return _pyossim.ossimAdjustableParameterInterface_resizeAdjustableParameterArray(self, *args)
    def setAdjustment(self, *args): return _pyossim.ossimAdjustableParameterInterface_setAdjustment(self, *args)
    def addAdjustment(self, *args): return _pyossim.ossimAdjustableParameterInterface_addAdjustment(self, *args)
    def getAdjustment(self, *args): return _pyossim.ossimAdjustableParameterInterface_getAdjustment(self, *args)
    def getNumberOfAdjustments(self): return _pyossim.ossimAdjustableParameterInterface_getNumberOfAdjustments(self)
    def getCurrentAdjustmentIdx(self): return _pyossim.ossimAdjustableParameterInterface_getCurrentAdjustmentIdx(self)
    def setDirtyFlag(self, flag = True): return _pyossim.ossimAdjustableParameterInterface_setDirtyFlag(self, flag)
    def setAllDirtyFlag(self, flag = True): return _pyossim.ossimAdjustableParameterInterface_setAllDirtyFlag(self, flag)
    def hasDirtyAdjustments(self): return _pyossim.ossimAdjustableParameterInterface_hasDirtyAdjustments(self)
    def saveAdjustments(self, *args): return _pyossim.ossimAdjustableParameterInterface_saveAdjustments(self, *args)
    def loadAdjustments(self, *args): return _pyossim.ossimAdjustableParameterInterface_loadAdjustments(self, *args)
    def adjustableParametersChanged(self): return _pyossim.ossimAdjustableParameterInterface_adjustableParametersChanged(self)
ossimAdjustableParameterInterface_swigregister = _pyossim.ossimAdjustableParameterInterface_swigregister
ossimAdjustableParameterInterface_swigregister(ossimAdjustableParameterInterface)

class ossimBaseObjectFactory(ossimObjectFactory):
    __swig_setmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimBaseObjectFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimBaseObjectFactory, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimBaseObjectFactory
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimBaseObjectFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimBaseObjectFactory_instance)
    def createObject(self, *args): return _pyossim.ossimBaseObjectFactory_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimBaseObjectFactory_getTypeNameList(self, *args)
    def __init__(self): 
        this = _pyossim.new_ossimBaseObjectFactory()
        try: self.this.append(this)
        except: self.this = this
ossimBaseObjectFactory_swigregister = _pyossim.ossimBaseObjectFactory_swigregister
ossimBaseObjectFactory_swigregister(ossimBaseObjectFactory)

def ossimBaseObjectFactory_instance():
  return _pyossim.ossimBaseObjectFactory_instance()
ossimBaseObjectFactory_instance = _pyossim.ossimBaseObjectFactory_instance

class ossimProperty(ossimObject):
    __swig_setmethods__ = {}
    for _s in [ossimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimProperty, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ossimPropertyChangeType_NOTSPECIFIED = _pyossim.ossimProperty_ossimPropertyChangeType_NOTSPECIFIED
    ossimPropertyChangeType_CACHE_REFRESH = _pyossim.ossimProperty_ossimPropertyChangeType_CACHE_REFRESH
    ossimPropertyChangeType_FULL_REFRESH = _pyossim.ossimProperty_ossimPropertyChangeType_FULL_REFRESH
    ossimPropertyChangeType_AFFECTS_OTHERS = _pyossim.ossimProperty_ossimPropertyChangeType_AFFECTS_OTHERS
    ossimPropertyChangeType_ALL = _pyossim.ossimProperty_ossimPropertyChangeType_ALL
    def __set__(self, *args): return _pyossim.ossimProperty___set__(self, *args)
    def assign(self, *args): return _pyossim.ossimProperty_assign(self, *args)
    def getName(self): return _pyossim.ossimProperty_getName(self)
    def setName(self, *args): return _pyossim.ossimProperty_setName(self, *args)
    def setValue(self, *args): return _pyossim.ossimProperty_setValue(self, *args)
    def valueToString(self, *args): return _pyossim.ossimProperty_valueToString(self, *args)
    def const_ossimProperty_asContainer(self): return _pyossim.ossimProperty_const_ossimProperty_asContainer(self)
    def asContainer(self): return _pyossim.ossimProperty_asContainer(self)
    def isChangeTypeSet(self, *args): return _pyossim.ossimProperty_isChangeTypeSet(self, *args)
    def clearChangeType(self): return _pyossim.ossimProperty_clearChangeType(self)
    def setChangeType(self, *args): return _pyossim.ossimProperty_setChangeType(self, *args)
    def setFullRefreshBit(self): return _pyossim.ossimProperty_setFullRefreshBit(self)
    def setCacheRefreshBit(self): return _pyossim.ossimProperty_setCacheRefreshBit(self)
    def getChangeType(self): return _pyossim.ossimProperty_getChangeType(self)
    def isFullRefresh(self): return _pyossim.ossimProperty_isFullRefresh(self)
    def isCacheRefresh(self): return _pyossim.ossimProperty_isCacheRefresh(self)
    def isChangeTypeSpecified(self): return _pyossim.ossimProperty_isChangeTypeSpecified(self)
    def affectsOthers(self): return _pyossim.ossimProperty_affectsOthers(self)
    def setReadOnlyFlag(self, *args): return _pyossim.ossimProperty_setReadOnlyFlag(self, *args)
    def getReadOnlyFlag(self): return _pyossim.ossimProperty_getReadOnlyFlag(self)
    def isReadOnly(self): return _pyossim.ossimProperty_isReadOnly(self)
    def setModifiedFlag(self, *args): return _pyossim.ossimProperty_setModifiedFlag(self, *args)
    def getModifiedFlag(self): return _pyossim.ossimProperty_getModifiedFlag(self)
    def isModified(self): return _pyossim.ossimProperty_isModified(self)
    def clearModifiedFlag(self): return _pyossim.ossimProperty_clearModifiedFlag(self)
    def setDescription(self, *args): return _pyossim.ossimProperty_setDescription(self, *args)
    def getDescription(self): return _pyossim.ossimProperty_getDescription(self)
    def toXml(self): return _pyossim.ossimProperty_toXml(self)
    def saveState(self, *args): return _pyossim.ossimProperty_saveState(self, *args)
    def accept(self, *args): return _pyossim.ossimProperty_accept(self, *args)
ossimProperty_swigregister = _pyossim.ossimProperty_swigregister
ossimProperty_swigregister(ossimProperty)

class ossimPropertyInterfaceFactory(ossimObjectFactory):
    __swig_setmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPropertyInterfaceFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPropertyInterfaceFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimPropertyInterfaceFactory
    __del__ = lambda self : None;
    def createInterface(self, *args): return _pyossim.ossimPropertyInterfaceFactory_createInterface(self, *args)
ossimPropertyInterfaceFactory_swigregister = _pyossim.ossimPropertyInterfaceFactory_swigregister
ossimPropertyInterfaceFactory_swigregister(ossimPropertyInterfaceFactory)

class ossimPropertyInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPropertyInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPropertyInterface, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimPropertyInterface()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimPropertyInterface
    __del__ = lambda self : None;
    def setProperty(self, *args): return _pyossim.ossimPropertyInterface_setProperty(self, *args)
    def getProperty(self, *args): return _pyossim.ossimPropertyInterface_getProperty(self, *args)
    def getPropertyValueAsString(self, *args): return _pyossim.ossimPropertyInterface_getPropertyValueAsString(self, *args)
    def getPropertyNames(self, *args): return _pyossim.ossimPropertyInterface_getPropertyNames(self, *args)
    def getPropertyList(self, *args): return _pyossim.ossimPropertyInterface_getPropertyList(self, *args)
    def setProperties(self, *args): return _pyossim.ossimPropertyInterface_setProperties(self, *args)
ossimPropertyInterface_swigregister = _pyossim.ossimPropertyInterface_swigregister
ossimPropertyInterface_swigregister(ossimPropertyInterface)

class ossimPropertyInterfaceRegistry(ossimObjectFactory):
    __swig_setmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPropertyInterfaceRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPropertyInterfaceRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimPropertyInterfaceRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimPropertyInterfaceRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimPropertyInterfaceRegistry_instance)
    def createInterface(self, *args): return _pyossim.ossimPropertyInterfaceRegistry_createInterface(self, *args)
    def createObject(self, *args): return _pyossim.ossimPropertyInterfaceRegistry_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimPropertyInterfaceRegistry_getTypeNameList(self, *args)
    def addFactory(self, *args): return _pyossim.ossimPropertyInterfaceRegistry_addFactory(self, *args)
    def registerFactory(self, *args): return _pyossim.ossimPropertyInterfaceRegistry_registerFactory(self, *args)
ossimPropertyInterfaceRegistry_swigregister = _pyossim.ossimPropertyInterfaceRegistry_swigregister
ossimPropertyInterfaceRegistry_swigregister(ossimPropertyInterfaceRegistry)

def ossimPropertyInterfaceRegistry_instance():
  return _pyossim.ossimPropertyInterfaceRegistry_instance()
ossimPropertyInterfaceRegistry_instance = _pyossim.ossimPropertyInterfaceRegistry_instance


def ossimPropertyInterfaceRegistryGetInstance():
  return _pyossim.ossimPropertyInterfaceRegistryGetInstance()
ossimPropertyInterfaceRegistryGetInstance = _pyossim.ossimPropertyInterfaceRegistryGetInstance
class ossimListener(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimListener, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimListener, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimListener()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimListener
    __del__ = lambda self : None;
    def processEvent(self, *args): return _pyossim.ossimListener_processEvent(self, *args)
    def enableListener(self): return _pyossim.ossimListener_enableListener(self)
    def disableListener(self): return _pyossim.ossimListener_disableListener(self)
    def setListenerEnableFlag(self, *args): return _pyossim.ossimListener_setListenerEnableFlag(self, *args)
    def isListenerEnabled(self): return _pyossim.ossimListener_isListenerEnabled(self)
    def getListenerEnableFlag(self): return _pyossim.ossimListener_getListenerEnableFlag(self)
ossimListener_swigregister = _pyossim.ossimListener_swigregister
ossimListener_swigregister(ossimListener)

class ossimListenerManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimListenerManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimListenerManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimListenerManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimListenerManager
    __del__ = lambda self : None;
    def fireEvent(self, *args): return _pyossim.ossimListenerManager_fireEvent(self, *args)
    def addListener(self, *args): return _pyossim.ossimListenerManager_addListener(self, *args)
    def removeListener(self, *args): return _pyossim.ossimListenerManager_removeListener(self, *args)
    def findListener(self, *args): return _pyossim.ossimListenerManager_findListener(self, *args)
ossimListenerManager_swigregister = _pyossim.ossimListenerManager_swigregister
ossimListenerManager_swigregister(ossimListenerManager)

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyossim.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pyossim.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pyossim.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyossim.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyossim.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyossim.SwigPyIterator_copy(self)
    def next(self): return _pyossim.SwigPyIterator_next(self)
    def __next__(self): return _pyossim.SwigPyIterator___next__(self)
    def previous(self): return _pyossim.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyossim.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyossim.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyossim.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyossim.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyossim.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyossim.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyossim.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ossimConnectableObjectList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimConnectableObjectList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimConnectableObjectList, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyossim.ossimConnectableObjectList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyossim.ossimConnectableObjectList___nonzero__(self)
    def __bool__(self): return _pyossim.ossimConnectableObjectList___bool__(self)
    def __len__(self): return _pyossim.ossimConnectableObjectList___len__(self)
    def pop(self): return _pyossim.ossimConnectableObjectList_pop(self)
    def __getslice__(self, *args): return _pyossim.ossimConnectableObjectList___getslice__(self, *args)
    def __setslice__(self, *args): return _pyossim.ossimConnectableObjectList___setslice__(self, *args)
    def __delslice__(self, *args): return _pyossim.ossimConnectableObjectList___delslice__(self, *args)
    def __delitem__(self, *args): return _pyossim.ossimConnectableObjectList___delitem__(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimConnectableObjectList___getitem__(self, *args)
    def __setitem__(self, *args): return _pyossim.ossimConnectableObjectList___setitem__(self, *args)
    def append(self, *args): return _pyossim.ossimConnectableObjectList_append(self, *args)
    def empty(self): return _pyossim.ossimConnectableObjectList_empty(self)
    def size(self): return _pyossim.ossimConnectableObjectList_size(self)
    def clear(self): return _pyossim.ossimConnectableObjectList_clear(self)
    def swap(self, *args): return _pyossim.ossimConnectableObjectList_swap(self, *args)
    def get_allocator(self): return _pyossim.ossimConnectableObjectList_get_allocator(self)
    def begin(self): return _pyossim.ossimConnectableObjectList_begin(self)
    def end(self): return _pyossim.ossimConnectableObjectList_end(self)
    def rbegin(self): return _pyossim.ossimConnectableObjectList_rbegin(self)
    def rend(self): return _pyossim.ossimConnectableObjectList_rend(self)
    def pop_back(self): return _pyossim.ossimConnectableObjectList_pop_back(self)
    def erase(self, *args): return _pyossim.ossimConnectableObjectList_erase(self, *args)
    def __init__(self, *args): 
        this = _pyossim.new_ossimConnectableObjectList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyossim.ossimConnectableObjectList_push_back(self, *args)
    def front(self): return _pyossim.ossimConnectableObjectList_front(self)
    def back(self): return _pyossim.ossimConnectableObjectList_back(self)
    def assign(self, *args): return _pyossim.ossimConnectableObjectList_assign(self, *args)
    def resize(self, *args): return _pyossim.ossimConnectableObjectList_resize(self, *args)
    def insert(self, *args): return _pyossim.ossimConnectableObjectList_insert(self, *args)
    def reserve(self, *args): return _pyossim.ossimConnectableObjectList_reserve(self, *args)
    def capacity(self): return _pyossim.ossimConnectableObjectList_capacity(self)
    __swig_destroy__ = _pyossim.delete_ossimConnectableObjectList
    __del__ = lambda self : None;
ossimConnectableObjectList_swigregister = _pyossim.ossimConnectableObjectList_swigregister
ossimConnectableObjectList_swigregister(ossimConnectableObjectList)

class ossimConnectableObjectPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimConnectableObjectPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimConnectableObjectPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimConnectableObjectPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimConnectableObjectPtr
    __del__ = lambda self : None;
    def __ref__(self, *args): return _pyossim.ossimConnectableObjectPtr___ref__(self, *args)
    def __deref__(self, *args): return _pyossim.ossimConnectableObjectPtr___deref__(self, *args)
    def valid(self): return _pyossim.ossimConnectableObjectPtr_valid(self)
    def get(self, *args): return _pyossim.ossimConnectableObjectPtr_get(self, *args)
    def take(self): return _pyossim.ossimConnectableObjectPtr_take(self)
    def release(self): return _pyossim.ossimConnectableObjectPtr_release(self)
    def getId(self): return _pyossim.ossimConnectableObjectPtr_getId(self)
    def getOwner(self): return _pyossim.ossimConnectableObjectPtr_getOwner(self)
    def getDescription(self): return _pyossim.ossimConnectableObjectPtr_getDescription(self)
    def isConnected(self, *args): return _pyossim.ossimConnectableObjectPtr_isConnected(self, *args)
    def getMyInputIndexToConnectTo(self, *args): return _pyossim.ossimConnectableObjectPtr_getMyInputIndexToConnectTo(self, *args)
    def getMyOutputIndexToConnectTo(self, *args): return _pyossim.ossimConnectableObjectPtr_getMyOutputIndexToConnectTo(self, *args)
    def const_ossimConnectableObject_canConnectMyInputTo(self, *args): return _pyossim.ossimConnectableObjectPtr_const_ossimConnectableObject_canConnectMyInputTo(self, *args)
    def canConnectMyOutputTo(self, *args): return _pyossim.ossimConnectableObjectPtr_canConnectMyOutputTo(self, *args)
    def getNumberOfInputs(self): return _pyossim.ossimConnectableObjectPtr_getNumberOfInputs(self)
    def getNumberOfOutputs(self): return _pyossim.ossimConnectableObjectPtr_getNumberOfOutputs(self)
    def const_const_ossimConnectableObject_getInput(self, index = 0): return _pyossim.ossimConnectableObjectPtr_const_const_ossimConnectableObject_getInput(self, index)
    def const_ossimConnectableObject_getInput(self, index = 0): return _pyossim.ossimConnectableObjectPtr_const_ossimConnectableObject_getInput(self, index)
    def const_const_ossimConnectableObject_getOutput(self, index = 0): return _pyossim.ossimConnectableObjectPtr_const_const_ossimConnectableObject_getOutput(self, index)
    def const_ossimConnectableObject_getOutput(self, index = 0): return _pyossim.ossimConnectableObjectPtr_const_ossimConnectableObject_getOutput(self, index)
    def getInputListIsFixedFlag(self): return _pyossim.ossimConnectableObjectPtr_getInputListIsFixedFlag(self)
    def getOutputListIsFixedFlag(self): return _pyossim.ossimConnectableObjectPtr_getOutputListIsFixedFlag(self)
    def const_ossimConnectableObject_getInputList(self): return _pyossim.ossimConnectableObjectPtr_const_ossimConnectableObject_getInputList(self)
    def const_ossimConnectableObject_getOutputList(self): return _pyossim.ossimConnectableObjectPtr_const_ossimConnectableObject_getOutputList(self)
    def getProperty(self, *args): return _pyossim.ossimConnectableObjectPtr_getProperty(self, *args)
    def getPropertyNames(self, *args): return _pyossim.ossimConnectableObjectPtr_getPropertyNames(self, *args)
    def saveState(self, *args): return _pyossim.ossimConnectableObjectPtr_saveState(self, *args)
    def saveStateOfAllInputs(self, *args): return _pyossim.ossimConnectableObjectPtr_saveStateOfAllInputs(self, *args)
    def dup(self): return _pyossim.ossimConnectableObjectPtr_dup(self)
    def getShortName(self): return _pyossim.ossimConnectableObjectPtr_getShortName(self)
    def getLongName(self): return _pyossim.ossimConnectableObjectPtr_getLongName(self)
    def getClassName(self): return _pyossim.ossimConnectableObjectPtr_getClassName(self)
    def getType(self): return _pyossim.ossimConnectableObjectPtr_getType(self)
    def canCastTo(self, *args): return _pyossim.ossimConnectableObjectPtr_canCastTo(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimConnectableObjectPtr_ossimObject_print(self, *args)
    def isEqualTo(self, *args): return _pyossim.ossimConnectableObjectPtr_isEqualTo(self, *args)
    def ref(self): return _pyossim.ossimConnectableObjectPtr_ref(self)
    def unref(self): return _pyossim.ossimConnectableObjectPtr_unref(self)
    def unref_nodelete(self): return _pyossim.ossimConnectableObjectPtr_unref_nodelete(self)
    def referenceCount(self): return _pyossim.ossimConnectableObjectPtr_referenceCount(self)
    def getPropertyValueAsString(self, *args): return _pyossim.ossimConnectableObjectPtr_getPropertyValueAsString(self, *args)
    def getPropertyList(self, *args): return _pyossim.ossimConnectableObjectPtr_getPropertyList(self, *args)
ossimConnectableObjectPtr_swigregister = _pyossim.ossimConnectableObjectPtr_swigregister
ossimConnectableObjectPtr_swigregister(ossimConnectableObjectPtr)

class ossimConnectableObject(ossimObject,ossimListenerManager,ossimPropertyInterface):
    __swig_setmethods__ = {}
    for _s in [ossimObject,ossimListenerManager,ossimPropertyInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimConnectableObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject,ossimListenerManager,ossimPropertyInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimConnectableObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    CONNECTABLE_DIRECTION_NONE = _pyossim.ossimConnectableObject_CONNECTABLE_DIRECTION_NONE
    CONNECTABLE_DIRECTION_INPUT = _pyossim.ossimConnectableObject_CONNECTABLE_DIRECTION_INPUT
    CONNECTABLE_DIRECTION_OUTPUT = _pyossim.ossimConnectableObject_CONNECTABLE_DIRECTION_OUTPUT
    __swig_destroy__ = _pyossim.delete_ossimConnectableObject
    __del__ = lambda self : None;
    def setId(self, *args): return _pyossim.ossimConnectableObject_setId(self, *args)
    def getId(self): return _pyossim.ossimConnectableObject_getId(self)
    def getOwner(self): return _pyossim.ossimConnectableObject_getOwner(self)
    def changeOwner(self, *args): return _pyossim.ossimConnectableObject_changeOwner(self, *args)
    def setDescription(self, *args): return _pyossim.ossimConnectableObject_setDescription(self, *args)
    def getDescription(self): return _pyossim.ossimConnectableObject_getDescription(self)
    def isConnected(self, *args): return _pyossim.ossimConnectableObject_isConnected(self, *args)
    def findInputIndex(self, *args): return _pyossim.ossimConnectableObject_findInputIndex(self, *args)
    def findOutputIndex(self, *args): return _pyossim.ossimConnectableObject_findOutputIndex(self, *args)
    def getMyInputIndexToConnectTo(self, *args): return _pyossim.ossimConnectableObject_getMyInputIndexToConnectTo(self, *args)
    def getMyOutputIndexToConnectTo(self, *args): return _pyossim.ossimConnectableObject_getMyOutputIndexToConnectTo(self, *args)
    def const_ossimConnectableObject_canConnectMyInputTo(self, *args): return _pyossim.ossimConnectableObject_const_ossimConnectableObject_canConnectMyInputTo(self, *args)
    def canConnectMyOutputTo(self, *args): return _pyossim.ossimConnectableObject_canConnectMyOutputTo(self, *args)
    def disconnect(self, *args): return _pyossim.ossimConnectableObject_disconnect(self, *args)
    def disconnectMyInput(self, *args): return _pyossim.ossimConnectableObject_disconnectMyInput(self, *args)
    def disconnectMyInputs(self, *args): return _pyossim.ossimConnectableObject_disconnectMyInputs(self, *args)
    def disconnectMyOutput(self, *args): return _pyossim.ossimConnectableObject_disconnectMyOutput(self, *args)
    def disconnectMyOutputs(self, *args): return _pyossim.ossimConnectableObject_disconnectMyOutputs(self, *args)
    def disconnectAllInputs(self): return _pyossim.ossimConnectableObject_disconnectAllInputs(self)
    def disconnectAllOutputs(self): return _pyossim.ossimConnectableObject_disconnectAllOutputs(self)
    def connectMyInputTo(self, *args): return _pyossim.ossimConnectableObject_connectMyInputTo(self, *args)
    def connectMyOutputTo(self, *args): return _pyossim.ossimConnectableObject_connectMyOutputTo(self, *args)
    def connectInputList(self, *args): return _pyossim.ossimConnectableObject_connectInputList(self, *args)
    def connectOutputList(self, *args): return _pyossim.ossimConnectableObject_connectOutputList(self, *args)
    def getNumberOfInputs(self): return _pyossim.ossimConnectableObject_getNumberOfInputs(self)
    def getNumberOfOutputs(self): return _pyossim.ossimConnectableObject_getNumberOfOutputs(self)
    def getInput(self, index = 0): return _pyossim.ossimConnectableObject_getInput(self, index)
    def const_const_ossimConnectableObject_getInput(self, index = 0): return _pyossim.ossimConnectableObject_const_const_ossimConnectableObject_getInput(self, index)
    def const_ossimConnectableObject_getInput(self, index = 0): return _pyossim.ossimConnectableObject_const_ossimConnectableObject_getInput(self, index)
    def getOutput(self, index = 0): return _pyossim.ossimConnectableObject_getOutput(self, index)
    def const_const_ossimConnectableObject_getOutput(self, index = 0): return _pyossim.ossimConnectableObject_const_const_ossimConnectableObject_getOutput(self, index)
    def const_ossimConnectableObject_getOutput(self, index = 0): return _pyossim.ossimConnectableObject_const_ossimConnectableObject_getOutput(self, index)
    def setNumberOfInputs(self, *args): return _pyossim.ossimConnectableObject_setNumberOfInputs(self, *args)
    def getInputListIsFixedFlag(self): return _pyossim.ossimConnectableObject_getInputListIsFixedFlag(self)
    def getOutputListIsFixedFlag(self): return _pyossim.ossimConnectableObject_getOutputListIsFixedFlag(self)
    def setNumberOfOutputs(self, *args): return _pyossim.ossimConnectableObject_setNumberOfOutputs(self, *args)
    def const_ossimConnectableObject_getInputList(self): return _pyossim.ossimConnectableObject_const_ossimConnectableObject_getInputList(self)
    def const_ossimConnectableObject_getOutputList(self): return _pyossim.ossimConnectableObject_const_ossimConnectableObject_getOutputList(self)
    def getInputList(self): return _pyossim.ossimConnectableObject_getInputList(self)
    def getOutputList(self): return _pyossim.ossimConnectableObject_getOutputList(self)
    def propagateEventToOutputs(self, *args): return _pyossim.ossimConnectableObject_propagateEventToOutputs(self, *args)
    def propagateEventToInputs(self, *args): return _pyossim.ossimConnectableObject_propagateEventToInputs(self, *args)
    def setProperty(self, *args): return _pyossim.ossimConnectableObject_setProperty(self, *args)
    def getProperty(self, *args): return _pyossim.ossimConnectableObject_getProperty(self, *args)
    def getPropertyNames(self, *args): return _pyossim.ossimConnectableObject_getPropertyNames(self, *args)
    def loadState(self, *args): return _pyossim.ossimConnectableObject_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimConnectableObject_saveState(self, *args)
    def saveStateOfAllInputs(self, *args): return _pyossim.ossimConnectableObject_saveStateOfAllInputs(self, *args)
    def fillContainer(self, *args): return _pyossim.ossimConnectableObject_fillContainer(self, *args)
    def moveInputUp(self, *args): return _pyossim.ossimConnectableObject_moveInputUp(self, *args)
    def moveInputDown(self, *args): return _pyossim.ossimConnectableObject_moveInputDown(self, *args)
    def moveInputToTop(self, *args): return _pyossim.ossimConnectableObject_moveInputToTop(self, *args)
    def moveInputToBottom(self, *args): return _pyossim.ossimConnectableObject_moveInputToBottom(self, *args)
    def accept(self, *args): return _pyossim.ossimConnectableObject_accept(self, *args)
ossimConnectableObject_swigregister = _pyossim.ossimConnectableObject_swigregister
ossimConnectableObject_swigregister(ossimConnectableObject)

ossimConnectableContainerInterface_HEADER = _pyossim.ossimConnectableContainerInterface_HEADER
class ossimConnectableContainerInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimConnectableContainerInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimConnectableContainerInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimConnectableContainerInterface
    __del__ = lambda self : None;
    def const_ossimConnectableContainerInterface_findAllObjectsOfType(self, *args): return _pyossim.ossimConnectableContainerInterface_const_ossimConnectableContainerInterface_findAllObjectsOfType(self, *args)
    def findAllObjectsOfType(self, *args): return _pyossim.ossimConnectableContainerInterface_findAllObjectsOfType(self, *args)
    def findFirstObjectOfType(self, *args): return _pyossim.ossimConnectableContainerInterface_findFirstObjectOfType(self, *args)
    def findObject(self, *args): return _pyossim.ossimConnectableContainerInterface_findObject(self, *args)
    def makeUniqueIds(self): return _pyossim.ossimConnectableContainerInterface_makeUniqueIds(self)
    def getNumberOfObjects(self, recurse = True): return _pyossim.ossimConnectableContainerInterface_getNumberOfObjects(self, recurse)
    def addChild(self, *args): return _pyossim.ossimConnectableContainerInterface_addChild(self, *args)
    def removeChild(self, *args): return _pyossim.ossimConnectableContainerInterface_removeChild(self, *args)
    def getObject(self): return _pyossim.ossimConnectableContainerInterface_getObject(self)
    def const_ossimConnectableContainerInterface_getObject(self): return _pyossim.ossimConnectableContainerInterface_const_ossimConnectableContainerInterface_getObject(self)
    def getConnectableObject(self, *args): return _pyossim.ossimConnectableContainerInterface_getConnectableObject(self, *args)
    def deleteAllChildren(self): return _pyossim.ossimConnectableContainerInterface_deleteAllChildren(self)
    def getChildren(self, *args): return _pyossim.ossimConnectableContainerInterface_getChildren(self, *args)
ossimConnectableContainerInterface_swigregister = _pyossim.ossimConnectableContainerInterface_swigregister
ossimConnectableContainerInterface_swigregister(ossimConnectableContainerInterface)

class ossimConnectableObjectListener(ossimListener):
    __swig_setmethods__ = {}
    for _s in [ossimListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimConnectableObjectListener, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimConnectableObjectListener, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimConnectableObjectListener()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimConnectableObjectListener
    __del__ = lambda self : None;
    def processEvent(self, *args): return _pyossim.ossimConnectableObjectListener_processEvent(self, *args)
    def objectDestructingEvent(self, *args): return _pyossim.ossimConnectableObjectListener_objectDestructingEvent(self, *args)
    def connectionEvent(self, *args): return _pyossim.ossimConnectableObjectListener_connectionEvent(self, *args)
    def disconnectInputEvent(self, *args): return _pyossim.ossimConnectableObjectListener_disconnectInputEvent(self, *args)
    def disconnectOutputEvent(self, *args): return _pyossim.ossimConnectableObjectListener_disconnectOutputEvent(self, *args)
    def connectInputEvent(self, *args): return _pyossim.ossimConnectableObjectListener_connectInputEvent(self, *args)
    def connectOutputEvent(self, *args): return _pyossim.ossimConnectableObjectListener_connectOutputEvent(self, *args)
    def propertyEvent(self, *args): return _pyossim.ossimConnectableObjectListener_propertyEvent(self, *args)
    def addObjectEvent(self, *args): return _pyossim.ossimConnectableObjectListener_addObjectEvent(self, *args)
    def removeObjectEvent(self, *args): return _pyossim.ossimConnectableObjectListener_removeObjectEvent(self, *args)
    def containerEvent(self, *args): return _pyossim.ossimConnectableObjectListener_containerEvent(self, *args)
    def refreshEvent(self, *args): return _pyossim.ossimConnectableObjectListener_refreshEvent(self, *args)
ossimConnectableObjectListener_swigregister = _pyossim.ossimConnectableObjectListener_swigregister
ossimConnectableObjectListener_swigregister(ossimConnectableObjectListener)

class ossimConnectableDisplayListener(ossimListener):
    __swig_setmethods__ = {}
    for _s in [ossimListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimConnectableDisplayListener, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimConnectableDisplayListener, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimConnectableDisplayListener()
        try: self.this.append(this)
        except: self.this = this
    def processEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_processEvent(self, *args)
    def objectDestructingEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_objectDestructingEvent(self, *args)
    def connectionEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_connectionEvent(self, *args)
    def disconnectInputEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_disconnectInputEvent(self, *args)
    def disconnectOutputEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_disconnectOutputEvent(self, *args)
    def connectInputEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_connectInputEvent(self, *args)
    def connectOutputEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_connectOutputEvent(self, *args)
    def propertyEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_propertyEvent(self, *args)
    def displayListEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_displayListEvent(self, *args)
    def displayRefreshEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_displayRefreshEvent(self, *args)
    def refreshEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_refreshEvent(self, *args)
    def addObjectEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_addObjectEvent(self, *args)
    def removeObjectEvent(self, *args): return _pyossim.ossimConnectableDisplayListener_removeObjectEvent(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimConnectableDisplayListener
    __del__ = lambda self : None;
ossimConnectableDisplayListener_swigregister = _pyossim.ossimConnectableDisplayListener_swigregister
ossimConnectableDisplayListener_swigregister(ossimConnectableDisplayListener)

class ossimEvent(ossimObject):
    __swig_setmethods__ = {}
    for _s in [ossimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEvent, name)
    __repr__ = _swig_repr
    PROPAGATION_NONE = _pyossim.ossimEvent_PROPAGATION_NONE
    PROPAGATION_INPUT = _pyossim.ossimEvent_PROPAGATION_INPUT
    PROPAGATION_OUTPUT = _pyossim.ossimEvent_PROPAGATION_OUTPUT
    def __init__(self, *args): 
        this = _pyossim.new_ossimEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    def getId(self): return _pyossim.ossimEvent_getId(self)
    def setId(self, *args): return _pyossim.ossimEvent_setId(self, *args)
    def isConsumed(self): return _pyossim.ossimEvent_isConsumed(self)
    def setConsumedFlag(self, flag = True): return _pyossim.ossimEvent_setConsumedFlag(self, flag)
    def consume(self): return _pyossim.ossimEvent_consume(self)
    def const_ossimEvent_getObject(self): return _pyossim.ossimEvent_const_ossimEvent_getObject(self)
    def getObject(self): return _pyossim.ossimEvent_getObject(self)
    def const_ossimEvent_getCurrentObject(self): return _pyossim.ossimEvent_const_ossimEvent_getCurrentObject(self)
    def getCurrentObject(self): return _pyossim.ossimEvent_getCurrentObject(self)
    def setObject(self, *args): return _pyossim.ossimEvent_setObject(self, *args)
    def setCurrentObject(self, *args): return _pyossim.ossimEvent_setCurrentObject(self, *args)
    def setPropagationType(self, *args): return _pyossim.ossimEvent_setPropagationType(self, *args)
    def isPropagatingToOutputs(self): return _pyossim.ossimEvent_isPropagatingToOutputs(self)
    def isPropagatingToInputs(self): return _pyossim.ossimEvent_isPropagatingToInputs(self)
    __swig_destroy__ = _pyossim.delete_ossimEvent
    __del__ = lambda self : None;
ossimEvent_swigregister = _pyossim.ossimEvent_swigregister
ossimEvent_swigregister(ossimEvent)

class ossimContainerEvent(ossimEvent):
    __swig_setmethods__ = {}
    for _s in [ossimEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimContainerEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimContainerEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimContainerEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    def setObjectList(self, *args): return _pyossim.ossimContainerEvent_setObjectList(self, *args)
    def getObjectList(self, *args): return _pyossim.ossimContainerEvent_getObjectList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimContainerEvent
    __del__ = lambda self : None;
ossimContainerEvent_swigregister = _pyossim.ossimContainerEvent_swigregister
ossimContainerEvent_swigregister(ossimContainerEvent)

class ossimContainerProperty(ossimProperty):
    __swig_setmethods__ = {}
    for _s in [ossimProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimContainerProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimContainerProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimContainerProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimContainerProperty
    __del__ = lambda self : None;
    def dup(self): return _pyossim.ossimContainerProperty_dup(self)
    def assign(self, *args): return _pyossim.ossimContainerProperty_assign(self, *args)
    def addChildren(self, *args): return _pyossim.ossimContainerProperty_addChildren(self, *args)
    def addChild(self, *args): return _pyossim.ossimContainerProperty_addChild(self, *args)
    def addStringProperty(self, *args): return _pyossim.ossimContainerProperty_addStringProperty(self, *args)
    def const_ossimContainerProperty_asContainer(self): return _pyossim.ossimContainerProperty_const_ossimContainerProperty_asContainer(self)
    def asContainer(self): return _pyossim.ossimContainerProperty_asContainer(self)
    def deleteChildren(self): return _pyossim.ossimContainerProperty_deleteChildren(self)
    def setValue(self, *args): return _pyossim.ossimContainerProperty_setValue(self, *args)
    def valueToString(self, *args): return _pyossim.ossimContainerProperty_valueToString(self, *args)
    def getNumberOfProperties(self): return _pyossim.ossimContainerProperty_getNumberOfProperties(self)
    def getProperty(self, *args): return _pyossim.ossimContainerProperty_getProperty(self, *args)
    def getPropertyList(self, *args): return _pyossim.ossimContainerProperty_getPropertyList(self, *args)
    def toXml(self): return _pyossim.ossimContainerProperty_toXml(self)
    def setReadOnlyFlag(self, *args): return _pyossim.ossimContainerProperty_setReadOnlyFlag(self, *args)
    def accept(self, *args): return _pyossim.ossimContainerProperty_accept(self, *args)
ossimContainerProperty_swigregister = _pyossim.ossimContainerProperty_swigregister
ossimContainerProperty_swigregister(ossimContainerProperty)

class ossimCustomEditorWindowFactoryBase(ossimObjectFactory):
    __swig_setmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimCustomEditorWindowFactoryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimCustomEditorWindowFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def createCustomEditor(self, *args): return _pyossim.ossimCustomEditorWindowFactoryBase_createCustomEditor(self, *args)
    def createPopupEditor(self, *args): return _pyossim.ossimCustomEditorWindowFactoryBase_createPopupEditor(self, *args)
    def createPanelEditor(self, *args): return _pyossim.ossimCustomEditorWindowFactoryBase_createPanelEditor(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimCustomEditorWindowFactoryBase
    __del__ = lambda self : None;
ossimCustomEditorWindowFactoryBase_swigregister = _pyossim.ossimCustomEditorWindowFactoryBase_swigregister
ossimCustomEditorWindowFactoryBase_swigregister(ossimCustomEditorWindowFactoryBase)

class ossimCustomEditorWindow(ossimObject):
    __swig_setmethods__ = {}
    for _s in [ossimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimCustomEditorWindow, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimCustomEditorWindow, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getWindow(self): return _pyossim.ossimCustomEditorWindow_getWindow(self)
    def setParent(self, *args): return _pyossim.ossimCustomEditorWindow_setParent(self, *args)
    def getParent(self): return _pyossim.ossimCustomEditorWindow_getParent(self)
    def setObjectToEdit(self, *args): return _pyossim.ossimCustomEditorWindow_setObjectToEdit(self, *args)
    def canEdit(self, *args): return _pyossim.ossimCustomEditorWindow_canEdit(self, *args)
    def getObject(self): return _pyossim.ossimCustomEditorWindow_getObject(self)
    __swig_destroy__ = _pyossim.delete_ossimCustomEditorWindow
    __del__ = lambda self : None;
ossimCustomEditorWindow_swigregister = _pyossim.ossimCustomEditorWindow_swigregister
ossimCustomEditorWindow_swigregister(ossimCustomEditorWindow)

class ossimCustomEditorWindowRegistry(ossimCustomEditorWindowFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ossimCustomEditorWindowFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimCustomEditorWindowRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimCustomEditorWindowFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimCustomEditorWindowRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimCustomEditorWindowRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimCustomEditorWindowRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimCustomEditorWindowRegistry_instance)
    def registerFactory(self, *args): return _pyossim.ossimCustomEditorWindowRegistry_registerFactory(self, *args)
    def createCustomEditor(self, *args): return _pyossim.ossimCustomEditorWindowRegistry_createCustomEditor(self, *args)
    def createObject(self, *args): return _pyossim.ossimCustomEditorWindowRegistry_createObject(self, *args)
    def createPopupEditor(self, *args): return _pyossim.ossimCustomEditorWindowRegistry_createPopupEditor(self, *args)
    def createPanelEditor(self, *args): return _pyossim.ossimCustomEditorWindowRegistry_createPanelEditor(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimCustomEditorWindowRegistry_getTypeNameList(self, *args)
ossimCustomEditorWindowRegistry_swigregister = _pyossim.ossimCustomEditorWindowRegistry_swigregister
ossimCustomEditorWindowRegistry_swigregister(ossimCustomEditorWindowRegistry)

def ossimCustomEditorWindowRegistry_instance():
  return _pyossim.ossimCustomEditorWindowRegistry_instance()
ossimCustomEditorWindowRegistry_instance = _pyossim.ossimCustomEditorWindowRegistry_instance


def ossimCustomEditorWindowRegistryGetInstance():
  return _pyossim.ossimCustomEditorWindowRegistryGetInstance()
ossimCustomEditorWindowRegistryGetInstance = _pyossim.ossimCustomEditorWindowRegistryGetInstance
class ossimDateProperty(ossimProperty):
    __swig_setmethods__ = {}
    for _s in [ossimProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDateProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDateProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimDateProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossimDateProperty_dup(self)
    def setDate(self, *args): return _pyossim.ossimDateProperty_setDate(self, *args)
    def getDate(self): return _pyossim.ossimDateProperty_getDate(self)
    def setValue(self, *args): return _pyossim.ossimDateProperty_setValue(self, *args)
    def valueToString(self, *args): return _pyossim.ossimDateProperty_valueToString(self, *args)
    def assign(self, *args): return _pyossim.ossimDateProperty_assign(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimDateProperty
    __del__ = lambda self : None;
ossimDateProperty_swigregister = _pyossim.ossimDateProperty_swigregister
ossimDateProperty_swigregister(ossimDateProperty)

class ossimDatumFactoryInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDatumFactoryInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDatumFactoryInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimDatumFactoryInterface
    __del__ = lambda self : None;
    def create(self, *args): return _pyossim.ossimDatumFactoryInterface_create(self, *args)
    def getList(self, *args): return _pyossim.ossimDatumFactoryInterface_getList(self, *args)
ossimDatumFactoryInterface_swigregister = _pyossim.ossimDatumFactoryInterface_swigregister
ossimDatumFactoryInterface_swigregister(ossimDatumFactoryInterface)

class vectorossimString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorossimString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorossimString, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyossim.vectorossimString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyossim.vectorossimString___nonzero__(self)
    def __bool__(self): return _pyossim.vectorossimString___bool__(self)
    def __len__(self): return _pyossim.vectorossimString___len__(self)
    def pop(self): return _pyossim.vectorossimString_pop(self)
    def __getslice__(self, *args): return _pyossim.vectorossimString___getslice__(self, *args)
    def __setslice__(self, *args): return _pyossim.vectorossimString___setslice__(self, *args)
    def __delslice__(self, *args): return _pyossim.vectorossimString___delslice__(self, *args)
    def __delitem__(self, *args): return _pyossim.vectorossimString___delitem__(self, *args)
    def __getitem__(self, *args): return _pyossim.vectorossimString___getitem__(self, *args)
    def __setitem__(self, *args): return _pyossim.vectorossimString___setitem__(self, *args)
    def append(self, *args): return _pyossim.vectorossimString_append(self, *args)
    def empty(self): return _pyossim.vectorossimString_empty(self)
    def size(self): return _pyossim.vectorossimString_size(self)
    def clear(self): return _pyossim.vectorossimString_clear(self)
    def swap(self, *args): return _pyossim.vectorossimString_swap(self, *args)
    def get_allocator(self): return _pyossim.vectorossimString_get_allocator(self)
    def begin(self): return _pyossim.vectorossimString_begin(self)
    def end(self): return _pyossim.vectorossimString_end(self)
    def rbegin(self): return _pyossim.vectorossimString_rbegin(self)
    def rend(self): return _pyossim.vectorossimString_rend(self)
    def pop_back(self): return _pyossim.vectorossimString_pop_back(self)
    def erase(self, *args): return _pyossim.vectorossimString_erase(self, *args)
    def __init__(self, *args): 
        this = _pyossim.new_vectorossimString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyossim.vectorossimString_push_back(self, *args)
    def front(self): return _pyossim.vectorossimString_front(self)
    def back(self): return _pyossim.vectorossimString_back(self)
    def assign(self, *args): return _pyossim.vectorossimString_assign(self, *args)
    def resize(self, *args): return _pyossim.vectorossimString_resize(self, *args)
    def insert(self, *args): return _pyossim.vectorossimString_insert(self, *args)
    def reserve(self, *args): return _pyossim.vectorossimString_reserve(self, *args)
    def capacity(self): return _pyossim.vectorossimString_capacity(self)
    __swig_destroy__ = _pyossim.delete_vectorossimString
    __del__ = lambda self : None;
vectorossimString_swigregister = _pyossim.vectorossimString_swigregister
vectorossimString_swigregister(vectorossimString)

ossimDatumFactory_HEADER = _pyossim.ossimDatumFactory_HEADER
class ossimDatumFactory(ossimDatumFactoryInterface):
    __swig_setmethods__ = {}
    for _s in [ossimDatumFactoryInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDatumFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimDatumFactoryInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDatumFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimDatumFactory
    __del__ = lambda self : None;
    def create(self, *args): return _pyossim.ossimDatumFactory_create(self, *args)
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimDatumFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimDatumFactory_instance)
    def wgs84(self): return _pyossim.ossimDatumFactory_wgs84(self)
    def wgs72(self): return _pyossim.ossimDatumFactory_wgs72(self)
    def getList(self, *args): return _pyossim.ossimDatumFactory_getList(self, *args)
    def writeCStructure(self, *args): return _pyossim.ossimDatumFactory_writeCStructure(self, *args)
ossimDatumFactory_swigregister = _pyossim.ossimDatumFactory_swigregister
ossimDatumFactory_swigregister(ossimDatumFactory)

def ossimDatumFactory_instance():
  return _pyossim.ossimDatumFactory_instance()
ossimDatumFactory_instance = _pyossim.ossimDatumFactory_instance

class ossimDatumFactoryRegistry(ossimDatumFactoryInterface):
    __swig_setmethods__ = {}
    for _s in [ossimDatumFactoryInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDatumFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimDatumFactoryInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDatumFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimDatumFactoryRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimDatumFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimDatumFactoryRegistry_instance)
    def registerFactory(self, *args): return _pyossim.ossimDatumFactoryRegistry_registerFactory(self, *args)
    def create(self, *args): return _pyossim.ossimDatumFactoryRegistry_create(self, *args)
    def getList(self, *args): return _pyossim.ossimDatumFactoryRegistry_getList(self, *args)
ossimDatumFactoryRegistry_swigregister = _pyossim.ossimDatumFactoryRegistry_swigregister
ossimDatumFactoryRegistry_swigregister(ossimDatumFactoryRegistry)

def ossimDatumFactoryRegistry_instance():
  return _pyossim.ossimDatumFactoryRegistry_instance()
ossimDatumFactoryRegistry_instance = _pyossim.ossimDatumFactoryRegistry_instance

class ossimDatum(ossimObject):
    __swig_setmethods__ = {}
    for _s in [ossimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDatum, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDatum, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def shift(self, *args): return _pyossim.ossimDatum_shift(self, *args)
    def shiftToWgs84(self, *args): return _pyossim.ossimDatum_shiftToWgs84(self, *args)
    def shiftFromWgs84(self, *args): return _pyossim.ossimDatum_shiftFromWgs84(self, *args)
    def isTheSameAs(self, *args): return _pyossim.ossimDatum_isTheSameAs(self, *args)
    def code(self): return _pyossim.ossimDatum_code(self)
    def name(self): return _pyossim.ossimDatum_name(self)
    def epsgCode(self): return _pyossim.ossimDatum_epsgCode(self)
    def ellipsoid(self): return _pyossim.ossimDatum_ellipsoid(self)
    def sigmaX(self): return _pyossim.ossimDatum_sigmaX(self)
    def sigmaY(self): return _pyossim.ossimDatum_sigmaY(self)
    def sigmaZ(self): return _pyossim.ossimDatum_sigmaZ(self)
    def westLongitude(self): return _pyossim.ossimDatum_westLongitude(self)
    def eastLongitude(self): return _pyossim.ossimDatum_eastLongitude(self)
    def southLatitude(self): return _pyossim.ossimDatum_southLatitude(self)
    def northLatitude(self): return _pyossim.ossimDatum_northLatitude(self)
    def param1(self): return _pyossim.ossimDatum_param1(self)
    def param2(self): return _pyossim.ossimDatum_param2(self)
    def param3(self): return _pyossim.ossimDatum_param3(self)
    def param4(self): return _pyossim.ossimDatum_param4(self)
    def param5(self): return _pyossim.ossimDatum_param5(self)
    def param6(self): return _pyossim.ossimDatum_param6(self)
    def param7(self): return _pyossim.ossimDatum_param7(self)
    def isInside(self, *args): return _pyossim.ossimDatum_isInside(self, *args)
    def __eq__(self, *args): return _pyossim.ossimDatum___eq__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimDatum___ne__(self, *args)
    def isEqualTo(self, *args): return _pyossim.ossimDatum_isEqualTo(self, *args)
ossimDatum_swigregister = _pyossim.ossimDatum_swigregister
ossimDatum_swigregister(ossimDatum)

class ossimDirectoryData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDirectoryData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDirectoryData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimDirectoryData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimDirectoryData
    __del__ = lambda self : None;
    def isOk(self): return _pyossim.ossimDirectoryData_isOk(self)
    def setFlags(self, *args): return _pyossim.ossimDirectoryData_setFlags(self, *args)
    def getFlags(self): return _pyossim.ossimDirectoryData_getFlags(self)
    def rewind(self): return _pyossim.ossimDirectoryData_rewind(self)
    def read(self, *args): return _pyossim.ossimDirectoryData_read(self, *args)
ossimDirectoryData_swigregister = _pyossim.ossimDirectoryData_swigregister
ossimDirectoryData_swigregister(ossimDirectoryData)

class ossimDirectory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDirectory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDirectory, name)
    __repr__ = _swig_repr
    OSSIM_DIR_FILES = _pyossim.ossimDirectory_OSSIM_DIR_FILES
    OSSIM_DIR_DIRS = _pyossim.ossimDirectory_OSSIM_DIR_DIRS
    OSSIM_DIR_HIDDEN = _pyossim.ossimDirectory_OSSIM_DIR_HIDDEN
    OSSIM_DIR_DOTDOT = _pyossim.ossimDirectory_OSSIM_DIR_DOTDOT
    OSSIM_DIR_DEFAULT = _pyossim.ossimDirectory_OSSIM_DIR_DEFAULT
    def __init__(self, *args): 
        this = _pyossim.new_ossimDirectory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimDirectory
    __del__ = lambda self : None;
    def open(self, *args): return _pyossim.ossimDirectory_open(self, *args)
    def isOpened(self): return _pyossim.ossimDirectory_isOpened(self)
    def getFirst(self, *args): return _pyossim.ossimDirectory_getFirst(self, *args)
    def getNext(self, *args): return _pyossim.ossimDirectory_getNext(self, *args)
    def findAllFilesThatMatch(self, *args): return _pyossim.ossimDirectory_findAllFilesThatMatch(self, *args)
    def findCaseInsensitiveEquivalents(self, *args): return _pyossim.ossimDirectory_findCaseInsensitiveEquivalents(self, *args)
ossimDirectory_swigregister = _pyossim.ossimDirectory_swigregister
ossimDirectory_swigregister(ossimDirectory)

class ossimDisplayEventListener(ossimListener):
    __swig_setmethods__ = {}
    for _s in [ossimListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDisplayEventListener, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDisplayEventListener, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimDisplayEventListener()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimDisplayEventListener
    __del__ = lambda self : None;
    def processEvent(self, *args): return _pyossim.ossimDisplayEventListener_processEvent(self, *args)
    def displayListEvent(self, *args): return _pyossim.ossimDisplayEventListener_displayListEvent(self, *args)
    def displayRefreshEvent(self, *args): return _pyossim.ossimDisplayEventListener_displayRefreshEvent(self, *args)
ossimDisplayEventListener_swigregister = _pyossim.ossimDisplayEventListener_swigregister
ossimDisplayEventListener_swigregister(ossimDisplayEventListener)

class ossimDisplayInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDisplayInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDisplayInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimDisplayInterface
    __del__ = lambda self : None;
    def getDisplayDevice(self): return _pyossim.ossimDisplayInterface_getDisplayDevice(self)
    def setTitle(self, *args): return _pyossim.ossimDisplayInterface_setTitle(self, *args)
    def getTitle(self, *args): return _pyossim.ossimDisplayInterface_getTitle(self, *args)
    def close(self): return _pyossim.ossimDisplayInterface_close(self)
    def isOpen(self): return _pyossim.ossimDisplayInterface_isOpen(self)
    def open(self): return _pyossim.ossimDisplayInterface_open(self)
    def isMinimized(self): return _pyossim.ossimDisplayInterface_isMinimized(self)
ossimDisplayInterface_swigregister = _pyossim.ossimDisplayInterface_swigregister
ossimDisplayInterface_swigregister(ossimDisplayInterface)

class ossimDisplayListEvent(ossimEvent):
    __swig_setmethods__ = {}
    for _s in [ossimEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDisplayListEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDisplayListEvent, name)
    __repr__ = _swig_repr
    def __init__(self, obj = None): 
        this = _pyossim.new_ossimDisplayListEvent(obj)
        try: self.this.append(this)
        except: self.this = this
    def addDisplay(self, *args): return _pyossim.ossimDisplayListEvent_addDisplay(self, *args)
    def dup(self): return _pyossim.ossimDisplayListEvent_dup(self)
    def firstDisplay(self): return _pyossim.ossimDisplayListEvent_firstDisplay(self)
    def nextDisplay(self): return _pyossim.ossimDisplayListEvent_nextDisplay(self)
    def clearList(self): return _pyossim.ossimDisplayListEvent_clearList(self)
    __swig_destroy__ = _pyossim.delete_ossimDisplayListEvent
    __del__ = lambda self : None;
ossimDisplayListEvent_swigregister = _pyossim.ossimDisplayListEvent_swigregister
ossimDisplayListEvent_swigregister(ossimDisplayListEvent)

class ossimDisplayRefreshEvent(ossimEvent):
    __swig_setmethods__ = {}
    for _s in [ossimEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDisplayRefreshEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDisplayRefreshEvent, name)
    __repr__ = _swig_repr
    def __init__(self, obj = None): 
        this = _pyossim.new_ossimDisplayRefreshEvent(obj)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimDisplayRefreshEvent
    __del__ = lambda self : None;
ossimDisplayRefreshEvent_swigregister = _pyossim.ossimDisplayRefreshEvent_swigregister
ossimDisplayRefreshEvent_swigregister(ossimDisplayRefreshEvent)

class ossimDpt3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDpt3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDpt3d, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimDpt3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def __cmp__(self, *args): return _pyossim.ossimDpt3d___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimDpt3d___ne__(self, *args)
    def makeNan(self): return _pyossim.ossimDpt3d_makeNan(self)
    def hasNans(self): return _pyossim.ossimDpt3d_hasNans(self)
    def length(self): return _pyossim.ossimDpt3d_length(self)
    def length2(self): return _pyossim.ossimDpt3d_length2(self)
    def __add__(self, *args): return _pyossim.ossimDpt3d___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimDpt3d___sub__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimDpt3d___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.ossimDpt3d___isub__(self, *args)
    def __div__(self, *args): return _pyossim.ossimDpt3d___div__(self, *args)
    def __idiv__(self, *args): return _pyossim.ossimDpt3d___idiv__(self, *args)
    def __imul__(self, *args): return _pyossim.ossimDpt3d___imul__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimDpt3d___mul__(self, *args)
    def __xor__(self, *args): return _pyossim.ossimDpt3d___xor__(self, *args)
    def toString(self, precision = 15): return _pyossim.ossimDpt3d_toString(self, precision)
    def toPoint(self, *args): return _pyossim.ossimDpt3d_toPoint(self, *args)
    __swig_setmethods__["x"] = _pyossim.ossimDpt3d_x_set
    __swig_getmethods__["x"] = _pyossim.ossimDpt3d_x_get
    if _newclass:x = _swig_property(_pyossim.ossimDpt3d_x_get, _pyossim.ossimDpt3d_x_set)
    __swig_setmethods__["y"] = _pyossim.ossimDpt3d_y_set
    __swig_getmethods__["y"] = _pyossim.ossimDpt3d_y_get
    if _newclass:y = _swig_property(_pyossim.ossimDpt3d_y_get, _pyossim.ossimDpt3d_y_set)
    __swig_setmethods__["z"] = _pyossim.ossimDpt3d_z_set
    __swig_getmethods__["z"] = _pyossim.ossimDpt3d_z_get
    if _newclass:z = _swig_property(_pyossim.ossimDpt3d_z_get, _pyossim.ossimDpt3d_z_set)
    __swig_destroy__ = _pyossim.delete_ossimDpt3d
    __del__ = lambda self : None;
ossimDpt3d_swigregister = _pyossim.ossimDpt3d_swigregister
ossimDpt3d_swigregister(ossimDpt3d)

class ossimDpt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDpt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimDpt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimDpt___set__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimDpt___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimDpt___ne__(self, *args)
    def makeNan(self): return _pyossim.ossimDpt_makeNan(self)
    def hasNans(self): return _pyossim.ossimDpt_hasNans(self)
    def isNan(self): return _pyossim.ossimDpt_isNan(self)
    def length(self): return _pyossim.ossimDpt_length(self)
    def __add__(self, *args): return _pyossim.ossimDpt___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimDpt___sub__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimDpt___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.ossimDpt___isub__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimDpt___mul__(self, *args)
    def __div__(self, *args): return _pyossim.ossimDpt___div__(self, *args)
    def ossimDpt_print(self, *args): return _pyossim.ossimDpt_ossimDpt_print(self, *args)
    def toString(self, precision = 15): return _pyossim.ossimDpt_toString(self, precision)
    def toPoint(self, *args): return _pyossim.ossimDpt_toPoint(self, *args)
    def isEqualTo(self, *args): return _pyossim.ossimDpt_isEqualTo(self, *args)
    __swig_setmethods__["x"] = _pyossim.ossimDpt_x_set
    __swig_getmethods__["x"] = _pyossim.ossimDpt_x_get
    if _newclass:x = _swig_property(_pyossim.ossimDpt_x_get, _pyossim.ossimDpt_x_set)
    __swig_setmethods__["samp"] = _pyossim.ossimDpt_samp_set
    __swig_getmethods__["samp"] = _pyossim.ossimDpt_samp_get
    if _newclass:samp = _swig_property(_pyossim.ossimDpt_samp_get, _pyossim.ossimDpt_samp_set)
    __swig_setmethods__["u"] = _pyossim.ossimDpt_u_set
    __swig_getmethods__["u"] = _pyossim.ossimDpt_u_get
    if _newclass:u = _swig_property(_pyossim.ossimDpt_u_get, _pyossim.ossimDpt_u_set)
    __swig_setmethods__["lon"] = _pyossim.ossimDpt_lon_set
    __swig_getmethods__["lon"] = _pyossim.ossimDpt_lon_get
    if _newclass:lon = _swig_property(_pyossim.ossimDpt_lon_get, _pyossim.ossimDpt_lon_set)
    __swig_setmethods__["y"] = _pyossim.ossimDpt_y_set
    __swig_getmethods__["y"] = _pyossim.ossimDpt_y_get
    if _newclass:y = _swig_property(_pyossim.ossimDpt_y_get, _pyossim.ossimDpt_y_set)
    __swig_setmethods__["line"] = _pyossim.ossimDpt_line_set
    __swig_getmethods__["line"] = _pyossim.ossimDpt_line_get
    if _newclass:line = _swig_property(_pyossim.ossimDpt_line_get, _pyossim.ossimDpt_line_set)
    __swig_setmethods__["v"] = _pyossim.ossimDpt_v_set
    __swig_getmethods__["v"] = _pyossim.ossimDpt_v_get
    if _newclass:v = _swig_property(_pyossim.ossimDpt_v_get, _pyossim.ossimDpt_v_set)
    __swig_setmethods__["lat"] = _pyossim.ossimDpt_lat_set
    __swig_getmethods__["lat"] = _pyossim.ossimDpt_lat_get
    if _newclass:lat = _swig_property(_pyossim.ossimDpt_lat_get, _pyossim.ossimDpt_lat_set)
    __swig_destroy__ = _pyossim.delete_ossimDpt
    __del__ = lambda self : None;
ossimDpt_swigregister = _pyossim.ossimDpt_swigregister
ossimDpt_swigregister(ossimDpt)

class ossimEbcdicToAscii(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEbcdicToAscii, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEbcdicToAscii, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimEbcdicToAscii()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimEbcdicToAscii
    __del__ = lambda self : None;
    def asciiToEbcdic(self, *args): return _pyossim.ossimEbcdicToAscii_asciiToEbcdic(self, *args)
    def ebcdicToAscii(self, *args): return _pyossim.ossimEbcdicToAscii_ebcdicToAscii(self, *args)
ossimEbcdicToAscii_swigregister = _pyossim.ossimEbcdicToAscii_swigregister
ossimEbcdicToAscii_swigregister(ossimEbcdicToAscii)

class ossimElevationManagerEvent(ossimEvent):
    __swig_setmethods__ = {}
    for _s in [ossimEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevationManagerEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevationManagerEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimElevationManagerEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossimElevationManagerEvent_dup(self)
    __swig_destroy__ = _pyossim.delete_ossimElevationManagerEvent
    __del__ = lambda self : None;
ossimElevationManagerEvent_swigregister = _pyossim.ossimElevationManagerEvent_swigregister
ossimElevationManagerEvent_swigregister(ossimElevationManagerEvent)

class ossimElevationManagerEventListener(ossimListener):
    __swig_setmethods__ = {}
    for _s in [ossimListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevationManagerEventListener, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevationManagerEventListener, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimElevationManagerEventListener()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimElevationManagerEventListener
    __del__ = lambda self : None;
    def processEvent(self, *args): return _pyossim.ossimElevationManagerEventListener_processEvent(self, *args)
ossimElevationManagerEventListener_swigregister = _pyossim.ossimElevationManagerEventListener_swigregister
ossimElevationManagerEventListener_swigregister(ossimElevationManagerEventListener)

class ossimEllipsoidFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEllipsoidFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEllipsoidFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimEllipsoidFactory
    __del__ = lambda self : None;
    def create(self, *args): return _pyossim.ossimEllipsoidFactory_create(self, *args)
    def wgs84(self): return _pyossim.ossimEllipsoidFactory_wgs84(self)
    def wgs72(self): return _pyossim.ossimEllipsoidFactory_wgs72(self)
    def findEpsgCode(self, *args): return _pyossim.ossimEllipsoidFactory_findEpsgCode(self, *args)
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimEllipsoidFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimEllipsoidFactory_instance)
ossimEllipsoidFactory_swigregister = _pyossim.ossimEllipsoidFactory_swigregister
ossimEllipsoidFactory_swigregister(ossimEllipsoidFactory)

def ossimEllipsoidFactory_instance():
  return _pyossim.ossimEllipsoidFactory_instance()
ossimEllipsoidFactory_instance = _pyossim.ossimEllipsoidFactory_instance

ossimEllipsoid_HEADER = _pyossim.ossimEllipsoid_HEADER
class ossimEllipsoid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEllipsoid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEllipsoid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimEllipsoid(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimEllipsoid
    __del__ = lambda self : None;
    def name(self): return _pyossim.ossimEllipsoid_name(self)
    def code(self): return _pyossim.ossimEllipsoid_code(self)
    def a(self): return _pyossim.ossimEllipsoid_a(self)
    def b(self): return _pyossim.ossimEllipsoid_b(self)
    def getA(self): return _pyossim.ossimEllipsoid_getA(self)
    def getB(self): return _pyossim.ossimEllipsoid_getB(self)
    def getFlattening(self): return _pyossim.ossimEllipsoid_getFlattening(self)
    def setA(self, *args): return _pyossim.ossimEllipsoid_setA(self, *args)
    def setB(self, *args): return _pyossim.ossimEllipsoid_setB(self, *args)
    def setAB(self, *args): return _pyossim.ossimEllipsoid_setAB(self, *args)
    def setEpsgCode(self, *args): return _pyossim.ossimEllipsoid_setEpsgCode(self, *args)
    def eccentricitySquared(self): return _pyossim.ossimEllipsoid_eccentricitySquared(self)
    def flattening(self): return _pyossim.ossimEllipsoid_flattening(self)
    def eccentricity(self): return _pyossim.ossimEllipsoid_eccentricity(self)
    def getEpsgCode(self): return _pyossim.ossimEllipsoid_getEpsgCode(self)
    def nearestIntersection(self, *args): return _pyossim.ossimEllipsoid_nearestIntersection(self, *args)
    def evaluate(self, *args): return _pyossim.ossimEllipsoid_evaluate(self, *args)
    def gradient(self, *args): return _pyossim.ossimEllipsoid_gradient(self, *args)
    def prinRadiiOfCurv(self, *args): return _pyossim.ossimEllipsoid_prinRadiiOfCurv(self, *args)
    def jacobianWrtEcef(self, *args): return _pyossim.ossimEllipsoid_jacobianWrtEcef(self, *args)
    def jacobianWrtGeo(self, *args): return _pyossim.ossimEllipsoid_jacobianWrtGeo(self, *args)
    def geodeticRadius(self, *args): return _pyossim.ossimEllipsoid_geodeticRadius(self, *args)
    def geodeticRadii(self, *args): return _pyossim.ossimEllipsoid_geodeticRadii(self, *args)
    def latLonHeightToXYZ(self, *args): return _pyossim.ossimEllipsoid_latLonHeightToXYZ(self, *args)
    def XYZToLatLonHeight(self, *args): return _pyossim.ossimEllipsoid_XYZToLatLonHeight(self, *args)
    def computeLocalToWorldTransformFromXYZ(self, *args): return _pyossim.ossimEllipsoid_computeLocalToWorldTransformFromXYZ(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimEllipsoid___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimEllipsoid___ne__(self, *args)
    def loadState(self, *args): return _pyossim.ossimEllipsoid_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimEllipsoid_saveState(self, *args)
    def __set__(self, *args): return _pyossim.ossimEllipsoid___set__(self, *args)
    def isEqualTo(self, *args): return _pyossim.ossimEllipsoid_isEqualTo(self, *args)
ossimEllipsoid_swigregister = _pyossim.ossimEllipsoid_swigregister
ossimEllipsoid_swigregister(ossimEllipsoid)

class ossimEnvironmentUtility(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEnvironmentUtility, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEnvironmentUtility, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimEnvironmentUtility_instance
    if _newclass:instance = staticmethod(_pyossim.ossimEnvironmentUtility_instance)
    def getEnvironmentVariable(self, *args): return _pyossim.ossimEnvironmentUtility_getEnvironmentVariable(self, *args)
    def getUserDir(self): return _pyossim.ossimEnvironmentUtility_getUserDir(self)
    def getUserName(self): return _pyossim.ossimEnvironmentUtility_getUserName(self)
    def getUserOssimSupportDir(self): return _pyossim.ossimEnvironmentUtility_getUserOssimSupportDir(self)
    def getUserOssimPreferences(self): return _pyossim.ossimEnvironmentUtility_getUserOssimPreferences(self)
    def getUserOssimPluginDir(self): return _pyossim.ossimEnvironmentUtility_getUserOssimPluginDir(self)
    def getInstalledOssimSupportDir(self): return _pyossim.ossimEnvironmentUtility_getInstalledOssimSupportDir(self)
    def getInstalledOssimPluginDir(self): return _pyossim.ossimEnvironmentUtility_getInstalledOssimPluginDir(self)
    def getInstalledOssimPreferences(self): return _pyossim.ossimEnvironmentUtility_getInstalledOssimPreferences(self)
    def getCurrentWorkingDir(self): return _pyossim.ossimEnvironmentUtility_getCurrentWorkingDir(self)
    def searchAllPaths(self, *args): return _pyossim.ossimEnvironmentUtility_searchAllPaths(self, *args)
    def findPlugin(self, *args): return _pyossim.ossimEnvironmentUtility_findPlugin(self, *args)
    def findData(self, *args): return _pyossim.ossimEnvironmentUtility_findData(self, *args)
    def addDataSearchPath(self, *args): return _pyossim.ossimEnvironmentUtility_addDataSearchPath(self, *args)
    def addDataSearchPathToFront(self, *args): return _pyossim.ossimEnvironmentUtility_addDataSearchPathToFront(self, *args)
    def addPluginSearchPath(self, *args): return _pyossim.ossimEnvironmentUtility_addPluginSearchPath(self, *args)
    def addPluginSearchPathToFront(self, *args): return _pyossim.ossimEnvironmentUtility_addPluginSearchPathToFront(self, *args)
    def getPluginSearchPath(self): return _pyossim.ossimEnvironmentUtility_getPluginSearchPath(self)
    def const_getPluginSearchPath(self): return _pyossim.ossimEnvironmentUtility_const_getPluginSearchPath(self)
    def getDataSearchPath(self): return _pyossim.ossimEnvironmentUtility_getDataSearchPath(self)
    def const_getDataSearchPath(self): return _pyossim.ossimEnvironmentUtility_const_getDataSearchPath(self)
    __swig_destroy__ = _pyossim.delete_ossimEnvironmentUtility
    __del__ = lambda self : None;
ossimEnvironmentUtility_swigregister = _pyossim.ossimEnvironmentUtility_swigregister
ossimEnvironmentUtility_swigregister(ossimEnvironmentUtility)

def ossimEnvironmentUtility_instance():
  return _pyossim.ossimEnvironmentUtility_instance()
ossimEnvironmentUtility_instance = _pyossim.ossimEnvironmentUtility_instance

ossimEpsgDatumFactory_HEADER = _pyossim.ossimEpsgDatumFactory_HEADER
class ossimEpsgDatumFactory(ossimDatumFactoryInterface):
    __swig_setmethods__ = {}
    for _s in [ossimDatumFactoryInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEpsgDatumFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimDatumFactoryInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEpsgDatumFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimEpsgDatumFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimEpsgDatumFactory_instance)
    __swig_destroy__ = _pyossim.delete_ossimEpsgDatumFactory
    __del__ = lambda self : None;
    def getList(self, *args): return _pyossim.ossimEpsgDatumFactory_getList(self, *args)
    def create(self, *args): return _pyossim.ossimEpsgDatumFactory_create(self, *args)
    def findEpsgCode(self, *args): return _pyossim.ossimEpsgDatumFactory_findEpsgCode(self, *args)
    def findAlphaCode(self, *args): return _pyossim.ossimEpsgDatumFactory_findAlphaCode(self, *args)
ossimEpsgDatumFactory_swigregister = _pyossim.ossimEpsgDatumFactory_swigregister
ossimEpsgDatumFactory_swigregister(ossimEpsgDatumFactory)

def ossimEpsgDatumFactory_instance():
  return _pyossim.ossimEpsgDatumFactory_instance()
ossimEpsgDatumFactory_instance = _pyossim.ossimEpsgDatumFactory_instance

class ossimErrorCodes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimErrorCodes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimErrorCodes, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimErrorCodes
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimErrorCodes_instance
    if _newclass:instance = staticmethod(_pyossim.ossimErrorCodes_instance)
    def getErrorCode(self, *args): return _pyossim.ossimErrorCodes_getErrorCode(self, *args)
    def getErrorString(self, *args): return _pyossim.ossimErrorCodes_getErrorString(self, *args)
ossimErrorCodes_swigregister = _pyossim.ossimErrorCodes_swigregister
ossimErrorCodes_swigregister(ossimErrorCodes)

def ossimErrorCodes_instance():
  return _pyossim.ossimErrorCodes_instance()
ossimErrorCodes_instance = _pyossim.ossimErrorCodes_instance
cvar = _pyossim.cvar
ossimErrorCodes.OSSIM_OK = _pyossim.cvar.ossimErrorCodes_OSSIM_OK
ossimErrorCodes.OSSIM_NO_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_NO_ERROR
ossimErrorCodes.OSSIM_WARNING = _pyossim.cvar.ossimErrorCodes_OSSIM_WARNING
ossimErrorCodes.OSSIM_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_ERROR
ossimErrorCodes.OSSIM_ERROR_STD_PARALLEL_1 = _pyossim.cvar.ossimErrorCodes_OSSIM_ERROR_STD_PARALLEL_1
ossimErrorCodes.OSSIM_LAT_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_LAT_ERROR
ossimErrorCodes.OSSIM_LON_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_LON_ERROR
ossimErrorCodes.OSSIM_NORTHING_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_NORTHING_ERROR
ossimErrorCodes.OSSIM_ORIGIN_LAT_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_ORIGIN_LAT_ERROR
ossimErrorCodes.OSSIM_CENT_MER_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_CENT_MER_ERROR
ossimErrorCodes.OSSIM_A_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_A_ERROR
ossimErrorCodes.OSSIM_B_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_B_ERROR
ossimErrorCodes.OSSIM_A_LESS_B_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_A_LESS_B_ERROR
ossimErrorCodes.OSSIM_FIRST_STDP_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_FIRST_STDP_ERROR
ossimErrorCodes.OSSIM_SEC_STDP_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_SEC_STDP_ERROR
ossimErrorCodes.OSSIM_FIRST_SECOND_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_FIRST_SECOND_ERROR
ossimErrorCodes.OSSIM_HEMISPHERE_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_HEMISPHERE_ERROR
ossimErrorCodes.OSSIM_EASTING_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_EASTING_ERROR
ossimErrorCodes.OSSIM_RADIUS_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_RADIUS_ERROR
ossimErrorCodes.OSSIM_ORIGIN_LON_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_ORIGIN_LON_ERROR
ossimErrorCodes.OSSIM_ORIENTATION_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_ORIENTATION_ERROR
ossimErrorCodes.OSSIM_SCALE_FACTOR_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_SCALE_FACTOR_ERROR
ossimErrorCodes.OSSIM_ZONE_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_ZONE_ERROR
ossimErrorCodes.OSSIM_ZONE_OVERRIDE_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_ZONE_OVERRIDE_ERROR
ossimErrorCodes.OSSIM_INVALID_FILE_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_INVALID_FILE_ERROR
ossimErrorCodes.OSSIM_OPEN_FILE_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_OPEN_FILE_ERROR
ossimErrorCodes.OSSIM_WRITE_FILE_ERROR = _pyossim.cvar.ossimErrorCodes_OSSIM_WRITE_FILE_ERROR
ossimErrorCodes.OSSIM_ERROR_UNKNOWN = _pyossim.cvar.ossimErrorCodes_OSSIM_ERROR_UNKNOWN

class ossimErrorStatusInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimErrorStatusInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimErrorStatusInterface, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimErrorStatusInterface()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimErrorStatusInterface
    __del__ = lambda self : None;
    def getErrorStatus(self): return _pyossim.ossimErrorStatusInterface_getErrorStatus(self)
    def getErrorStatusString(self): return _pyossim.ossimErrorStatusInterface_getErrorStatusString(self)
    def setErrorStatus(self, *args): return _pyossim.ossimErrorStatusInterface_setErrorStatus(self, *args)
    def clearErrorStatus(self): return _pyossim.ossimErrorStatusInterface_clearErrorStatus(self)
    def ossimErrorStatusInterface_print(self, *args): return _pyossim.ossimErrorStatusInterface_ossimErrorStatusInterface_print(self, *args)
ossimErrorStatusInterface_swigregister = _pyossim.ossimErrorStatusInterface_swigregister
ossimErrorStatusInterface_swigregister(ossimErrorStatusInterface)

class ossimException(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimException
    __del__ = lambda self : None;
    def what(self): return _pyossim.ossimException_what(self)
ossimException_swigregister = _pyossim.ossimException_swigregister
ossimException_swigregister(ossimException)

class ossimEcefPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEcefPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEcefPoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimEcefPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def makeNan(self): return _pyossim.ossimEcefPoint_makeNan(self)
    def hasNans(self): return _pyossim.ossimEcefPoint_hasNans(self)
    def isNan(self): return _pyossim.ossimEcefPoint_isNan(self)
    def __add__(self, *args): return _pyossim.ossimEcefPoint___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimEcefPoint___sub__(self, *args)
    def __set__(self, *args): return _pyossim.ossimEcefPoint___set__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimEcefPoint___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimEcefPoint___ne__(self, *args)
    def x(self): return _pyossim.ossimEcefPoint_x(self)
    def ossimEcefPoint_x(self): return _pyossim.ossimEcefPoint_ossimEcefPoint_x(self)
    def y(self): return _pyossim.ossimEcefPoint_y(self)
    def ossimEcefPoint_y(self): return _pyossim.ossimEcefPoint_ossimEcefPoint_y(self)
    def z(self): return _pyossim.ossimEcefPoint_z(self)
    def ossimEcefPoint_z(self): return _pyossim.ossimEcefPoint_ossimEcefPoint_z(self)
    def __getitem__(self, *args): return _pyossim.ossimEcefPoint___getitem__(self, *args)
    def const_ossimEcefPoint_getitem(self, *args): return _pyossim.ossimEcefPoint_const_ossimEcefPoint_getitem(self, *args)
    def const_ossimEcefPoint_data(self): return _pyossim.ossimEcefPoint_const_ossimEcefPoint_data(self)
    def data(self): return _pyossim.ossimEcefPoint_data(self)
    def getMagnitude(self): return _pyossim.ossimEcefPoint_getMagnitude(self)
    def magnitude(self): return _pyossim.ossimEcefPoint_magnitude(self)
    def length(self): return _pyossim.ossimEcefPoint_length(self)
    def normalize(self): return _pyossim.ossimEcefPoint_normalize(self)
    def toString(self, precision = 15): return _pyossim.ossimEcefPoint_toString(self, precision)
    def toVector(self): return _pyossim.ossimEcefPoint_toVector(self)
    def toPoint(self, *args): return _pyossim.ossimEcefPoint_toPoint(self, *args)
    def ossimEcefPoint_print(self, *args): return _pyossim.ossimEcefPoint_ossimEcefPoint_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimEcefPoint
    __del__ = lambda self : None;
ossimEcefPoint_swigregister = _pyossim.ossimEcefPoint_swigregister
ossimEcefPoint_swigregister(ossimEcefPoint)

class ossimEcefVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEcefVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEcefVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimEcefVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def makeNan(self): return _pyossim.ossimEcefVector_makeNan(self)
    def hasNans(self): return _pyossim.ossimEcefVector_hasNans(self)
    def isNan(self): return _pyossim.ossimEcefVector_isNan(self)
    def __sub__(self, *args): return _pyossim.ossimEcefVector___sub__(self, *args)
    def __add__(self, *args): return _pyossim.ossimEcefVector___add__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimEcefVector___mul__(self, *args)
    def __div__(self, *args): return _pyossim.ossimEcefVector___div__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimEcefVector___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimEcefVector___ne__(self, *args)
    def __set__(self, *args): return _pyossim.ossimEcefVector___set__(self, *args)
    def dot(self, *args): return _pyossim.ossimEcefVector_dot(self, *args)
    def angleTo(self, *args): return _pyossim.ossimEcefVector_angleTo(self, *args)
    def cross(self, *args): return _pyossim.ossimEcefVector_cross(self, *args)
    def unitVector(self): return _pyossim.ossimEcefVector_unitVector(self)
    def magnitude(self): return _pyossim.ossimEcefVector_magnitude(self)
    def norm2(self): return _pyossim.ossimEcefVector_norm2(self)
    def length(self): return _pyossim.ossimEcefVector_length(self)
    def normalize(self): return _pyossim.ossimEcefVector_normalize(self)
    def x(self): return _pyossim.ossimEcefVector_x(self)
    def ossimEcefVector_x(self): return _pyossim.ossimEcefVector_ossimEcefVector_x(self)
    def y(self): return _pyossim.ossimEcefVector_y(self)
    def ossimEcefVector_y(self): return _pyossim.ossimEcefVector_ossimEcefVector_y(self)
    def z(self): return _pyossim.ossimEcefVector_z(self)
    def ossimEcefVector_z(self): return _pyossim.ossimEcefVector_ossimEcefVector_z(self)
    def __getitem__(self, *args): return _pyossim.ossimEcefVector___getitem__(self, *args)
    def const_ossimEcefVector_getitem(self, *args): return _pyossim.ossimEcefVector_const_ossimEcefVector_getitem(self, *args)
    def const_ossimEcefVactor_data(self): return _pyossim.ossimEcefVector_const_ossimEcefVactor_data(self)
    def data(self): return _pyossim.ossimEcefVector_data(self)
    def toString(self, precision = 15): return _pyossim.ossimEcefVector_toString(self, precision)
    def toPoint(self, *args): return _pyossim.ossimEcefVector_toPoint(self, *args)
    def toVector(self): return _pyossim.ossimEcefVector_toVector(self)
    def ossimEcefVector_print(self, *args): return _pyossim.ossimEcefVector_ossimEcefVector_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimEcefVector
    __del__ = lambda self : None;
ossimEcefVector_swigregister = _pyossim.ossimEcefVector_swigregister
ossimEcefVector_swigregister(ossimEcefVector)

ossimString_HEADER = _pyossim.ossimString_HEADER
class ossimString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimString
    __del__ = lambda self : None;
    def contains(self, *args): return _pyossim.ossimString_contains(self, *args)
    def const_operator_std_string_ptr(self): return _pyossim.ossimString_const_operator_std_string_ptr(self)
    def operator_std_string_ptr(self): return _pyossim.ossimString_operator_std_string_ptr(self)
    def const_operator_char_ptr(self): return _pyossim.ossimString_const_operator_char_ptr(self)
    def chars(self): return _pyossim.ossimString_chars(self)
    def __set__(self, *args): return _pyossim.ossimString___set__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimString___iadd__(self, *args)
    def __at__(self, *args): return _pyossim.ossimString___at__(self, *args)
    def at(self, *args): return _pyossim.ossimString_at(self, *args)
    def append(self, *args): return _pyossim.ossimString_append(self, *args)
    def __add__(self, *args): return _pyossim.ossimString___add__(self, *args)
    def __eq__(self, *args): return _pyossim.ossimString___eq__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimString___ne__(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimString___getitem__(self, *args)
    def const_getitem(self, *args): return _pyossim.ossimString_const_getitem(self, *args)
    def insert(self, *args): return _pyossim.ossimString_insert(self, *args)
    def push_back(self, *args): return _pyossim.ossimString_push_back(self, *args)
    def substr(self, *args): return _pyossim.ossimString_substr(self, *args)
    def const_const_trim(self, *args): return _pyossim.ossimString_const_const_trim(self, *args)
    def trim(self, *args): return _pyossim.ossimString_trim(self, *args)
    def const_trim(self, *args): return _pyossim.ossimString_const_trim(self, *args)
    def beforePos(self, *args): return _pyossim.ossimString_beforePos(self, *args)
    def afterPos(self, *args): return _pyossim.ossimString_afterPos(self, *args)
    def substitute(self, *args): return _pyossim.ossimString_substitute(self, *args)
    def gsub(self, *args): return _pyossim.ossimString_gsub(self, *args)
    def explode(self, *args): return _pyossim.ossimString_explode(self, *args)
    def expandEnvironmentVariable(self): return _pyossim.ossimString_expandEnvironmentVariable(self)
    __swig_getmethods__["upcase"] = lambda x: _pyossim.ossimString_upcase
    if _newclass:upcase = staticmethod(_pyossim.ossimString_upcase)
    __swig_getmethods__["downcase"] = lambda x: _pyossim.ossimString_downcase
    if _newclass:downcase = staticmethod(_pyossim.ossimString_downcase)
    def const_upcase(self): return _pyossim.ossimString_const_upcase(self)
    def const_const_upcase(self): return _pyossim.ossimString_const_const_upcase(self)
    def const_downcase(self): return _pyossim.ossimString_const_downcase(self)
    def const_const_downcase(self): return _pyossim.ossimString_const_const_downcase(self)
    def c_str(self): return _pyossim.ossimString_c_str(self)
    def data(self): return _pyossim.ossimString_data(self)
    def size(self): return _pyossim.ossimString_size(self)
    def length(self): return _pyossim.ossimString_length(self)
    def empty(self): return _pyossim.ossimString_empty(self)
    def const_string(self): return _pyossim.ossimString_const_string(self)
    def string(self): return _pyossim.ossimString_string(self)
    def begin(self): return _pyossim.ossimString_begin(self)
    def end(self): return _pyossim.ossimString_end(self)
    def const_begin(self): return _pyossim.ossimString_const_begin(self)
    def const_end(self): return _pyossim.ossimString_const_end(self)
    def clear(self): return _pyossim.ossimString_clear(self)
    def erase(self, *args): return _pyossim.ossimString_erase(self, *args)
    def find(self, *args): return _pyossim.ossimString_find(self, *args)
    def rfind(self, *args): return _pyossim.ossimString_rfind(self, *args)
    def find_first_of(self, *args): return _pyossim.ossimString_find_first_of(self, *args)
    def find_first_not_of(self, *args): return _pyossim.ossimString_find_first_not_of(self, *args)
    def find_last_of(self, *args): return _pyossim.ossimString_find_last_of(self, *args)
    def assign(self, *args): return _pyossim.ossimString_assign(self, *args)
    def replace(self, *args): return _pyossim.ossimString_replace(self, *args)
    def reserve(self, *args): return _pyossim.ossimString_reserve(self, *args)
    def before(self, *args): return _pyossim.ossimString_before(self, *args)
    def after(self, *args): return _pyossim.ossimString_after(self, *args)
    def stringDup(self): return _pyossim.ossimString_stringDup(self)
    def toBool(self): return _pyossim.ossimString_toBool(self)
    __swig_getmethods__["const_toBool"] = lambda x: _pyossim.ossimString_const_toBool
    if _newclass:const_toBool = staticmethod(_pyossim.ossimString_const_toBool)
    def toUInt8(self): return _pyossim.ossimString_toUInt8(self)
    __swig_getmethods__["const_toUInt8"] = lambda x: _pyossim.ossimString_const_toUInt8
    if _newclass:const_toUInt8 = staticmethod(_pyossim.ossimString_const_toUInt8)
    def toInt(self): return _pyossim.ossimString_toInt(self)
    __swig_getmethods__["const_toInt"] = lambda x: _pyossim.ossimString_const_toInt
    if _newclass:const_toInt = staticmethod(_pyossim.ossimString_const_toInt)
    def toInt16(self): return _pyossim.ossimString_toInt16(self)
    __swig_getmethods__["const_toInt16"] = lambda x: _pyossim.ossimString_const_toInt16
    if _newclass:const_toInt16 = staticmethod(_pyossim.ossimString_const_toInt16)
    def toUInt16(self): return _pyossim.ossimString_toUInt16(self)
    __swig_getmethods__["const_toUInt16"] = lambda x: _pyossim.ossimString_const_toUInt16
    if _newclass:const_toUInt16 = staticmethod(_pyossim.ossimString_const_toUInt16)
    def toInt32(self): return _pyossim.ossimString_toInt32(self)
    __swig_getmethods__["const_toInt32"] = lambda x: _pyossim.ossimString_const_toInt32
    if _newclass:const_toInt32 = staticmethod(_pyossim.ossimString_const_toInt32)
    def toUInt32(self): return _pyossim.ossimString_toUInt32(self)
    __swig_getmethods__["const_toUInt32"] = lambda x: _pyossim.ossimString_const_toUInt32
    if _newclass:const_toUInt32 = staticmethod(_pyossim.ossimString_const_toUInt32)
    def toInt64(self): return _pyossim.ossimString_toInt64(self)
    __swig_getmethods__["const_toInt64"] = lambda x: _pyossim.ossimString_const_toInt64
    if _newclass:const_toInt64 = staticmethod(_pyossim.ossimString_const_toInt64)
    def toUInt64(self): return _pyossim.ossimString_toUInt64(self)
    __swig_getmethods__["const_toUInt64"] = lambda x: _pyossim.ossimString_const_toUInt64
    if _newclass:const_toUInt64 = staticmethod(_pyossim.ossimString_const_toUInt64)
    def toLong(self): return _pyossim.ossimString_toLong(self)
    __swig_getmethods__["const_toLong"] = lambda x: _pyossim.ossimString_const_toLong
    if _newclass:const_toLong = staticmethod(_pyossim.ossimString_const_toLong)
    def toULong(self): return _pyossim.ossimString_toULong(self)
    __swig_getmethods__["const_toULong"] = lambda x: _pyossim.ossimString_const_toULong
    if _newclass:const_toULong = staticmethod(_pyossim.ossimString_const_toULong)
    def toFloat32(self): return _pyossim.ossimString_toFloat32(self)
    __swig_getmethods__["const_toFloat32"] = lambda x: _pyossim.ossimString_const_toFloat32
    if _newclass:const_toFloat32 = staticmethod(_pyossim.ossimString_const_toFloat32)
    def toFloat64(self): return _pyossim.ossimString_toFloat64(self)
    __swig_getmethods__["const_toFloat64"] = lambda x: _pyossim.ossimString_const_toFloat64
    if _newclass:const_toFloat64 = staticmethod(_pyossim.ossimString_const_toFloat64)
    def toDouble(self): return _pyossim.ossimString_toDouble(self)
    __swig_getmethods__["const_toDouble"] = lambda x: _pyossim.ossimString_const_toDouble
    if _newclass:const_toDouble = staticmethod(_pyossim.ossimString_const_toDouble)
    __swig_getmethods__["toString"] = lambda x: _pyossim.ossimString_toString
    if _newclass:toString = staticmethod(_pyossim.ossimString_toString)
    __swig_getmethods__["stripLeading"] = lambda x: _pyossim.ossimString_stripLeading
    if _newclass:stripLeading = staticmethod(_pyossim.ossimString_stripLeading)
    def split(self, *args): return _pyossim.ossimString_split(self, *args)
    def join(self, *args): return _pyossim.ossimString_join(self, *args)
    def beforeRegExp(self, *args): return _pyossim.ossimString_beforeRegExp(self, *args)
    def fromRegExp(self, *args): return _pyossim.ossimString_fromRegExp(self, *args)
    def afterRegExp(self, *args): return _pyossim.ossimString_afterRegExp(self, *args)
    def match(self, *args): return _pyossim.ossimString_match(self, *args)
    def replaceAllThatMatch(self, *args): return _pyossim.ossimString_replaceAllThatMatch(self, *args)
    def replaceStrThatMatch(self, *args): return _pyossim.ossimString_replaceStrThatMatch(self, *args)
    def urlEncode(self): return _pyossim.ossimString_urlEncode(self)
    def getOssimId(self): return _pyossim.ossimString_getOssimId(self)
ossimString_swigregister = _pyossim.ossimString_swigregister
ossimString_swigregister(ossimString)

def getline(*args):
  return _pyossim.getline(*args)
getline = _pyossim.getline

def __add__(*args):
  return _pyossim.__add__(*args)
__add__ = _pyossim.__add__

def __eq__(*args):
  return _pyossim.__eq__(*args)
__eq__ = _pyossim.__eq__

def ossimString_upcase(*args):
  return _pyossim.ossimString_upcase(*args)
ossimString_upcase = _pyossim.ossimString_upcase

def ossimString_downcase(*args):
  return _pyossim.ossimString_downcase(*args)
ossimString_downcase = _pyossim.ossimString_downcase

def ossimString_const_toBool(*args):
  return _pyossim.ossimString_const_toBool(*args)
ossimString_const_toBool = _pyossim.ossimString_const_toBool

def ossimString_const_toUInt8(*args):
  return _pyossim.ossimString_const_toUInt8(*args)
ossimString_const_toUInt8 = _pyossim.ossimString_const_toUInt8

def ossimString_const_toInt(*args):
  return _pyossim.ossimString_const_toInt(*args)
ossimString_const_toInt = _pyossim.ossimString_const_toInt

def ossimString_const_toInt16(*args):
  return _pyossim.ossimString_const_toInt16(*args)
ossimString_const_toInt16 = _pyossim.ossimString_const_toInt16

def ossimString_const_toUInt16(*args):
  return _pyossim.ossimString_const_toUInt16(*args)
ossimString_const_toUInt16 = _pyossim.ossimString_const_toUInt16

def ossimString_const_toInt32(*args):
  return _pyossim.ossimString_const_toInt32(*args)
ossimString_const_toInt32 = _pyossim.ossimString_const_toInt32

def ossimString_const_toUInt32(*args):
  return _pyossim.ossimString_const_toUInt32(*args)
ossimString_const_toUInt32 = _pyossim.ossimString_const_toUInt32

def ossimString_const_toInt64(*args):
  return _pyossim.ossimString_const_toInt64(*args)
ossimString_const_toInt64 = _pyossim.ossimString_const_toInt64

def ossimString_const_toUInt64(*args):
  return _pyossim.ossimString_const_toUInt64(*args)
ossimString_const_toUInt64 = _pyossim.ossimString_const_toUInt64

def ossimString_const_toLong(*args):
  return _pyossim.ossimString_const_toLong(*args)
ossimString_const_toLong = _pyossim.ossimString_const_toLong

def ossimString_const_toULong(*args):
  return _pyossim.ossimString_const_toULong(*args)
ossimString_const_toULong = _pyossim.ossimString_const_toULong

def ossimString_const_toFloat32(*args):
  return _pyossim.ossimString_const_toFloat32(*args)
ossimString_const_toFloat32 = _pyossim.ossimString_const_toFloat32

def ossimString_const_toFloat64(*args):
  return _pyossim.ossimString_const_toFloat64(*args)
ossimString_const_toFloat64 = _pyossim.ossimString_const_toFloat64

def ossimString_const_toDouble(*args):
  return _pyossim.ossimString_const_toDouble(*args)
ossimString_const_toDouble = _pyossim.ossimString_const_toDouble

def ossimString_toString(*args):
  return _pyossim.ossimString_toString(*args)
ossimString_toString = _pyossim.ossimString_toString

def ossimString_stripLeading(*args):
  return _pyossim.ossimString_stripLeading(*args)
ossimString_stripLeading = _pyossim.ossimString_stripLeading

class ossimStringLtstr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStringLtstr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStringLtstr, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _pyossim.ossimStringLtstr___call__(self, *args)
    def __init__(self): 
        this = _pyossim.new_ossimStringLtstr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimStringLtstr
    __del__ = lambda self : None;
ossimStringLtstr_swigregister = _pyossim.ossimStringLtstr_swigregister
ossimStringLtstr_swigregister(ossimStringLtstr)

class ossimStringListProperty(ossimProperty):
    __swig_setmethods__ = {}
    for _s in [ossimProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStringListProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStringListProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimStringListProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossimStringListProperty_dup(self)
    def assign(self, *args): return _pyossim.ossimStringListProperty_assign(self, *args)
    def setValue(self, *args): return _pyossim.ossimStringListProperty_setValue(self, *args)
    def valueToString(self, *args): return _pyossim.ossimStringListProperty_valueToString(self, *args)
    def clearValueList(self): return _pyossim.ossimStringListProperty_clearValueList(self)
    def getValueAt(self, *args): return _pyossim.ossimStringListProperty_getValueAt(self, *args)
    def setValueAt(self, *args): return _pyossim.ossimStringListProperty_setValueAt(self, *args)
    def addValue(self, *args): return _pyossim.ossimStringListProperty_addValue(self, *args)
    def getNumberOfValues(self): return _pyossim.ossimStringListProperty_getNumberOfValues(self)
    def getNumberOfContraints(self): return _pyossim.ossimStringListProperty_getNumberOfContraints(self)
    def getConstraintAt(self, *args): return _pyossim.ossimStringListProperty_getConstraintAt(self, *args)
    def setConstraints(self, *args): return _pyossim.ossimStringListProperty_setConstraints(self, *args)
    def hasConstraints(self): return _pyossim.ossimStringListProperty_hasConstraints(self)
    def setUniqueFlag(self, *args): return _pyossim.ossimStringListProperty_setUniqueFlag(self, *args)
    def setOrderMattersFlag(self, *args): return _pyossim.ossimStringListProperty_setOrderMattersFlag(self, *args)
    def setNumberOfValuesBounds(self, *args): return _pyossim.ossimStringListProperty_setNumberOfValuesBounds(self, *args)
    def getNumberofValuesBounds(self, *args): return _pyossim.ossimStringListProperty_getNumberofValuesBounds(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimStringListProperty
    __del__ = lambda self : None;
ossimStringListProperty_swigregister = _pyossim.ossimStringListProperty_swigregister
ossimStringListProperty_swigregister(ossimStringListProperty)

class ossimStringProperty(ossimProperty):
    __swig_setmethods__ = {}
    for _s in [ossimProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStringProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStringProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimStringProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossimStringProperty_dup(self)
    def assign(self, *args): return _pyossim.ossimStringProperty_assign(self, *args)
    def setEditableFlag(self, *args): return _pyossim.ossimStringProperty_setEditableFlag(self, *args)
    def getEditableFlag(self): return _pyossim.ossimStringProperty_getEditableFlag(self)
    def isEditable(self): return _pyossim.ossimStringProperty_isEditable(self)
    def clearConstraints(self): return _pyossim.ossimStringProperty_clearConstraints(self)
    def setConstraints(self, *args): return _pyossim.ossimStringProperty_setConstraints(self, *args)
    def addConstraint(self, *args): return _pyossim.ossimStringProperty_addConstraint(self, *args)
    def getConstraints(self): return _pyossim.ossimStringProperty_getConstraints(self)
    def hasConstraints(self): return _pyossim.ossimStringProperty_hasConstraints(self)
    def setValue(self, *args): return _pyossim.ossimStringProperty_setValue(self, *args)
    def valueToString(self, *args): return _pyossim.ossimStringProperty_valueToString(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimStringProperty
    __del__ = lambda self : None;
ossimStringProperty_swigregister = _pyossim.ossimStringProperty_swigregister
ossimStringProperty_swigregister(ossimStringProperty)

class ossimFilename(ossimString):
    __swig_setmethods__ = {}
    for _s in [ossimString]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFilename, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimString]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFilename, name)
    __repr__ = _swig_repr
    OSSIM_READ_WRITE = _pyossim.ossimFilename_OSSIM_READ_WRITE
    OSSIM_READ = _pyossim.ossimFilename_OSSIM_READ
    OSSIM_WRITE = _pyossim.ossimFilename_OSSIM_WRITE
    OSSIM_EXE = _pyossim.ossimFilename_OSSIM_EXE
    OSSIM_EXIST = _pyossim.ossimFilename_OSSIM_EXIST
    def __init__(self, *args): 
        this = _pyossim.new_ossimFilename(*args)
        try: self.this.append(this)
        except: self.this = this
    def __cmp__(self, *args): return _pyossim.ossimFilename___cmp__(self, *args)
    def convertBackToForwardSlashes(self): return _pyossim.ossimFilename_convertBackToForwardSlashes(self)
    def convertForwardToBackSlashes(self): return _pyossim.ossimFilename_convertForwardToBackSlashes(self)
    def setTimes(self, *args): return _pyossim.ossimFilename_setTimes(self, *args)
    def getTimes(self, *args): return _pyossim.ossimFilename_getTimes(self, *args)
    def touch(self): return _pyossim.ossimFilename_touch(self)
    def expand(self): return _pyossim.ossimFilename_expand(self)
    def exists(self): return _pyossim.ossimFilename_exists(self)
    def isFile(self): return _pyossim.ossimFilename_isFile(self)
    def isDir(self): return _pyossim.ossimFilename_isDir(self)
    def isReadable(self): return _pyossim.ossimFilename_isReadable(self)
    def isWriteable(self): return _pyossim.ossimFilename_isWriteable(self)
    def isExecutable(self): return _pyossim.ossimFilename_isExecutable(self)
    def fileSize(self): return _pyossim.ossimFilename_fileSize(self)
    def ext(self): return _pyossim.ossimFilename_ext(self)
    def path(self): return _pyossim.ossimFilename_path(self)
    def drive(self): return _pyossim.ossimFilename_drive(self)
    def file(self): return _pyossim.ossimFilename_file(self)
    def fileNoExtension(self): return _pyossim.ossimFilename_fileNoExtension(self)
    def noExtension(self): return _pyossim.ossimFilename_noExtension(self)
    def setExtension(self, *args): return _pyossim.ossimFilename_setExtension(self, *args)
    def setDrive(self, *args): return _pyossim.ossimFilename_setDrive(self, *args)
    def setPath(self, *args): return _pyossim.ossimFilename_setPath(self, *args)
    def setFile(self, *args): return _pyossim.ossimFilename_setFile(self, *args)
    def split(self, *args): return _pyossim.ossimFilename_split(self, *args)
    def merge(self, *args): return _pyossim.ossimFilename_merge(self, *args)
    def dirCat(self, *args): return _pyossim.ossimFilename_dirCat(self, *args)
    def createDirectory(self, recurseFlag = True, perm = 0775): return _pyossim.ossimFilename_createDirectory(self, recurseFlag, perm)
    __swig_getmethods__["remove"] = lambda x: _pyossim.ossimFilename_remove
    if _newclass:remove = staticmethod(_pyossim.ossimFilename_remove)
    __swig_getmethods__["wildcardRemove"] = lambda x: _pyossim.ossimFilename_wildcardRemove
    if _newclass:wildcardRemove = staticmethod(_pyossim.ossimFilename_wildcardRemove)
    def rename(self, *args): return _pyossim.ossimFilename_rename(self, *args)
    def const_remove(self): return _pyossim.ossimFilename_const_remove(self)
    def const_wildCardRemove(self): return _pyossim.ossimFilename_const_wildCardRemove(self)
    def copyFileTo(self, *args): return _pyossim.ossimFilename_copyFileTo(self, *args)
    def isRelative(self): return _pyossim.ossimFilename_isRelative(self)
    def needsExpansion(self): return _pyossim.ossimFilename_needsExpansion(self)
    def getPathSeparator(self): return _pyossim.ossimFilename_getPathSeparator(self)
    __swig_destroy__ = _pyossim.delete_ossimFilename
    __del__ = lambda self : None;
ossimFilename_swigregister = _pyossim.ossimFilename_swigregister
ossimFilename_swigregister(ossimFilename)
ossimFilename.NIL = _pyossim.cvar.ossimFilename_NIL

def ossimFilename_remove(*args):
  return _pyossim.ossimFilename_remove(*args)
ossimFilename_remove = _pyossim.ossimFilename_remove

def ossimFilename_wildcardRemove(*args):
  return _pyossim.ossimFilename_wildcardRemove(*args)
ossimFilename_wildcardRemove = _pyossim.ossimFilename_wildcardRemove

class ossimFilenameProperty(ossimProperty):
    __swig_setmethods__ = {}
    for _s in [ossimProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFilenameProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFilenameProperty, name)
    __repr__ = _swig_repr
    ossimFilenamePropertyIoType_NOT_SPECIFIED = _pyossim.ossimFilenameProperty_ossimFilenamePropertyIoType_NOT_SPECIFIED
    ossimFilenamePropertyIoType_INPUT = _pyossim.ossimFilenameProperty_ossimFilenamePropertyIoType_INPUT
    ossimFilenamePropertyIoType_OUTPUT = _pyossim.ossimFilenameProperty_ossimFilenamePropertyIoType_OUTPUT
    def __init__(self, *args): 
        this = _pyossim.new_ossimFilenameProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimFilenameProperty
    __del__ = lambda self : None;
    def dup(self): return _pyossim.ossimFilenameProperty_dup(self)
    def valueToString(self, *args): return _pyossim.ossimFilenameProperty_valueToString(self, *args)
    def setValue(self, *args): return _pyossim.ossimFilenameProperty_setValue(self, *args)
    def __set__(self, *args): return _pyossim.ossimFilenameProperty___set__(self, *args)
    def assign(self, *args): return _pyossim.ossimFilenameProperty_assign(self, *args)
    def clearFilterList(self): return _pyossim.ossimFilenameProperty_clearFilterList(self)
    def getNumberOfFilters(self): return _pyossim.ossimFilenameProperty_getNumberOfFilters(self)
    def setFilter(self, *args): return _pyossim.ossimFilenameProperty_setFilter(self, *args)
    def getFilter(self, *args): return _pyossim.ossimFilenameProperty_getFilter(self, *args)
    def getFilterListAsString(self, *args): return _pyossim.ossimFilenameProperty_getFilterListAsString(self, *args)
    def getFilterList(self): return _pyossim.ossimFilenameProperty_getFilterList(self)
    def addFilter(self, *args): return _pyossim.ossimFilenameProperty_addFilter(self, *args)
    def setIoType(self, *args): return _pyossim.ossimFilenameProperty_setIoType(self, *args)
    def getIoType(self): return _pyossim.ossimFilenameProperty_getIoType(self)
    def isIoTypeInput(self): return _pyossim.ossimFilenameProperty_isIoTypeInput(self)
    def isIoTypeOutput(self): return _pyossim.ossimFilenameProperty_isIoTypeOutput(self)
ossimFilenameProperty_swigregister = _pyossim.ossimFilenameProperty_swigregister
ossimFilenameProperty_swigregister(ossimFilenameProperty)

class ossimFontInformation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFontInformation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFontInformation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimFontInformation(*args)
        try: self.this.append(this)
        except: self.this = this
    def isFixed(self): return _pyossim.ossimFontInformation_isFixed(self)
    def saveState(self, *args): return _pyossim.ossimFontInformation_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimFontInformation_loadState(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimFontInformation___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimFontInformation___ne__(self, *args)
    def __set__(self, *args): return _pyossim.ossimFontInformation___set__(self, *args)
    __swig_setmethods__["FAMILY_NAME_KW"] = _pyossim.ossimFontInformation_FAMILY_NAME_KW_set
    __swig_getmethods__["FAMILY_NAME_KW"] = _pyossim.ossimFontInformation_FAMILY_NAME_KW_get
    if _newclass:FAMILY_NAME_KW = _swig_property(_pyossim.ossimFontInformation_FAMILY_NAME_KW_get, _pyossim.ossimFontInformation_FAMILY_NAME_KW_set)
    __swig_setmethods__["STYLE_NAME_KW"] = _pyossim.ossimFontInformation_STYLE_NAME_KW_set
    __swig_getmethods__["STYLE_NAME_KW"] = _pyossim.ossimFontInformation_STYLE_NAME_KW_get
    if _newclass:STYLE_NAME_KW = _swig_property(_pyossim.ossimFontInformation_STYLE_NAME_KW_get, _pyossim.ossimFontInformation_STYLE_NAME_KW_set)
    __swig_setmethods__["POINT_SIZE_KW"] = _pyossim.ossimFontInformation_POINT_SIZE_KW_set
    __swig_getmethods__["POINT_SIZE_KW"] = _pyossim.ossimFontInformation_POINT_SIZE_KW_get
    if _newclass:POINT_SIZE_KW = _swig_property(_pyossim.ossimFontInformation_POINT_SIZE_KW_get, _pyossim.ossimFontInformation_POINT_SIZE_KW_set)
    __swig_setmethods__["POINT_SIZE_X_KW"] = _pyossim.ossimFontInformation_POINT_SIZE_X_KW_set
    __swig_getmethods__["POINT_SIZE_X_KW"] = _pyossim.ossimFontInformation_POINT_SIZE_X_KW_get
    if _newclass:POINT_SIZE_X_KW = _swig_property(_pyossim.ossimFontInformation_POINT_SIZE_X_KW_get, _pyossim.ossimFontInformation_POINT_SIZE_X_KW_set)
    __swig_setmethods__["POINT_SIZE_Y_KW"] = _pyossim.ossimFontInformation_POINT_SIZE_Y_KW_set
    __swig_getmethods__["POINT_SIZE_Y_KW"] = _pyossim.ossimFontInformation_POINT_SIZE_Y_KW_get
    if _newclass:POINT_SIZE_Y_KW = _swig_property(_pyossim.ossimFontInformation_POINT_SIZE_Y_KW_get, _pyossim.ossimFontInformation_POINT_SIZE_Y_KW_set)
    __swig_setmethods__["FIXED_FLAG_KW"] = _pyossim.ossimFontInformation_FIXED_FLAG_KW_set
    __swig_getmethods__["FIXED_FLAG_KW"] = _pyossim.ossimFontInformation_FIXED_FLAG_KW_get
    if _newclass:FIXED_FLAG_KW = _swig_property(_pyossim.ossimFontInformation_FIXED_FLAG_KW_get, _pyossim.ossimFontInformation_FIXED_FLAG_KW_set)
    __swig_setmethods__["SHEAR_KW"] = _pyossim.ossimFontInformation_SHEAR_KW_set
    __swig_getmethods__["SHEAR_KW"] = _pyossim.ossimFontInformation_SHEAR_KW_get
    if _newclass:SHEAR_KW = _swig_property(_pyossim.ossimFontInformation_SHEAR_KW_get, _pyossim.ossimFontInformation_SHEAR_KW_set)
    __swig_setmethods__["SHEAR_X_KW"] = _pyossim.ossimFontInformation_SHEAR_X_KW_set
    __swig_getmethods__["SHEAR_X_KW"] = _pyossim.ossimFontInformation_SHEAR_X_KW_get
    if _newclass:SHEAR_X_KW = _swig_property(_pyossim.ossimFontInformation_SHEAR_X_KW_get, _pyossim.ossimFontInformation_SHEAR_X_KW_set)
    __swig_setmethods__["SHEAR_Y_KW"] = _pyossim.ossimFontInformation_SHEAR_Y_KW_set
    __swig_getmethods__["SHEAR_Y_KW"] = _pyossim.ossimFontInformation_SHEAR_Y_KW_get
    if _newclass:SHEAR_Y_KW = _swig_property(_pyossim.ossimFontInformation_SHEAR_Y_KW_get, _pyossim.ossimFontInformation_SHEAR_Y_KW_set)
    __swig_setmethods__["SCALE_KW"] = _pyossim.ossimFontInformation_SCALE_KW_set
    __swig_getmethods__["SCALE_KW"] = _pyossim.ossimFontInformation_SCALE_KW_get
    if _newclass:SCALE_KW = _swig_property(_pyossim.ossimFontInformation_SCALE_KW_get, _pyossim.ossimFontInformation_SCALE_KW_set)
    __swig_setmethods__["SCALE_X_KW"] = _pyossim.ossimFontInformation_SCALE_X_KW_set
    __swig_getmethods__["SCALE_X_KW"] = _pyossim.ossimFontInformation_SCALE_X_KW_get
    if _newclass:SCALE_X_KW = _swig_property(_pyossim.ossimFontInformation_SCALE_X_KW_get, _pyossim.ossimFontInformation_SCALE_X_KW_set)
    __swig_setmethods__["SCALE_Y_KW"] = _pyossim.ossimFontInformation_SCALE_Y_KW_set
    __swig_getmethods__["SCALE_Y_KW"] = _pyossim.ossimFontInformation_SCALE_Y_KW_get
    if _newclass:SCALE_Y_KW = _swig_property(_pyossim.ossimFontInformation_SCALE_Y_KW_get, _pyossim.ossimFontInformation_SCALE_Y_KW_set)
    __swig_setmethods__["ROTATION_KW"] = _pyossim.ossimFontInformation_ROTATION_KW_set
    __swig_getmethods__["ROTATION_KW"] = _pyossim.ossimFontInformation_ROTATION_KW_get
    if _newclass:ROTATION_KW = _swig_property(_pyossim.ossimFontInformation_ROTATION_KW_get, _pyossim.ossimFontInformation_ROTATION_KW_set)
    __swig_setmethods__["theFamilyName"] = _pyossim.ossimFontInformation_theFamilyName_set
    __swig_getmethods__["theFamilyName"] = _pyossim.ossimFontInformation_theFamilyName_get
    if _newclass:theFamilyName = _swig_property(_pyossim.ossimFontInformation_theFamilyName_get, _pyossim.ossimFontInformation_theFamilyName_set)
    __swig_setmethods__["theStyleName"] = _pyossim.ossimFontInformation_theStyleName_set
    __swig_getmethods__["theStyleName"] = _pyossim.ossimFontInformation_theStyleName_get
    if _newclass:theStyleName = _swig_property(_pyossim.ossimFontInformation_theStyleName_get, _pyossim.ossimFontInformation_theStyleName_set)
    __swig_setmethods__["thePointSize"] = _pyossim.ossimFontInformation_thePointSize_set
    __swig_getmethods__["thePointSize"] = _pyossim.ossimFontInformation_thePointSize_get
    if _newclass:thePointSize = _swig_property(_pyossim.ossimFontInformation_thePointSize_get, _pyossim.ossimFontInformation_thePointSize_set)
    __swig_setmethods__["theFixedFlag"] = _pyossim.ossimFontInformation_theFixedFlag_set
    __swig_getmethods__["theFixedFlag"] = _pyossim.ossimFontInformation_theFixedFlag_get
    if _newclass:theFixedFlag = _swig_property(_pyossim.ossimFontInformation_theFixedFlag_get, _pyossim.ossimFontInformation_theFixedFlag_set)
    __swig_setmethods__["theScale"] = _pyossim.ossimFontInformation_theScale_set
    __swig_getmethods__["theScale"] = _pyossim.ossimFontInformation_theScale_get
    if _newclass:theScale = _swig_property(_pyossim.ossimFontInformation_theScale_get, _pyossim.ossimFontInformation_theScale_set)
    __swig_setmethods__["theRotation"] = _pyossim.ossimFontInformation_theRotation_set
    __swig_getmethods__["theRotation"] = _pyossim.ossimFontInformation_theRotation_get
    if _newclass:theRotation = _swig_property(_pyossim.ossimFontInformation_theRotation_get, _pyossim.ossimFontInformation_theRotation_set)
    __swig_setmethods__["theShear"] = _pyossim.ossimFontInformation_theShear_set
    __swig_getmethods__["theShear"] = _pyossim.ossimFontInformation_theShear_get
    if _newclass:theShear = _swig_property(_pyossim.ossimFontInformation_theShear_get, _pyossim.ossimFontInformation_theShear_set)
    __swig_destroy__ = _pyossim.delete_ossimFontInformation
    __del__ = lambda self : None;
ossimFontInformation_swigregister = _pyossim.ossimFontInformation_swigregister
ossimFontInformation_swigregister(ossimFontInformation)

class ossimFontProperty(ossimProperty):
    __swig_setmethods__ = {}
    for _s in [ossimProperty]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFontProperty, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimProperty]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFontProperty, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimFontProperty(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimFontProperty
    __del__ = lambda self : None;
    def dup(self): return _pyossim.ossimFontProperty_dup(self)
    def assign(self, *args): return _pyossim.ossimFontProperty_assign(self, *args)
    def setValue(self, *args): return _pyossim.ossimFontProperty_setValue(self, *args)
    def valueToString(self, *args): return _pyossim.ossimFontProperty_valueToString(self, *args)
    def setFontInformation(self, *args): return _pyossim.ossimFontProperty_setFontInformation(self, *args)
    def getFontInformation(self): return _pyossim.ossimFontProperty_getFontInformation(self)
ossimFontProperty_swigregister = _pyossim.ossimFontProperty_swigregister
ossimFontProperty_swigregister(ossimFontProperty)

GEOCENT_NO_ERROR = _pyossim.GEOCENT_NO_ERROR
GEOCENT_LAT_ERROR = _pyossim.GEOCENT_LAT_ERROR
GEOCENT_LON_ERROR = _pyossim.GEOCENT_LON_ERROR
GEOCENT_A_ERROR = _pyossim.GEOCENT_A_ERROR
GEOCENT_INV_F_ERROR = _pyossim.GEOCENT_INV_F_ERROR

def Set_Geocentric_Parameters(*args):
  return _pyossim.Set_Geocentric_Parameters(*args)
Set_Geocentric_Parameters = _pyossim.Set_Geocentric_Parameters

def Get_Geocentric_Parameters(*args):
  return _pyossim.Get_Geocentric_Parameters(*args)
Get_Geocentric_Parameters = _pyossim.Get_Geocentric_Parameters

def Convert_Geodetic_To_Geocentric(*args):
  return _pyossim.Convert_Geodetic_To_Geocentric(*args)
Convert_Geodetic_To_Geocentric = _pyossim.Convert_Geodetic_To_Geocentric

def Convert_Geocentric_To_Geodetic(*args):
  return _pyossim.Convert_Geocentric_To_Geodetic(*args)
Convert_Geocentric_To_Geodetic = _pyossim.Convert_Geocentric_To_Geodetic
class ossimGeoid(ossimObject,ossimErrorStatusInterface):
    __swig_setmethods__ = {}
    for _s in [ossimObject,ossimErrorStatusInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoid, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject,ossimErrorStatusInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def open(self, *args): return _pyossim.ossimGeoid_open(self, *args)
    def ossimGeoid_open(self, *args): return _pyossim.ossimGeoid_ossimGeoid_open(self, *args)
    def offsetFromEllipsoid(self, *args): return _pyossim.ossimGeoid_offsetFromEllipsoid(self, *args)
ossimGeoid_swigregister = _pyossim.ossimGeoid_swigregister
ossimGeoid_swigregister(ossimGeoid)

class ossimIdentityGeoid(ossimGeoid):
    __swig_setmethods__ = {}
    for _s in [ossimGeoid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimIdentityGeoid, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimGeoid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimIdentityGeoid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getShortName(self): return _pyossim.ossimIdentityGeoid_getShortName(self)
    def open(self, *args): return _pyossim.ossimIdentityGeoid_open(self, *args)
    def offsetFromEllipsoid(self, *args): return _pyossim.ossimIdentityGeoid_offsetFromEllipsoid(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimIdentityGeoid
    __del__ = lambda self : None;
ossimIdentityGeoid_swigregister = _pyossim.ossimIdentityGeoid_swigregister
ossimIdentityGeoid_swigregister(ossimIdentityGeoid)

GEOID_NO_ERROR = _pyossim.GEOID_NO_ERROR
GEOID_FILE_OPEN_ERROR = _pyossim.GEOID_FILE_OPEN_ERROR
GEOID_INITIALIZE_ERROR = _pyossim.GEOID_INITIALIZE_ERROR
GEOID_NOT_INITIALIZED_ERROR = _pyossim.GEOID_NOT_INITIALIZED_ERROR
GEOID_LAT_ERROR = _pyossim.GEOID_LAT_ERROR
GEOID_LON_ERROR = _pyossim.GEOID_LON_ERROR
class ossimGeoidEgm96(ossimGeoid):
    __swig_setmethods__ = {}
    for _s in [ossimGeoid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoidEgm96, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimGeoid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoidEgm96, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeoidEgm96(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimGeoidEgm96
    __del__ = lambda self : None;
    def open(self, *args): return _pyossim.ossimGeoidEgm96_open(self, *args)
    def ossimGeoid_open(self, *args): return _pyossim.ossimGeoidEgm96_ossimGeoid_open(self, *args)
    def getShortName(self): return _pyossim.ossimGeoidEgm96_getShortName(self)
    def offsetFromEllipsoid(self, *args): return _pyossim.ossimGeoidEgm96_offsetFromEllipsoid(self, *args)
    def geoidToEllipsoidHeight(self, *args): return _pyossim.ossimGeoidEgm96_geoidToEllipsoidHeight(self, *args)
    def ellipsoidToGeoidHeight(self, *args): return _pyossim.ossimGeoidEgm96_ellipsoidToGeoidHeight(self, *args)
ossimGeoidEgm96_swigregister = _pyossim.ossimGeoidEgm96_swigregister
ossimGeoidEgm96_swigregister(ossimGeoidEgm96)

class ossimGeoidManager(ossimGeoid):
    __swig_setmethods__ = {}
    for _s in [ossimGeoid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoidManager, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimGeoid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoidManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimGeoidManager
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimGeoidManager_instance
    if _newclass:instance = staticmethod(_pyossim.ossimGeoidManager_instance)
    def open(self, *args): return _pyossim.ossimGeoidManager_open(self, *args)
    def offsetFromEllipsoid(self, *args): return _pyossim.ossimGeoidManager_offsetFromEllipsoid(self, *args)
    def saveState(self, *args): return _pyossim.ossimGeoidManager_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimGeoidManager_loadState(self, *args)
    def addGeoid(self, *args): return _pyossim.ossimGeoidManager_addGeoid(self, *args)
    def findGeoidByShortName(self, *args): return _pyossim.ossimGeoidManager_findGeoidByShortName(self, *args)
ossimGeoidManager_swigregister = _pyossim.ossimGeoidManager_swigregister
ossimGeoidManager_swigregister(ossimGeoidManager)

def ossimGeoidManager_instance():
  return _pyossim.ossimGeoidManager_instance()
ossimGeoidManager_instance = _pyossim.ossimGeoidManager_instance

class ossimGeoidNgsHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoidNgsHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoidNgsHeader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeoidNgsHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    def initialize(self, *args): return _pyossim.ossimGeoidNgsHeader_initialize(self, *args)
    def southernMostLat(self): return _pyossim.ossimGeoidNgsHeader_southernMostLat(self)
    def westernMostLon(self): return _pyossim.ossimGeoidNgsHeader_westernMostLon(self)
    def latDelta(self): return _pyossim.ossimGeoidNgsHeader_latDelta(self)
    def lonDelta(self): return _pyossim.ossimGeoidNgsHeader_lonDelta(self)
    def rows(self): return _pyossim.ossimGeoidNgsHeader_rows(self)
    def cols(self): return _pyossim.ossimGeoidNgsHeader_cols(self)
    def dataType(self): return _pyossim.ossimGeoidNgsHeader_dataType(self)
    def pointWithin(self, *args): return _pyossim.ossimGeoidNgsHeader_pointWithin(self, *args)
    def filename(self): return _pyossim.ossimGeoidNgsHeader_filename(self)
    def headerSize(self): return _pyossim.ossimGeoidNgsHeader_headerSize(self)
    def dataTypeSize(self): return _pyossim.ossimGeoidNgsHeader_dataTypeSize(self)
    def getHeightDelta(self, *args): return _pyossim.ossimGeoidNgsHeader_getHeightDelta(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimGeoidNgsHeader
    __del__ = lambda self : None;
ossimGeoidNgsHeader_swigregister = _pyossim.ossimGeoidNgsHeader_swigregister
ossimGeoidNgsHeader_swigregister(ossimGeoidNgsHeader)

class ossimGeoidNgs(ossimGeoid):
    __swig_setmethods__ = {}
    for _s in [ossimGeoid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoidNgs, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimGeoid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoidNgs, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeoidNgs(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimGeoidNgs
    __del__ = lambda self : None;
    def getShortName(self): return _pyossim.ossimGeoidNgs_getShortName(self)
    def open(self, *args): return _pyossim.ossimGeoidNgs_open(self, *args)
    def ossimGeoid_open(self, *args): return _pyossim.ossimGeoidNgs_ossimGeoid_open(self, *args)
    def addFile(self, *args): return _pyossim.ossimGeoidNgs_addFile(self, *args)
    def offsetFromEllipsoid(self, *args): return _pyossim.ossimGeoidNgs_offsetFromEllipsoid(self, *args)
    def geoidToEllipsoidHeight(self, *args): return _pyossim.ossimGeoidNgs_geoidToEllipsoidHeight(self, *args)
    def ellipsoidToGeoidHeight(self, *args): return _pyossim.ossimGeoidNgs_ellipsoidToGeoidHeight(self, *args)
ossimGeoidNgs_swigregister = _pyossim.ossimGeoidNgs_swigregister
ossimGeoidNgs_swigregister(ossimGeoidNgs)

class ossimGeoPolygon(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoPolygon, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoPolygon, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeoPolygon(*args)
        try: self.this.append(this)
        except: self.this = this
    def addPoint(self, *args): return _pyossim.ossimGeoPolygon_addPoint(self, *args)
    def addAttribute(self, *args): return _pyossim.ossimGeoPolygon_addAttribute(self, *args)
    def addHole(self, *args): return _pyossim.ossimGeoPolygon_addHole(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimGeoPolygon___getitem__(self, *args)
    def const_getitem(self, *args): return _pyossim.ossimGeoPolygon_const_getitem(self, *args)
    def getVertexList(self): return _pyossim.ossimGeoPolygon_getVertexList(self)
    def getAttributeList(self): return _pyossim.ossimGeoPolygon_getAttributeList(self)
    def getHoleList(self): return _pyossim.ossimGeoPolygon_getHoleList(self)
    def clear(self): return _pyossim.ossimGeoPolygon_clear(self)
    def size(self): return _pyossim.ossimGeoPolygon_size(self)
    def resize(self, *args): return _pyossim.ossimGeoPolygon_resize(self, *args)
    def __set__(self, *args): return _pyossim.ossimGeoPolygon___set__(self, *args)
    def stretchOut(self, *args): return _pyossim.ossimGeoPolygon_stretchOut(self, *args)
    def area(self): return _pyossim.ossimGeoPolygon_area(self)
    def computeCentroid(self): return _pyossim.ossimGeoPolygon_computeCentroid(self)
    def vertex(self, *args): return _pyossim.ossimGeoPolygon_vertex(self, *args)
    def nextVertex(self, *args): return _pyossim.ossimGeoPolygon_nextVertex(self, *args)
    def hasNans(self): return _pyossim.ossimGeoPolygon_hasNans(self)
    def reverseOrder(self): return _pyossim.ossimGeoPolygon_reverseOrder(self)
    def saveState(self, *args): return _pyossim.ossimGeoPolygon_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimGeoPolygon_loadState(self, *args)
    def checkOrdering(self): return _pyossim.ossimGeoPolygon_checkOrdering(self)
    def getOrdering(self): return _pyossim.ossimGeoPolygon_getOrdering(self)
    def setOrdering(self, *args): return _pyossim.ossimGeoPolygon_setOrdering(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimGeoPolygon
    __del__ = lambda self : None;
ossimGeoPolygon_swigregister = _pyossim.ossimGeoPolygon_swigregister
ossimGeoPolygon_swigregister(ossimGeoPolygon)

class ossimGeoref(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoref, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeoref(*args)
        try: self.this.append(this)
        except: self.this = this
    def toString(self, *args): return _pyossim.ossimGeoref_toString(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimGeoref
    __del__ = lambda self : None;
ossimGeoref_swigregister = _pyossim.ossimGeoref_swigregister
ossimGeoref_swigregister(ossimGeoref)

class ossimLookUpTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLookUpTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLookUpTable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    NOT_FOUND = _pyossim.ossimLookUpTable_NOT_FOUND
    __swig_destroy__ = _pyossim.delete_ossimLookUpTable
    __del__ = lambda self : None;
    def getTableIndexString(self, *args): return _pyossim.ossimLookUpTable_getTableIndexString(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimLookUpTable___getitem__(self, *args)
    def getEntryString(self, *args): return _pyossim.ossimLookUpTable_getEntryString(self, *args)
    def getEntryNumber(self, *args): return _pyossim.ossimLookUpTable_getEntryNumber(self, *args)
    def getKeyword(self): return _pyossim.ossimLookUpTable_getKeyword(self)
    def getTableSize(self): return _pyossim.ossimLookUpTable_getTableSize(self)
    def dumpValues(self, *args): return _pyossim.ossimLookUpTable_dumpValues(self, *args)
ossimLookUpTable_swigregister = _pyossim.ossimLookUpTable_swigregister
ossimLookUpTable_swigregister(ossimLookUpTable)

class ossimGeoTiffCoordTransformsLut(ossimLookUpTable):
    __swig_setmethods__ = {}
    for _s in [ossimLookUpTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoTiffCoordTransformsLut, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimLookUpTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoTiffCoordTransformsLut, name)
    __repr__ = _swig_repr
    CT_TransverseMercator = _pyossim.ossimGeoTiffCoordTransformsLut_CT_TransverseMercator
    CT_TransvMercator_Modified_Alaska = _pyossim.ossimGeoTiffCoordTransformsLut_CT_TransvMercator_Modified_Alaska
    CT_ObliqueMercator = _pyossim.ossimGeoTiffCoordTransformsLut_CT_ObliqueMercator
    CT_ObliqueMercator_Laborde = _pyossim.ossimGeoTiffCoordTransformsLut_CT_ObliqueMercator_Laborde
    CT_ObliqueMercator_Rosenmund = _pyossim.ossimGeoTiffCoordTransformsLut_CT_ObliqueMercator_Rosenmund
    CT_ObliqueMercator_Spherical = _pyossim.ossimGeoTiffCoordTransformsLut_CT_ObliqueMercator_Spherical
    CT_Mercator = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Mercator
    CT_LambertConfConic_2SP = _pyossim.ossimGeoTiffCoordTransformsLut_CT_LambertConfConic_2SP
    CT_LambertConfConic_Helmert = _pyossim.ossimGeoTiffCoordTransformsLut_CT_LambertConfConic_Helmert
    CT_LambertAzimEqualArea = _pyossim.ossimGeoTiffCoordTransformsLut_CT_LambertAzimEqualArea
    CT_AlbersEqualArea = _pyossim.ossimGeoTiffCoordTransformsLut_CT_AlbersEqualArea
    CT_AzimuthalEquidistant = _pyossim.ossimGeoTiffCoordTransformsLut_CT_AzimuthalEquidistant
    CT_EquidistantConic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_EquidistantConic
    CT_Stereographic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Stereographic
    CT_PolarStereographic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_PolarStereographic
    CT_ObliqueStereographic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_ObliqueStereographic
    CT_Equirectangular = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Equirectangular
    CT_CassiniSoldner = _pyossim.ossimGeoTiffCoordTransformsLut_CT_CassiniSoldner
    CT_Gnomonic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Gnomonic
    CT_MillerCylindrical = _pyossim.ossimGeoTiffCoordTransformsLut_CT_MillerCylindrical
    CT_Orthographic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Orthographic
    CT_Polyconic = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Polyconic
    CT_Robinson = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Robinson
    CT_Sinusoidal = _pyossim.ossimGeoTiffCoordTransformsLut_CT_Sinusoidal
    CT_VanDerGrinten = _pyossim.ossimGeoTiffCoordTransformsLut_CT_VanDerGrinten
    CT_NewZealandMapGrid = _pyossim.ossimGeoTiffCoordTransformsLut_CT_NewZealandMapGrid
    CT_TransvMercator_SouthOriented = _pyossim.ossimGeoTiffCoordTransformsLut_CT_TransvMercator_SouthOriented
    def __init__(self): 
        this = _pyossim.new_ossimGeoTiffCoordTransformsLut()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimGeoTiffCoordTransformsLut
    __del__ = lambda self : None;
    def getKeyword(self): return _pyossim.ossimGeoTiffCoordTransformsLut_getKeyword(self)
ossimGeoTiffCoordTransformsLut_swigregister = _pyossim.ossimGeoTiffCoordTransformsLut_swigregister
ossimGeoTiffCoordTransformsLut_swigregister(ossimGeoTiffCoordTransformsLut)

class ossimGeoTiffDatumLut(ossimLookUpTable):
    __swig_setmethods__ = {}
    for _s in [ossimLookUpTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoTiffDatumLut, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimLookUpTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoTiffDatumLut, name)
    __repr__ = _swig_repr
    GCS_Adindan = _pyossim.ossimGeoTiffDatumLut_GCS_Adindan
    GCS_Arc_1950 = _pyossim.ossimGeoTiffDatumLut_GCS_Arc_1950
    GCS_Arc_1960 = _pyossim.ossimGeoTiffDatumLut_GCS_Arc_1960
    GCS_ED50 = _pyossim.ossimGeoTiffDatumLut_GCS_ED50
    GCS_NAD27 = _pyossim.ossimGeoTiffDatumLut_GCS_NAD27
    GCS_NAD83 = _pyossim.ossimGeoTiffDatumLut_GCS_NAD83
    GCS_OSGB_1936 = _pyossim.ossimGeoTiffDatumLut_GCS_OSGB_1936
    GCS_WGS_72 = _pyossim.ossimGeoTiffDatumLut_GCS_WGS_72
    GCS_WGS_84 = _pyossim.ossimGeoTiffDatumLut_GCS_WGS_84
    GCS_Tokyo = _pyossim.ossimGeoTiffDatumLut_GCS_Tokyo
    GCS_NAD83_HARN = _pyossim.ossimGeoTiffDatumLut_GCS_NAD83_HARN
    GCS_Clark_1866 = _pyossim.ossimGeoTiffDatumLut_GCS_Clark_1866
    DatumE_WGS84 = _pyossim.ossimGeoTiffDatumLut_DatumE_WGS84
    Datum_Adindan = _pyossim.ossimGeoTiffDatumLut_Datum_Adindan
    Datum_Arc_1950 = _pyossim.ossimGeoTiffDatumLut_Datum_Arc_1950
    Datum_Arc_1960 = _pyossim.ossimGeoTiffDatumLut_Datum_Arc_1960
    Datum_European_Datum_1950 = _pyossim.ossimGeoTiffDatumLut_Datum_European_Datum_1950
    Datum_North_American_Datum_1927 = _pyossim.ossimGeoTiffDatumLut_Datum_North_American_Datum_1927
    Datum_North_American_Datum_1983 = _pyossim.ossimGeoTiffDatumLut_Datum_North_American_Datum_1983
    Datum_OSGB_1936 = _pyossim.ossimGeoTiffDatumLut_Datum_OSGB_1936
    Datum_Tokyo = _pyossim.ossimGeoTiffDatumLut_Datum_Tokyo
    Datum_WGS72 = _pyossim.ossimGeoTiffDatumLut_Datum_WGS72
    Datum_WGS84 = _pyossim.ossimGeoTiffDatumLut_Datum_WGS84
    Datum_NAD83_HARN = _pyossim.ossimGeoTiffDatumLut_Datum_NAD83_HARN
    def __init__(self): 
        this = _pyossim.new_ossimGeoTiffDatumLut()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimGeoTiffDatumLut
    __del__ = lambda self : None;
    def getKeyword(self): return _pyossim.ossimGeoTiffDatumLut_getKeyword(self)
ossimGeoTiffDatumLut_swigregister = _pyossim.ossimGeoTiffDatumLut_swigregister
ossimGeoTiffDatumLut_swigregister(ossimGeoTiffDatumLut)

ossimGpt_HEADER = _pyossim.ossimGpt_HEADER
class ossimGpt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGpt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimGpt(*args)
        try: self.this.append(this)
        except: self.this = this
    def latr(self, *args): return _pyossim.ossimGpt_latr(self, *args)
    def lonr(self, *args): return _pyossim.ossimGpt_lonr(self, *args)
    def latd(self, *args): return _pyossim.ossimGpt_latd(self, *args)
    def lond(self, *args): return _pyossim.ossimGpt_lond(self, *args)
    def height(self, *args): return _pyossim.ossimGpt_height(self, *args)
    def heightMSL(self, *args): return _pyossim.ossimGpt_heightMSL(self, *args)
    def makeNan(self): return _pyossim.ossimGpt_makeNan(self)
    def isNan(self): return _pyossim.ossimGpt_isNan(self)
    def hasNans(self): return _pyossim.ossimGpt_hasNans(self)
    def isLatNan(self): return _pyossim.ossimGpt_isLatNan(self)
    def isLonNan(self): return _pyossim.ossimGpt_isLonNan(self)
    def isHgtNan(self): return _pyossim.ossimGpt_isHgtNan(self)
    def ossimEcefVector_print(self, *args): return _pyossim.ossimGpt_ossimEcefVector_print(self, *args)
    def toString(self, precision = 15): return _pyossim.ossimGpt_toString(self, precision)
    def toPoint(self, *args): return _pyossim.ossimGpt_toPoint(self, *args)
    def datum(self, *args): return _pyossim.ossimGpt_datum(self, *args)
    def changeDatum(self, *args): return _pyossim.ossimGpt_changeDatum(self, *args)
    def __set__(self, *args): return _pyossim.ossimGpt___set__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimGpt___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimGpt___ne__(self, *args)
    def limitLonTo180(self): return _pyossim.ossimGpt_limitLonTo180(self)
    def wrap(self): return _pyossim.ossimGpt_wrap(self)
    def clampLon(self, *args): return _pyossim.ossimGpt_clampLon(self, *args)
    def clampLat(self, *args): return _pyossim.ossimGpt_clampLat(self, *args)
    def clampHgt(self, *args): return _pyossim.ossimGpt_clampHgt(self, *args)
    def distanceTo(self, *args): return _pyossim.ossimGpt_distanceTo(self, *args)
    def azimuthTo(self, *args): return _pyossim.ossimGpt_azimuthTo(self, *args)
    def metersPerDegree(self): return _pyossim.ossimGpt_metersPerDegree(self)
    def toDmsString(self): return _pyossim.ossimGpt_toDmsString(self)
    def isEqualTo(self, *args): return _pyossim.ossimGpt_isEqualTo(self, *args)
    __swig_setmethods__["lat"] = _pyossim.ossimGpt_lat_set
    __swig_getmethods__["lat"] = _pyossim.ossimGpt_lat_get
    if _newclass:lat = _swig_property(_pyossim.ossimGpt_lat_get, _pyossim.ossimGpt_lat_set)
    __swig_setmethods__["lon"] = _pyossim.ossimGpt_lon_set
    __swig_getmethods__["lon"] = _pyossim.ossimGpt_lon_get
    if _newclass:lon = _swig_property(_pyossim.ossimGpt_lon_get, _pyossim.ossimGpt_lon_set)
    __swig_setmethods__["hgt"] = _pyossim.ossimGpt_hgt_set
    __swig_getmethods__["hgt"] = _pyossim.ossimGpt_hgt_get
    if _newclass:hgt = _swig_property(_pyossim.ossimGpt_hgt_get, _pyossim.ossimGpt_hgt_set)
    __swig_destroy__ = _pyossim.delete_ossimGpt
    __del__ = lambda self : None;
ossimGpt_swigregister = _pyossim.ossimGpt_swigregister
ossimGpt_swigregister(ossimGpt)

class ossimIpt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimIpt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimIpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimIpt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimIpt___set__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimIpt___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimIpt___ne__(self, *args)
    def makeNan(self): return _pyossim.ossimIpt_makeNan(self)
    def hasNans(self): return _pyossim.ossimIpt_hasNans(self)
    def isNan(self): return _pyossim.ossimIpt_isNan(self)
    def ossimIpt_print(self, *args): return _pyossim.ossimIpt_ossimIpt_print(self, *args)
    def toString(self): return _pyossim.ossimIpt_toString(self)
    def toPoint(self, *args): return _pyossim.ossimIpt_toPoint(self, *args)
    def isEqualTo(self, *args): return _pyossim.ossimIpt_isEqualTo(self, *args)
    def length(self): return _pyossim.ossimIpt_length(self)
    def __add__(self, *args): return _pyossim.ossimIpt___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimIpt___sub__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimIpt___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.ossimIpt___isub__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimIpt___mul__(self, *args)
    def __div__(self, *args): return _pyossim.ossimIpt___div__(self, *args)
    __swig_setmethods__["x"] = _pyossim.ossimIpt_x_set
    __swig_getmethods__["x"] = _pyossim.ossimIpt_x_get
    if _newclass:x = _swig_property(_pyossim.ossimIpt_x_get, _pyossim.ossimIpt_x_set)
    __swig_setmethods__["u"] = _pyossim.ossimIpt_u_set
    __swig_getmethods__["u"] = _pyossim.ossimIpt_u_get
    if _newclass:u = _swig_property(_pyossim.ossimIpt_u_get, _pyossim.ossimIpt_u_set)
    __swig_setmethods__["samp"] = _pyossim.ossimIpt_samp_set
    __swig_getmethods__["samp"] = _pyossim.ossimIpt_samp_get
    if _newclass:samp = _swig_property(_pyossim.ossimIpt_samp_get, _pyossim.ossimIpt_samp_set)
    __swig_setmethods__["y"] = _pyossim.ossimIpt_y_set
    __swig_getmethods__["y"] = _pyossim.ossimIpt_y_get
    if _newclass:y = _swig_property(_pyossim.ossimIpt_y_get, _pyossim.ossimIpt_y_set)
    __swig_setmethods__["v"] = _pyossim.ossimIpt_v_set
    __swig_getmethods__["v"] = _pyossim.ossimIpt_v_get
    if _newclass:v = _swig_property(_pyossim.ossimIpt_v_get, _pyossim.ossimIpt_v_set)
    __swig_setmethods__["line"] = _pyossim.ossimIpt_line_set
    __swig_getmethods__["line"] = _pyossim.ossimIpt_line_get
    if _newclass:line = _swig_property(_pyossim.ossimIpt_line_get, _pyossim.ossimIpt_line_set)
    __swig_destroy__ = _pyossim.delete_ossimIpt
    __del__ = lambda self : None;
ossimIpt_swigregister = _pyossim.ossimIpt_swigregister
ossimIpt_swigregister(ossimIpt)

ossimIrect_HEADER = _pyossim.ossimIrect_HEADER
class ossimIrect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimIrect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimIrect, name)
    __repr__ = _swig_repr
    UPPER_LEFT = _pyossim.ossimIrect_UPPER_LEFT
    LOWER_LEFT = _pyossim.ossimIrect_LOWER_LEFT
    LOWER_RIGHT = _pyossim.ossimIrect_LOWER_RIGHT
    UPPER_RIGHT = _pyossim.ossimIrect_UPPER_RIGHT
    def __init__(self, *args): 
        this = _pyossim.new_ossimIrect(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimIrect
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyossim.ossimIrect___set__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimIrect___ne__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimIrect___cmp__(self, *args)
    def __imul__(self, *args): return _pyossim.ossimIrect___imul__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimIrect___mul__(self, *args)
    def __iadd__(self, *args): return _pyossim.ossimIrect___iadd__(self, *args)
    def __isub__(self, *args): return _pyossim.ossimIrect___isub__(self, *args)
    def __add__(self, *args): return _pyossim.ossimIrect___add__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimIrect___sub__(self, *args)
    def ul(self): return _pyossim.ossimIrect_ul(self)
    def ur(self): return _pyossim.ossimIrect_ur(self)
    def lr(self): return _pyossim.ossimIrect_lr(self)
    def ll(self): return _pyossim.ossimIrect_ll(self)
    def changeOrientationMode(self, *args): return _pyossim.ossimIrect_changeOrientationMode(self, *args)
    def getBounds(self, *args): return _pyossim.ossimIrect_getBounds(self, *args)
    def getCenter(self, *args): return _pyossim.ossimIrect_getCenter(self, *args)
    def makeNan(self): return _pyossim.ossimIrect_makeNan(self)
    def hasNans(self): return _pyossim.ossimIrect_hasNans(self)
    def isNan(self): return _pyossim.ossimIrect_isNan(self)
    def orientMode(self): return _pyossim.ossimIrect_orientMode(self)
    def setOrientMode(self, *args): return _pyossim.ossimIrect_setOrientMode(self, *args)
    def stretchToTileBoundary(self, *args): return _pyossim.ossimIrect_stretchToTileBoundary(self, *args)
    def toString(self): return _pyossim.ossimIrect_toString(self)
    def toRect(self, *args): return _pyossim.ossimIrect_toRect(self, *args)
    def expand(self, *args): return _pyossim.ossimIrect_expand(self, *args)
    def insureMinimumSize(self, *args): return _pyossim.ossimIrect_insureMinimumSize(self, *args)
    def area(self): return _pyossim.ossimIrect_area(self)
    def set_ul(self, *args): return _pyossim.ossimIrect_set_ul(self, *args)
    def set_ur(self, *args): return _pyossim.ossimIrect_set_ur(self, *args)
    def set_lr(self, *args): return _pyossim.ossimIrect_set_lr(self, *args)
    def set_ll(self, *args): return _pyossim.ossimIrect_set_ll(self, *args)
    def set_ulx(self, *args): return _pyossim.ossimIrect_set_ulx(self, *args)
    def set_uly(self, *args): return _pyossim.ossimIrect_set_uly(self, *args)
    def set_urx(self, *args): return _pyossim.ossimIrect_set_urx(self, *args)
    def set_ury(self, *args): return _pyossim.ossimIrect_set_ury(self, *args)
    def set_lrx(self, *args): return _pyossim.ossimIrect_set_lrx(self, *args)
    def set_lry(self, *args): return _pyossim.ossimIrect_set_lry(self, *args)
    def set_llx(self, *args): return _pyossim.ossimIrect_set_llx(self, *args)
    def set_lly(self, *args): return _pyossim.ossimIrect_set_lly(self, *args)
    def pointWithin(self, *args): return _pyossim.ossimIrect_pointWithin(self, *args)
    def intersects(self, *args): return _pyossim.ossimIrect_intersects(self, *args)
    def completely_within(self, *args): return _pyossim.ossimIrect_completely_within(self, *args)
    def orientationMode(self): return _pyossim.ossimIrect_orientationMode(self)
    def height(self): return _pyossim.ossimIrect_height(self)
    def width(self): return _pyossim.ossimIrect_width(self)
    def size(self): return _pyossim.ossimIrect_size(self)
    def clipToRect(self, *args): return _pyossim.ossimIrect_clipToRect(self, *args)
    def midPoint(self): return _pyossim.ossimIrect_midPoint(self)
    def ossimIrect_print(self, *args): return _pyossim.ossimIrect_ossimIrect_print(self, *args)
    def combine(self, *args): return _pyossim.ossimIrect_combine(self, *args)
    def saveState(self, *args): return _pyossim.ossimIrect_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimIrect_loadState(self, *args)
ossimIrect_swigregister = _pyossim.ossimIrect_swigregister
ossimIrect_swigregister(ossimIrect)

def __mul__(*args):
  return _pyossim.__mul__(*args)
__mul__ = _pyossim.__mul__

class ossimLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLine, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLine(*args)
        try: self.this.append(this)
        except: self.this = this
    def getVector(self): return _pyossim.ossimLine_getVector(self)
    def intersectInfinite(self, *args): return _pyossim.ossimLine_intersectInfinite(self, *args)
    def intersectSegment(self, *args): return _pyossim.ossimLine_intersectSegment(self, *args)
    def midPoint(self): return _pyossim.ossimLine_midPoint(self)
    def length(self): return _pyossim.ossimLine_length(self)
    def normal(self): return _pyossim.ossimLine_normal(self)
    def isPointWithin(self, *args): return _pyossim.ossimLine_isPointWithin(self, *args)
    def isPointOnInfiniteLine(self, *args): return _pyossim.ossimLine_isPointOnInfiniteLine(self, *args)
    __swig_setmethods__["theP1"] = _pyossim.ossimLine_theP1_set
    __swig_getmethods__["theP1"] = _pyossim.ossimLine_theP1_get
    if _newclass:theP1 = _swig_property(_pyossim.ossimLine_theP1_get, _pyossim.ossimLine_theP1_set)
    __swig_setmethods__["theP2"] = _pyossim.ossimLine_theP2_set
    __swig_getmethods__["theP2"] = _pyossim.ossimLine_theP2_get
    if _newclass:theP2 = _swig_property(_pyossim.ossimLine_theP2_get, _pyossim.ossimLine_theP2_set)
    __swig_destroy__ = _pyossim.delete_ossimLine
    __del__ = lambda self : None;
ossimLine_swigregister = _pyossim.ossimLine_swigregister
ossimLine_swigregister(ossimLine)

class ossimLsrPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLsrPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLsrPoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLsrPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimLsrPoint___set__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimLsrPoint___sub__(self, *args)
    def __add__(self, *args): return _pyossim.ossimLsrPoint___add__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimLsrPoint___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimLsrPoint___ne__(self, *args)
    def ossimLsrPoint_ossimEcefPoint(self): return _pyossim.ossimLsrPoint_ossimLsrPoint_ossimEcefPoint(self)
    def x(self): return _pyossim.ossimLsrPoint_x(self)
    def non_const_lsrPoint_x(self): return _pyossim.ossimLsrPoint_non_const_lsrPoint_x(self)
    def y(self): return _pyossim.ossimLsrPoint_y(self)
    def non_const_lsrPoint_y(self): return _pyossim.ossimLsrPoint_non_const_lsrPoint_y(self)
    def z(self): return _pyossim.ossimLsrPoint_z(self)
    def non_const_lsrPoint_z(self): return _pyossim.ossimLsrPoint_non_const_lsrPoint_z(self)
    def data(self): return _pyossim.ossimLsrPoint_data(self)
    def const_lsrPoint_data(self): return _pyossim.ossimLsrPoint_const_lsrPoint_data(self)
    def lsrSpace(self): return _pyossim.ossimLsrPoint_lsrSpace(self)
    def const_lsrPoint_lsrSpace(self): return _pyossim.ossimLsrPoint_const_lsrPoint_lsrSpace(self)
    def hasNans(self): return _pyossim.ossimLsrPoint_hasNans(self)
    def makeNan(self): return _pyossim.ossimLsrPoint_makeNan(self)
    def ossimLsrPoint_print(self, *args): return _pyossim.ossimLsrPoint_ossimLsrPoint_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimLsrPoint
    __del__ = lambda self : None;
ossimLsrPoint_swigregister = _pyossim.ossimLsrPoint_swigregister
ossimLsrPoint_swigregister(ossimLsrPoint)

class ossimLsrRay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLsrRay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLsrRay, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLsrRay(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimLsrRay___set__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimLsrRay___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimLsrRay___ne__(self, *args)
    def origin(self): return _pyossim.ossimLsrRay_origin(self)
    def direction(self): return _pyossim.ossimLsrRay_direction(self)
    def lsrSpace(self): return _pyossim.ossimLsrRay_lsrSpace(self)
    def ossimLsrRay_ossimEcefRay(self): return _pyossim.ossimLsrRay_ossimLsrRay_ossimEcefRay(self)
    def hasNans(self): return _pyossim.ossimLsrRay_hasNans(self)
    def makeNan(self): return _pyossim.ossimLsrRay_makeNan(self)
    def extend(self, *args): return _pyossim.ossimLsrRay_extend(self, *args)
    def ossimLsrRay_print(self, *args): return _pyossim.ossimLsrRay_ossimLsrRay_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimLsrRay
    __del__ = lambda self : None;
ossimLsrRay_swigregister = _pyossim.ossimLsrRay_swigregister
ossimLsrRay_swigregister(ossimLsrRay)

class ossimLsrSpace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLsrSpace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLsrSpace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLsrSpace(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimLsrSpace
    __del__ = lambda self : None;
    def __cmp__(self, *args): return _pyossim.ossimLsrSpace___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimLsrSpace___ne__(self, *args)
    def __set__(self, *args): return _pyossim.ossimLsrSpace___set__(self, *args)
    def origin(self): return _pyossim.ossimLsrSpace_origin(self)
    def lsrToEcefRotMatrix(self): return _pyossim.ossimLsrSpace_lsrToEcefRotMatrix(self)
    def ecefToLsrRotMatrix(self): return _pyossim.ossimLsrSpace_ecefToLsrRotMatrix(self)
    __swig_getmethods__["lsrSpaceErrorMessage"] = lambda x: _pyossim.ossimLsrSpace_lsrSpaceErrorMessage
    if _newclass:lsrSpaceErrorMessage = staticmethod(_pyossim.ossimLsrSpace_lsrSpaceErrorMessage)
    def ossimLsrSpace_print(self, *args): return _pyossim.ossimLsrSpace_ossimLsrSpace_print(self, *args)
ossimLsrSpace_swigregister = _pyossim.ossimLsrSpace_swigregister
ossimLsrSpace_swigregister(ossimLsrSpace)

def ossimLsrSpace_lsrSpaceErrorMessage(*args):
  return _pyossim.ossimLsrSpace_lsrSpaceErrorMessage(*args)
ossimLsrSpace_lsrSpaceErrorMessage = _pyossim.ossimLsrSpace_lsrSpaceErrorMessage

class ossimLsrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimLsrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimLsrVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimLsrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimLsrVector___set__(self, *args)
    def __sub__(self, *args): return _pyossim.ossimLsrVector___sub__(self, *args)
    def __add__(self, *args): return _pyossim.ossimLsrVector___add__(self, *args)
    def __mul__(self, *args): return _pyossim.ossimLsrVector___mul__(self, *args)
    def __div__(self, *args): return _pyossim.ossimLsrVector___div__(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimLsrVector___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimLsrVector___ne__(self, *args)
    def ossimLsrVector_ossimEcefVector(self): return _pyossim.ossimLsrVector_ossimLsrVector_ossimEcefVector(self)
    def dot(self, *args): return _pyossim.ossimLsrVector_dot(self, *args)
    def angleTo(self, *args): return _pyossim.ossimLsrVector_angleTo(self, *args)
    def cross(self, *args): return _pyossim.ossimLsrVector_cross(self, *args)
    def unitVector(self): return _pyossim.ossimLsrVector_unitVector(self)
    def magnitude(self): return _pyossim.ossimLsrVector_magnitude(self)
    def normalize(self): return _pyossim.ossimLsrVector_normalize(self)
    def x(self): return _pyossim.ossimLsrVector_x(self)
    def non_const_lsrVector_x(self): return _pyossim.ossimLsrVector_non_const_lsrVector_x(self)
    def y(self): return _pyossim.ossimLsrVector_y(self)
    def non_const_lsrVector_y(self): return _pyossim.ossimLsrVector_non_const_lsrVector_y(self)
    def z(self): return _pyossim.ossimLsrVector_z(self)
    def non_const_lsrVector_z(self): return _pyossim.ossimLsrVector_non_const_lsrVector_z(self)
    def hasNans(self): return _pyossim.ossimLsrVector_hasNans(self)
    def makeNan(self): return _pyossim.ossimLsrVector_makeNan(self)
    def data(self): return _pyossim.ossimLsrVector_data(self)
    def const_lsrVector_data(self): return _pyossim.ossimLsrVector_const_lsrVector_data(self)
    def lsrSpace(self): return _pyossim.ossimLsrVector_lsrSpace(self)
    def const_lsrVector_lsrSpace(self): return _pyossim.ossimLsrVector_const_lsrVector_lsrSpace(self)
    def ossimLsrVector_print(self, *args): return _pyossim.ossimLsrVector_ossimLsrVector_print(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimLsrVector
    __del__ = lambda self : None;
ossimLsrVector_swigregister = _pyossim.ossimLsrVector_swigregister
ossimLsrVector_swigregister(ossimLsrVector)

class ossimThreeParamDatum(ossimDatum):
    __swig_setmethods__ = {}
    for _s in [ossimDatum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimThreeParamDatum, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimDatum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimThreeParamDatum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimThreeParamDatum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimThreeParamDatum
    __del__ = lambda self : None;
    def shift(self, *args): return _pyossim.ossimThreeParamDatum_shift(self, *args)
    def shiftToWgs84(self, *args): return _pyossim.ossimThreeParamDatum_shiftToWgs84(self, *args)
    def shiftFromWgs84(self, *args): return _pyossim.ossimThreeParamDatum_shiftFromWgs84(self, *args)
    def param1(self): return _pyossim.ossimThreeParamDatum_param1(self)
    def param2(self): return _pyossim.ossimThreeParamDatum_param2(self)
    def param3(self): return _pyossim.ossimThreeParamDatum_param3(self)
    def param4(self): return _pyossim.ossimThreeParamDatum_param4(self)
    def param5(self): return _pyossim.ossimThreeParamDatum_param5(self)
    def param6(self): return _pyossim.ossimThreeParamDatum_param6(self)
    def param7(self): return _pyossim.ossimThreeParamDatum_param7(self)
    def isEqualTo(self, *args): return _pyossim.ossimThreeParamDatum_isEqualTo(self, *args)
ossimThreeParamDatum_swigregister = _pyossim.ossimThreeParamDatum_swigregister
ossimThreeParamDatum_swigregister(ossimThreeParamDatum)

class ossimNadconGridDatum(ossimThreeParamDatum):
    __swig_setmethods__ = {}
    for _s in [ossimThreeParamDatum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconGridDatum, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimThreeParamDatum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconGridDatum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimNadconGridDatum(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNadconGridDatum
    __del__ = lambda self : None;
ossimNadconGridDatum_swigregister = _pyossim.ossimNadconGridDatum_swigregister
ossimNadconGridDatum_swigregister(ossimNadconGridDatum)

class ossimNadconGridFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconGridFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconGridFile, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNadconGridFile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNadconGridFile
    __del__ = lambda self : None;
    def open(self, *args): return _pyossim.ossimNadconGridFile_open(self, *args)
    def close(self): return _pyossim.ossimNadconGridFile_close(self)
    def getShiftAtLatLon(self, *args): return _pyossim.ossimNadconGridFile_getShiftAtLatLon(self, *args)
    def pointWithin(self, *args): return _pyossim.ossimNadconGridFile_pointWithin(self, *args)
    def getBoundingRect(self): return _pyossim.ossimNadconGridFile_getBoundingRect(self)
    def getFilename(self): return _pyossim.ossimNadconGridFile_getFilename(self)
    def getFileOkFlag(self): return _pyossim.ossimNadconGridFile_getFileOkFlag(self)
    def getSpacing(self): return _pyossim.ossimNadconGridFile_getSpacing(self)
ossimNadconGridFile_swigregister = _pyossim.ossimNadconGridFile_swigregister
ossimNadconGridFile_swigregister(ossimNadconGridFile)

class ossimNadconGridHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconGridHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconGridHeader, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNadconGridHeader()
        try: self.this.append(this)
        except: self.this = this
    def readHeader(self, *args): return _pyossim.ossimNadconGridHeader_readHeader(self, *args)
    def getStartOffset(self): return _pyossim.ossimNadconGridHeader_getStartOffset(self)
    def getBytesPerRow(self): return _pyossim.ossimNadconGridHeader_getBytesPerRow(self)
    def getNumberOfRows(self): return _pyossim.ossimNadconGridHeader_getNumberOfRows(self)
    def getNumberOfCols(self): return _pyossim.ossimNadconGridHeader_getNumberOfCols(self)
    def getDeltaX(self): return _pyossim.ossimNadconGridHeader_getDeltaX(self)
    def getDeltaY(self): return _pyossim.ossimNadconGridHeader_getDeltaY(self)
    def getBoundingRect(self): return _pyossim.ossimNadconGridHeader_getBoundingRect(self)
    def getMinX(self): return _pyossim.ossimNadconGridHeader_getMinX(self)
    def getMinY(self): return _pyossim.ossimNadconGridHeader_getMinY(self)
    def getSpacing(self): return _pyossim.ossimNadconGridHeader_getSpacing(self)
    __swig_destroy__ = _pyossim.delete_ossimNadconGridHeader
    __del__ = lambda self : None;
ossimNadconGridHeader_swigregister = _pyossim.ossimNadconGridHeader_swigregister
ossimNadconGridHeader_swigregister(ossimNadconGridHeader)

class ossimNadconNarDatum(ossimNadconGridDatum):
    __swig_setmethods__ = {}
    for _s in [ossimNadconGridDatum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconNarDatum, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNadconGridDatum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconNarDatum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimNadconNarDatum(*args)
        try: self.this.append(this)
        except: self.this = this
    def shift(self, *args): return _pyossim.ossimNadconNarDatum_shift(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimNadconNarDatum
    __del__ = lambda self : None;
ossimNadconNarDatum_swigregister = _pyossim.ossimNadconNarDatum_swigregister
ossimNadconNarDatum_swigregister(ossimNadconNarDatum)

class ossimNadconNasDatum(ossimNadconGridDatum):
    __swig_setmethods__ = {}
    for _s in [ossimNadconGridDatum]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNadconNasDatum, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNadconGridDatum]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNadconNasDatum, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimNadconNasDatum(*args)
        try: self.this.append(this)
        except: self.this = this
    def shift(self, *args): return _pyossim.ossimNadconNasDatum_shift(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimNadconNasDatum
    __del__ = lambda self : None;
ossimNadconNasDatum_swigregister = _pyossim.ossimNadconNasDatum_swigregister
ossimNadconNasDatum_swigregister(ossimNadconNasDatum)

class ossimObjectDestructingEvent(ossimEvent):
    __swig_setmethods__ = {}
    for _s in [ossimEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimObjectDestructingEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimObjectDestructingEvent, name)
    __repr__ = _swig_repr
    def __init__(self, objectDestructing = None): 
        this = _pyossim.new_ossimObjectDestructingEvent(objectDestructing)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossimObjectDestructingEvent_dup(self)
    __swig_destroy__ = _pyossim.delete_ossimObjectDestructingEvent
    __del__ = lambda self : None;
ossimObjectDestructingEvent_swigregister = _pyossim.ossimObjectDestructingEvent_swigregister
ossimObjectDestructingEvent_swigregister(ossimObjectDestructingEvent)

class ossimStreamBase(ossimReferenced):
    __swig_setmethods__ = {}
    for _s in [ossimReferenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStreamBase, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimReferenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStreamBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimStreamBase()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimStreamBase
    __del__ = lambda self : None;
    def isCompressed(self): return _pyossim.ossimStreamBase_isCompressed(self)
ossimStreamBase_swigregister = _pyossim.ossimStreamBase_swigregister
ossimStreamBase_swigregister(ossimStreamBase)

class ossimStreamFactoryBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStreamFactoryBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStreamFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimStreamFactoryBase
    __del__ = lambda self : None;
    def createNewIFStream(self, *args): return _pyossim.ossimStreamFactoryBase_createNewIFStream(self, *args)
ossimStreamFactoryBase_swigregister = _pyossim.ossimStreamFactoryBase_swigregister
ossimStreamFactoryBase_swigregister(ossimStreamFactoryBase)

class ossimStreamFactory(ossimStreamFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ossimStreamFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStreamFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimStreamFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStreamFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimStreamFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimStreamFactory_instance)
    __swig_destroy__ = _pyossim.delete_ossimStreamFactory
    __del__ = lambda self : None;
    def createNewIFStream(self, *args): return _pyossim.ossimStreamFactory_createNewIFStream(self, *args)
ossimStreamFactory_swigregister = _pyossim.ossimStreamFactory_swigregister
ossimStreamFactory_swigregister(ossimStreamFactory)

def ossimStreamFactory_instance():
  return _pyossim.ossimStreamFactory_instance()
ossimStreamFactory_instance = _pyossim.ossimStreamFactory_instance

class ossimStreamFactoryRegistry(ossimStreamFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ossimStreamFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStreamFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimStreamFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStreamFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimStreamFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimStreamFactoryRegistry_instance)
    __swig_destroy__ = _pyossim.delete_ossimStreamFactoryRegistry
    __del__ = lambda self : None;
    def registerFactory(self, *args): return _pyossim.ossimStreamFactoryRegistry_registerFactory(self, *args)
    def createNewIFStream(self, *args): return _pyossim.ossimStreamFactoryRegistry_createNewIFStream(self, *args)
ossimStreamFactoryRegistry_swigregister = _pyossim.ossimStreamFactoryRegistry_swigregister
ossimStreamFactoryRegistry_swigregister(ossimStreamFactoryRegistry)

def ossimStreamFactoryRegistry_instance():
  return _pyossim.ossimStreamFactoryRegistry_instance()
ossimStreamFactoryRegistry_instance = _pyossim.ossimStreamFactoryRegistry_instance

class ossimTieGpt(ossimReferenced,ossimGpt):
    __swig_setmethods__ = {}
    for _s in [ossimReferenced,ossimGpt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTieGpt, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimReferenced,ossimGpt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTieGpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimTieGpt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimTieGpt
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyossim.ossimTieGpt___set__(self, *args)
    def setGroundPoint(self, *args): return _pyossim.ossimTieGpt_setGroundPoint(self, *args)
    def getGroundPoint(self): return _pyossim.ossimTieGpt_getGroundPoint(self)
    def refGroundPoint(self): return _pyossim.ossimTieGpt_refGroundPoint(self)
    def setImagePoint(self, *args): return _pyossim.ossimTieGpt_setImagePoint(self, *args)
    def getImagePoint(self): return _pyossim.ossimTieGpt_getImagePoint(self)
    def refImagePoint(self): return _pyossim.ossimTieGpt_refImagePoint(self)
    def setScore(self, *args): return _pyossim.ossimTieGpt_setScore(self, *args)
    def getScore(self): return _pyossim.ossimTieGpt_getScore(self)
    def refScore(self): return _pyossim.ossimTieGpt_refScore(self)
    def makeNan(self): return _pyossim.ossimTieGpt_makeNan(self)
    def hasNans(self): return _pyossim.ossimTieGpt_hasNans(self)
    def isNan(self): return _pyossim.ossimTieGpt_isNan(self)
    def ossimTieGpt_print(self, *args): return _pyossim.ossimTieGpt_ossimTieGpt_print(self, *args)
    def ossimTieGpt_printTab(self, *args): return _pyossim.ossimTieGpt_ossimTieGpt_printTab(self, *args)
    def exportAsGmlNode(self, aGmlVersion = "2.1.2"): return _pyossim.ossimTieGpt_exportAsGmlNode(self, aGmlVersion)
    def importFromGmlNode(self, *args): return _pyossim.ossimTieGpt_importFromGmlNode(self, *args)
    __swig_setmethods__["tie"] = _pyossim.ossimTieGpt_tie_set
    __swig_getmethods__["tie"] = _pyossim.ossimTieGpt_tie_get
    if _newclass:tie = _swig_property(_pyossim.ossimTieGpt_tie_get, _pyossim.ossimTieGpt_tie_set)
    __swig_setmethods__["score"] = _pyossim.ossimTieGpt_score_set
    __swig_getmethods__["score"] = _pyossim.ossimTieGpt_score_get
    if _newclass:score = _swig_property(_pyossim.ossimTieGpt_score_get, _pyossim.ossimTieGpt_score_set)
ossimTieGpt_swigregister = _pyossim.ossimTieGpt_swigregister
ossimTieGpt_swigregister(ossimTieGpt)

def __rshift__(*args):
  return _pyossim.__rshift__(*args)
__rshift__ = _pyossim.__rshift__

class ossimTieGptSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTieGptSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTieGptSet, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimTieGptSet(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimTieGptSet
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyossim.ossimTieGptSet___set__(self, *args)
    def setTiePoints(self, *args): return _pyossim.ossimTieGptSet_setTiePoints(self, *args)
    def getTiePoints(self): return _pyossim.ossimTieGptSet_getTiePoints(self)
    def refTiePoints(self): return _pyossim.ossimTieGptSet_refTiePoints(self)
    def setMasterPath(self, *args): return _pyossim.ossimTieGptSet_setMasterPath(self, *args)
    def getMasterPath(self): return _pyossim.ossimTieGptSet_getMasterPath(self)
    def setSlavePath(self, *args): return _pyossim.ossimTieGptSet_setSlavePath(self, *args)
    def getSlavePath(self): return _pyossim.ossimTieGptSet_getSlavePath(self)
    def setImageCov(self, *args): return _pyossim.ossimTieGptSet_setImageCov(self, *args)
    def getImageCov(self): return _pyossim.ossimTieGptSet_getImageCov(self)
    def refImageCov(self): return _pyossim.ossimTieGptSet_refImageCov(self)
    def setGroundCov(self, *args): return _pyossim.ossimTieGptSet_setGroundCov(self, *args)
    def getGroundCov(self): return _pyossim.ossimTieGptSet_getGroundCov(self)
    def refGroundCov(self): return _pyossim.ossimTieGptSet_refGroundCov(self)
    def getSlaveMasterPoints(self, *args): return _pyossim.ossimTieGptSet_getSlaveMasterPoints(self, *args)
    def size(self): return _pyossim.ossimTieGptSet_size(self)
    def addTiePoint(self, *args): return _pyossim.ossimTieGptSet_addTiePoint(self, *args)
    def clearTiePoints(self): return _pyossim.ossimTieGptSet_clearTiePoints(self)
    def getGroundBoundaries(self, *args): return _pyossim.ossimTieGptSet_getGroundBoundaries(self, *args)
    def ossimTieGptSet_printTab(self, *args): return _pyossim.ossimTieGptSet_ossimTieGptSet_printTab(self, *args)
    def exportAsGmlNode(self, aGmlVersion = "2.1.2"): return _pyossim.ossimTieGptSet_exportAsGmlNode(self, aGmlVersion)
    def importFromGmlNode(self, *args): return _pyossim.ossimTieGptSet_importFromGmlNode(self, *args)
    __swig_setmethods__["TIEPTSET_TAG"] = _pyossim.ossimTieGptSet_TIEPTSET_TAG_set
    __swig_getmethods__["TIEPTSET_TAG"] = _pyossim.ossimTieGptSet_TIEPTSET_TAG_get
    if _newclass:TIEPTSET_TAG = _swig_property(_pyossim.ossimTieGptSet_TIEPTSET_TAG_get, _pyossim.ossimTieGptSet_TIEPTSET_TAG_set)
ossimTieGptSet_swigregister = _pyossim.ossimTieGptSet_swigregister
ossimTieGptSet_swigregister(ossimTieGptSet)

class ossimPointHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPointHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPointHash, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimPointHash
    __del__ = lambda self : None;
    def __call__(self, *args): return _pyossim.ossimPointHash___call__(self, *args)
ossimPointHash_swigregister = _pyossim.ossimPointHash_swigregister
ossimPointHash_swigregister(ossimPointHash)

class ossimTiledImageHash(ossimPointHash):
    __swig_setmethods__ = {}
    for _s in [ossimPointHash]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTiledImageHash, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPointHash]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTiledImageHash, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimTiledImageHash(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimTiledImageHash
    __del__ = lambda self : None;
    def __call__(self, *args): return _pyossim.ossimTiledImageHash___call__(self, *args)
ossimTiledImageHash_swigregister = _pyossim.ossimTiledImageHash_swigregister
ossimTiledImageHash_swigregister(ossimTiledImageHash)

class ossimTileHash(ossimPointHash):
    __swig_setmethods__ = {}
    for _s in [ossimPointHash]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTileHash, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPointHash]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTileHash, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimTileHash(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimTileHash
    __del__ = lambda self : None;
    def __call__(self, *args): return _pyossim.ossimTileHash___call__(self, *args)
ossimTileHash_swigregister = _pyossim.ossimTileHash_swigregister
ossimTileHash_swigregister(ossimTileHash)

ossimTimer_HEADER = _pyossim.ossimTimer_HEADER
class ossimTimer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTimer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTimer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimTimer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimTimer
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimTimer_instance
    if _newclass:instance = staticmethod(_pyossim.ossimTimer_instance)
    def tick(self): return _pyossim.ossimTimer_tick(self)
    def setStartTick(self, *args): return _pyossim.ossimTimer_setStartTick(self, *args)
    def getStartTick(self): return _pyossim.ossimTimer_getStartTick(self)
    def time_s(self): return _pyossim.ossimTimer_time_s(self)
    def time_m(self): return _pyossim.ossimTimer_time_m(self)
    def time_u(self): return _pyossim.ossimTimer_time_u(self)
    def time_n(self): return _pyossim.ossimTimer_time_n(self)
    def delta_s(self, *args): return _pyossim.ossimTimer_delta_s(self, *args)
    def delta_m(self, *args): return _pyossim.ossimTimer_delta_m(self, *args)
    def delta_u(self, *args): return _pyossim.ossimTimer_delta_u(self, *args)
    def delta_n(self, *args): return _pyossim.ossimTimer_delta_n(self, *args)
    def getSecondsPerTick(self): return _pyossim.ossimTimer_getSecondsPerTick(self)
ossimTimer_swigregister = _pyossim.ossimTimer_swigregister
ossimTimer_swigregister(ossimTimer)

def ossimTimer_instance():
  return _pyossim.ossimTimer_instance()
ossimTimer_instance = _pyossim.ossimTimer_instance

class ossimTrace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTrace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTrace, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimTrace(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimTrace
    __del__ = lambda self : None;
    def isEnabled(self): return _pyossim.ossimTrace_isEnabled(self)
    def getTraceName(self): return _pyossim.ossimTrace_getTraceName(self)
    def setTraceFlag(self, *args): return _pyossim.ossimTrace_setTraceFlag(self, *args)
    def __call__(self): return _pyossim.ossimTrace___call__(self)
ossimTrace_swigregister = _pyossim.ossimTrace_swigregister
ossimTrace_swigregister(ossimTrace)

class ossimTraceManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTraceManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTraceManager, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimTraceManager_instance
    if _newclass:instance = staticmethod(_pyossim.ossimTraceManager_instance)
    def setTracePattern(self, *args): return _pyossim.ossimTraceManager_setTracePattern(self, *args)
    def addTrace(self, *args): return _pyossim.ossimTraceManager_addTrace(self, *args)
    def removeTrace(self, *args): return _pyossim.ossimTraceManager_removeTrace(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimTraceManager
    __del__ = lambda self : None;
ossimTraceManager_swigregister = _pyossim.ossimTraceManager_swigregister
ossimTraceManager_swigregister(ossimTraceManager)

def ossimTraceManager_instance():
  return _pyossim.ossimTraceManager_instance()
ossimTraceManager_instance = _pyossim.ossimTraceManager_instance

class ossimTDpt(ossimDpt):
    __swig_setmethods__ = {}
    for _s in [ossimDpt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTDpt, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimDpt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTDpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimTDpt(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.ossimTDpt___set__(self, *args)
    def setMasterPoint(self, *args): return _pyossim.ossimTDpt_setMasterPoint(self, *args)
    def getMasterPoint(self): return _pyossim.ossimTDpt_getMasterPoint(self)
    def refMasterPoint(self): return _pyossim.ossimTDpt_refMasterPoint(self)
    def setSlavePoint(self, *args): return _pyossim.ossimTDpt_setSlavePoint(self, *args)
    def getSlavePoint(self): return _pyossim.ossimTDpt_getSlavePoint(self)
    def refSlavePoint(self): return _pyossim.ossimTDpt_refSlavePoint(self)
    def makeNan(self): return _pyossim.ossimTDpt_makeNan(self)
    def hasNans(self): return _pyossim.ossimTDpt_hasNans(self)
    def isNan(self): return _pyossim.ossimTDpt_isNan(self)
    def ossimTDpt_print(self, *args): return _pyossim.ossimTDpt_ossimTDpt_print(self, *args)
    def ossimTDpt_printTab(self, *args): return _pyossim.ossimTDpt_ossimTDpt_printTab(self, *args)
    __swig_setmethods__["tie"] = _pyossim.ossimTDpt_tie_set
    __swig_getmethods__["tie"] = _pyossim.ossimTDpt_tie_get
    if _newclass:tie = _swig_property(_pyossim.ossimTDpt_tie_get, _pyossim.ossimTDpt_tie_set)
    __swig_setmethods__["score"] = _pyossim.ossimTDpt_score_set
    __swig_getmethods__["score"] = _pyossim.ossimTDpt_score_get
    if _newclass:score = _swig_property(_pyossim.ossimTDpt_score_get, _pyossim.ossimTDpt_score_set)
    __swig_destroy__ = _pyossim.delete_ossimTDpt
    __del__ = lambda self : None;
ossimTDpt_swigregister = _pyossim.ossimTDpt_swigregister
ossimTDpt_swigregister(ossimTDpt)

class ossimTempFilename(ossimFilename):
    __swig_setmethods__ = {}
    for _s in [ossimFilename]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTempFilename, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimFilename]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTempFilename, name)
    __repr__ = _swig_repr
    def __init__(self, tempDir = "", prefix = "", extension = "", autodelete = True, 
    useWildcardDelete = True): 
        this = _pyossim.new_ossimTempFilename(tempDir, prefix, extension, autodelete, useWildcardDelete)
        try: self.this.append(this)
        except: self.this = this
    def generateRandomFile(self): return _pyossim.ossimTempFilename_generateRandomFile(self)
    def generateRandomDir(self): return _pyossim.ossimTempFilename_generateRandomDir(self)
    __swig_destroy__ = _pyossim.delete_ossimTempFilename
    __del__ = lambda self : None;
ossimTempFilename_swigregister = _pyossim.ossimTempFilename_swigregister
ossimTempFilename_swigregister(ossimTempFilename)

class ossimThinPlateSpline(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimThinPlateSpline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimThinPlateSpline, name)
    __repr__ = _swig_repr
    VIZ_GEOREF_SPLINE_ZERO_POINTS = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_ZERO_POINTS
    VIZ_GEOREF_SPLINE_ONE_POINT = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_ONE_POINT
    VIZ_GEOREF_SPLINE_TWO_POINTS = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_TWO_POINTS
    VIZ_GEOREF_SPLINE_ONE_DIMENSIONAL = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_ONE_DIMENSIONAL
    VIZ_GEOREF_SPLINE_FULL = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_FULL
    VIZ_GEOREF_SPLINE_POINT_WAS_ADDED = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_POINT_WAS_ADDED
    VIZ_GEOREF_SPLINE_POINT_WAS_DELETED = _pyossim.ossimThinPlateSpline_VIZ_GEOREF_SPLINE_POINT_WAS_DELETED
    def __init__(self, nof_vars = 1): 
        this = _pyossim.new_ossimThinPlateSpline(nof_vars)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimThinPlateSpline
    __del__ = lambda self : None;
    def getNumberOfPoints(self): return _pyossim.ossimThinPlateSpline_getNumberOfPoints(self)
    def setToler(self, *args): return _pyossim.ossimThinPlateSpline_setToler(self, *args)
    def getToler(self, *args): return _pyossim.ossimThinPlateSpline_getToler(self, *args)
    def getInterpolationType(self): return _pyossim.ossimThinPlateSpline_getInterpolationType(self)
    def deleteList(self): return _pyossim.ossimThinPlateSpline_deleteList(self)
    def growPoints(self): return _pyossim.ossimThinPlateSpline_growPoints(self)
    def addPoint(self, *args): return _pyossim.ossimThinPlateSpline_addPoint(self, *args)
    def deletePoint(self, *args): return _pyossim.ossimThinPlateSpline_deletePoint(self, *args)
    def getPoint(self, *args): return _pyossim.ossimThinPlateSpline_getPoint(self, *args)
    def getXy(self, *args): return _pyossim.ossimThinPlateSpline_getXy(self, *args)
    def changePoint(self, *args): return _pyossim.ossimThinPlateSpline_changePoint(self, *args)
    def reset(self): return _pyossim.ossimThinPlateSpline_reset(self)
    def solve(self): return _pyossim.ossimThinPlateSpline_solve(self)
ossimThinPlateSpline_swigregister = _pyossim.ossimThinPlateSpline_swigregister
ossimThinPlateSpline_swigregister(ossimThinPlateSpline)

class ossimAnnotationObject(ossimObject):
    __swig_setmethods__ = {}
    for _s in [ossimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimAnnotationObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimAnnotationObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def applyScale(self, *args): return _pyossim.ossimAnnotationObject_applyScale(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimAnnotationObject_ossimObject_print(self, *args)
    def draw(self, *args): return _pyossim.ossimAnnotationObject_draw(self, *args)
    def intersects(self, *args): return _pyossim.ossimAnnotationObject_intersects(self, *args)
    def getNewClippedObject(self, *args): return _pyossim.ossimAnnotationObject_getNewClippedObject(self, *args)
    def getBoundingRect(self, *args): return _pyossim.ossimAnnotationObject_getBoundingRect(self, *args)
    def computeBoundingRect(self): return _pyossim.ossimAnnotationObject_computeBoundingRect(self)
    def setColor(self, *args): return _pyossim.ossimAnnotationObject_setColor(self, *args)
    def getColor(self, *args): return _pyossim.ossimAnnotationObject_getColor(self, *args)
    def getThickness(self): return _pyossim.ossimAnnotationObject_getThickness(self)
    def setThickness(self, *args): return _pyossim.ossimAnnotationObject_setThickness(self, *args)
    def isPointWithin(self, *args): return _pyossim.ossimAnnotationObject_isPointWithin(self, *args)
    def saveState(self, *args): return _pyossim.ossimAnnotationObject_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimAnnotationObject_loadState(self, *args)
    def getName(self): return _pyossim.ossimAnnotationObject_getName(self)
    def setName(self, *args): return _pyossim.ossimAnnotationObject_setName(self, *args)
    def getId(self): return _pyossim.ossimAnnotationObject_getId(self)
    def setId(self): return _pyossim.ossimAnnotationObject_setId(self)
    __swig_getmethods__["getNextId"] = lambda x: _pyossim.ossimAnnotationObject_getNextId
    if _newclass:getNextId = staticmethod(_pyossim.ossimAnnotationObject_getNextId)
    __swig_getmethods__["restIdCounter"] = lambda x: _pyossim.ossimAnnotationObject_restIdCounter
    if _newclass:restIdCounter = staticmethod(_pyossim.ossimAnnotationObject_restIdCounter)
ossimAnnotationObject_swigregister = _pyossim.ossimAnnotationObject_swigregister
ossimAnnotationObject_swigregister(ossimAnnotationObject)

def ossimAnnotationObject_getNextId():
  return _pyossim.ossimAnnotationObject_getNextId()
ossimAnnotationObject_getNextId = _pyossim.ossimAnnotationObject_getNextId

def ossimAnnotationObject_restIdCounter():
  return _pyossim.ossimAnnotationObject_restIdCounter()
ossimAnnotationObject_restIdCounter = _pyossim.ossimAnnotationObject_restIdCounter

class ossimAnnotationMultiEllipseObject(ossimAnnotationObject):
    __swig_setmethods__ = {}
    for _s in [ossimAnnotationObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimAnnotationMultiEllipseObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimAnnotationObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimAnnotationMultiEllipseObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimAnnotationMultiEllipseObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossimAnnotationMultiEllipseObject_dup(self)
    def getNewClippedObject(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_getNewClippedObject(self, *args)
    def applyScale(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_applyScale(self, *args)
    def draw(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_draw(self, *args)
    def intersects(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_intersects(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_ossimObject_print(self, *args)
    def getBoundingRect(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_getBoundingRect(self, *args)
    def computeBoundingRect(self): return _pyossim.ossimAnnotationMultiEllipseObject_computeBoundingRect(self)
    def isPointWithin(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_isPointWithin(self, *args)
    def setFillFlag(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_setFillFlag(self, *args)
    def resize(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_resize(self, *args)
    def setWidthHeight(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_setWidthHeight(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject___getitem__(self, *args)
    def ossimAnnotationMultiEllipseObject_getitem_int(self, *args): return _pyossim.ossimAnnotationMultiEllipseObject_ossimAnnotationMultiEllipseObject_getitem_int(self, *args)
ossimAnnotationMultiEllipseObject_swigregister = _pyossim.ossimAnnotationMultiEllipseObject_swigregister
ossimAnnotationMultiEllipseObject_swigregister(ossimAnnotationMultiEllipseObject)

class ossimAdrgHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimAdrgHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimAdrgHeader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimAdrgHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimAdrgHeader
    __del__ = lambda self : None;
    OSSIM_OK = _pyossim.ossimAdrgHeader_OSSIM_OK
    OSSIM_ERROR = _pyossim.ossimAdrgHeader_OSSIM_ERROR
    ADRG_TILE_SIZE = _pyossim.ossimAdrgHeader_ADRG_TILE_SIZE
    def errorStatus(self): return _pyossim.ossimAdrgHeader_errorStatus(self)
    def file(self): return _pyossim.ossimAdrgHeader_file(self)
    def imageFile(self): return _pyossim.ossimAdrgHeader_imageFile(self)
    def validImageRect(self): return _pyossim.ossimAdrgHeader_validImageRect(self)
    def pixelType(self): return _pyossim.ossimAdrgHeader_pixelType(self)
    def interleaveType(self): return _pyossim.ossimAdrgHeader_interleaveType(self)
    def numberOfBands(self): return _pyossim.ossimAdrgHeader_numberOfBands(self)
    def lines(self): return _pyossim.ossimAdrgHeader_lines(self)
    def tlines(self): return _pyossim.ossimAdrgHeader_tlines(self)
    def samples(self): return _pyossim.ossimAdrgHeader_samples(self)
    def tsamples(self): return _pyossim.ossimAdrgHeader_tsamples(self)
    def headerSize(self): return _pyossim.ossimAdrgHeader_headerSize(self)
    def startRow(self): return _pyossim.ossimAdrgHeader_startRow(self)
    def startCol(self): return _pyossim.ossimAdrgHeader_startCol(self)
    def stopRow(self): return _pyossim.ossimAdrgHeader_stopRow(self)
    def stopCol(self): return _pyossim.ossimAdrgHeader_stopCol(self)
    def tim(self, *args): return _pyossim.ossimAdrgHeader_tim(self, *args)
    def minLon(self): return _pyossim.ossimAdrgHeader_minLon(self)
    def minLat(self): return _pyossim.ossimAdrgHeader_minLat(self)
    def maxLon(self): return _pyossim.ossimAdrgHeader_maxLon(self)
    def maxLat(self): return _pyossim.ossimAdrgHeader_maxLat(self)
    def minLongitude(self): return _pyossim.ossimAdrgHeader_minLongitude(self)
    def minLatitude(self): return _pyossim.ossimAdrgHeader_minLatitude(self)
    def maxLongitude(self): return _pyossim.ossimAdrgHeader_maxLongitude(self)
    def maxLatitude(self): return _pyossim.ossimAdrgHeader_maxLatitude(self)
ossimAdrgHeader_swigregister = _pyossim.ossimAdrgHeader_swigregister
ossimAdrgHeader_swigregister(ossimAdrgHeader)

class ossimSource(ossimConnectableObject,ossimErrorStatusInterface):
    __swig_setmethods__ = {}
    for _s in [ossimConnectableObject,ossimErrorStatusInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimSource, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimConnectableObject,ossimErrorStatusInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimSource, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimSource
    __del__ = lambda self : None;
    def isSourceEnabled(self): return _pyossim.ossimSource_isSourceEnabled(self)
    def enableSource(self): return _pyossim.ossimSource_enableSource(self)
    def disableSource(self): return _pyossim.ossimSource_disableSource(self)
    def getEnableFlag(self): return _pyossim.ossimSource_getEnableFlag(self)
    def setEnableFlag(self, *args): return _pyossim.ossimSource_setEnableFlag(self, *args)
    def isInitialized(self): return _pyossim.ossimSource_isInitialized(self)
    def setInitializedFlag(self, *args): return _pyossim.ossimSource_setInitializedFlag(self, *args)
    def initialize(self): return _pyossim.ossimSource_initialize(self)
    def setProperty(self, *args): return _pyossim.ossimSource_setProperty(self, *args)
    def getProperty(self, *args): return _pyossim.ossimSource_getProperty(self, *args)
    def getPropertyNames(self, *args): return _pyossim.ossimSource_getPropertyNames(self, *args)
    def saveState(self, *args): return _pyossim.ossimSource_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimSource_loadState(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimSource_ossimObject_print(self, *args)
ossimSource_swigregister = _pyossim.ossimSource_swigregister
ossimSource_swigregister(ossimSource)

class ossimOutputSource(ossimSource):
    __swig_setmethods__ = {}
    for _s in [ossimSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimOutputSource, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimOutputSource, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimOutputSource
    __del__ = lambda self : None;
    def isOpen(self): return _pyossim.ossimOutputSource_isOpen(self)
    def open(self, *args): return _pyossim.ossimOutputSource_open(self, *args)
    def setOutputName(self, *args): return _pyossim.ossimOutputSource_setOutputName(self, *args)
    def getOutputName(self): return _pyossim.ossimOutputSource_getOutputName(self)
    def close(self): return _pyossim.ossimOutputSource_close(self)
    def saveState(self, *args): return _pyossim.ossimOutputSource_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimOutputSource_loadState(self, *args)
ossimOutputSource_swigregister = _pyossim.ossimOutputSource_swigregister
ossimOutputSource_swigregister(ossimOutputSource)

ossimImageSource_HEADER = _pyossim.ossimImageSource_HEADER
class ossimImageSource(ossimSource):
    __swig_setmethods__ = {}
    for _s in [ossimSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageSource, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageSource, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimImageSource
    __del__ = lambda self : None;
    def getTile(self, *args): return _pyossim.ossimImageSource_getTile(self, *args)
    def getObject(self): return _pyossim.ossimImageSource_getObject(self)
    def const_ossimImageSource_getObject(self): return _pyossim.ossimImageSource_const_ossimImageSource_getObject(self)
    def getDecimationFactor(self, *args): return _pyossim.ossimImageSource_getDecimationFactor(self, *args)
    def getDecimationFactors(self, *args): return _pyossim.ossimImageSource_getDecimationFactors(self, *args)
    def getNumberOfDecimationLevels(self): return _pyossim.ossimImageSource_getNumberOfDecimationLevels(self)
    def getNumberOfInputBands(self): return _pyossim.ossimImageSource_getNumberOfInputBands(self)
    def getNumberOfOutputBands(self): return _pyossim.ossimImageSource_getNumberOfOutputBands(self)
    def getOutputBandList(self, *args): return _pyossim.ossimImageSource_getOutputBandList(self, *args)
    def getOutputScalarType(self): return _pyossim.ossimImageSource_getOutputScalarType(self)
    def getTileWidth(self): return _pyossim.ossimImageSource_getTileWidth(self)
    def getTileHeight(self): return _pyossim.ossimImageSource_getTileHeight(self)
    def getNullPixelValue(self, band = 0): return _pyossim.ossimImageSource_getNullPixelValue(self, band)
    def getMinPixelValue(self, band = 0): return _pyossim.ossimImageSource_getMinPixelValue(self, band)
    def getMaxPixelValue(self, band = 0): return _pyossim.ossimImageSource_getMaxPixelValue(self, band)
    def getBoundingRect(self, *args): return _pyossim.ossimImageSource_getBoundingRect(self, *args)
    def saveState(self, *args): return _pyossim.ossimImageSource_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageSource_loadState(self, *args)
    def getValidImageVertices(self, *args): return _pyossim.ossimImageSource_getValidImageVertices(self, *args)
    def getImageGeometry(self): return _pyossim.ossimImageSource_getImageGeometry(self)
    def setImageGeometry(self, *args): return _pyossim.ossimImageSource_setImageGeometry(self, *args)
    def saveImageGeometry(self, *args): return _pyossim.ossimImageSource_saveImageGeometry(self, *args)
    def initialize(self): return _pyossim.ossimImageSource_initialize(self)
    def getProperty(self, *args): return _pyossim.ossimImageSource_getProperty(self, *args)
    def setProperty(self, *args): return _pyossim.ossimImageSource_setProperty(self, *args)
    def getPropertyNames(self, *args): return _pyossim.ossimImageSource_getPropertyNames(self, *args)
    def isIndexedData(self): return _pyossim.ossimImageSource_isIndexedData(self)
ossimImageSource_swigregister = _pyossim.ossimImageSource_swigregister
ossimImageSource_swigregister(ossimImageSource)

class ossimImageCombiner(ossimImageSource,ossimConnectableObjectListener):
    __swig_setmethods__ = {}
    for _s in [ossimImageSource,ossimConnectableObjectListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageCombiner, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimImageSource,ossimConnectableObjectListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageCombiner, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimImageCombiner(*args)
        try: self.this.append(this)
        except: self.this = this
    def getBoundingRect(self, resLevel = 0): return _pyossim.ossimImageCombiner_getBoundingRect(self, resLevel)
    def initialize(self): return _pyossim.ossimImageCombiner_initialize(self)
    def loadState(self, *args): return _pyossim.ossimImageCombiner_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimImageCombiner_saveState(self, *args)
    def updateRects(self): return _pyossim.ossimImageCombiner_updateRects(self)
    def getNumberOfInputBands(self): return _pyossim.ossimImageCombiner_getNumberOfInputBands(self)
    def getOutputScalarType(self): return _pyossim.ossimImageCombiner_getOutputScalarType(self)
    def getTileWidth(self): return _pyossim.ossimImageCombiner_getTileWidth(self)
    def getTileHeight(self): return _pyossim.ossimImageCombiner_getTileHeight(self)
    def getNullPixelValue(self, band = 0): return _pyossim.ossimImageCombiner_getNullPixelValue(self, band)
    def getMinPixelValue(self, band = 0): return _pyossim.ossimImageCombiner_getMinPixelValue(self, band)
    def getMaxPixelValue(self, band = 0): return _pyossim.ossimImageCombiner_getMaxPixelValue(self, band)
    def getNumberOfOverlappingImages(self, *args): return _pyossim.ossimImageCombiner_getNumberOfOverlappingImages(self, *args)
    def getOverlappingImages(self, *args): return _pyossim.ossimImageCombiner_getOverlappingImages(self, *args)
    def getNextTile(self, *args): return _pyossim.ossimImageCombiner_getNextTile(self, *args)
    def getNextNormTile(self, *args): return _pyossim.ossimImageCombiner_getNextNormTile(self, *args)
    def const_ossimConnectableObject_canConnectMyInputTo(self, *args): return _pyossim.ossimImageCombiner_const_ossimConnectableObject_canConnectMyInputTo(self, *args)
    def connectInputEvent(self, *args): return _pyossim.ossimImageCombiner_connectInputEvent(self, *args)
    def disconnectInputEvent(self, *args): return _pyossim.ossimImageCombiner_disconnectInputEvent(self, *args)
    def propertyEvent(self, *args): return _pyossim.ossimImageCombiner_propertyEvent(self, *args)
    def refreshEvent(self, *args): return _pyossim.ossimImageCombiner_refreshEvent(self, *args)
    def hasDifferentInputs(self): return _pyossim.ossimImageCombiner_hasDifferentInputs(self)
ossimImageCombiner_swigregister = _pyossim.ossimImageCombiner_swigregister
ossimImageCombiner_swigregister(ossimImageCombiner)

class ossimBandMergeSource(ossimImageCombiner):
    __swig_setmethods__ = {}
    for _s in [ossimImageCombiner]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimBandMergeSource, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimImageCombiner]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimBandMergeSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimBandMergeSource(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTile(self, *args): return _pyossim.ossimBandMergeSource_getTile(self, *args)
    def initialize(self): return _pyossim.ossimBandMergeSource_initialize(self)
    def getNumberOfOutputBands(self): return _pyossim.ossimBandMergeSource_getNumberOfOutputBands(self)
    def getNullPixelValue(self, band = 0): return _pyossim.ossimBandMergeSource_getNullPixelValue(self, band)
    def getMinPixelValue(self, band = 0): return _pyossim.ossimBandMergeSource_getMinPixelValue(self, band)
    def getMaxPixelValue(self, band = 0): return _pyossim.ossimBandMergeSource_getMaxPixelValue(self, band)
ossimBandMergeSource_swigregister = _pyossim.ossimBandMergeSource_swigregister
ossimBandMergeSource_swigregister(ossimBandMergeSource)

class ossimMemoryImageSource(ossimImageSource):
    __swig_setmethods__ = {}
    for _s in [ossimImageSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimMemoryImageSource, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimImageSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimMemoryImageSource, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimMemoryImageSource(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossimMemoryImageSource_dup(self)
    def setImage(self, *args): return _pyossim.ossimMemoryImageSource_setImage(self, *args)
    def setRect(self, *args): return _pyossim.ossimMemoryImageSource_setRect(self, *args)
    def getNumberOfInputBands(self): return _pyossim.ossimMemoryImageSource_getNumberOfInputBands(self)
    def getNumberOfOutputBands(self): return _pyossim.ossimMemoryImageSource_getNumberOfOutputBands(self)
    def getOutputScalarType(self): return _pyossim.ossimMemoryImageSource_getOutputScalarType(self)
    def getNullPixelValue(self, band = 0): return _pyossim.ossimMemoryImageSource_getNullPixelValue(self, band)
    def getMinPixelValue(self, band = 0): return _pyossim.ossimMemoryImageSource_getMinPixelValue(self, band)
    def getMaxPixelValue(self, band = 0): return _pyossim.ossimMemoryImageSource_getMaxPixelValue(self, band)
    def getBoundingRect(self, resLevel = 0): return _pyossim.ossimMemoryImageSource_getBoundingRect(self, resLevel)
    def getTile(self, *args): return _pyossim.ossimMemoryImageSource_getTile(self, *args)
    def const_ossimConnectableObject_canConnectMyInputTo(self, *args): return _pyossim.ossimMemoryImageSource_const_ossimConnectableObject_canConnectMyInputTo(self, *args)
    def initialize(self): return _pyossim.ossimMemoryImageSource_initialize(self)
    def getNumberOfDecimationLevels(self): return _pyossim.ossimMemoryImageSource_getNumberOfDecimationLevels(self)
    def getDecimationFactor(self, *args): return _pyossim.ossimMemoryImageSource_getDecimationFactor(self, *args)
    def getDecimationFactors(self, *args): return _pyossim.ossimMemoryImageSource_getDecimationFactors(self, *args)
    def getImageGeometry(self): return _pyossim.ossimMemoryImageSource_getImageGeometry(self)
    def setImageGeometry(self, *args): return _pyossim.ossimMemoryImageSource_setImageGeometry(self, *args)
    def saveState(self, *args): return _pyossim.ossimMemoryImageSource_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimMemoryImageSource_loadState(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimMemoryImageSource
    __del__ = lambda self : None;
ossimMemoryImageSource_swigregister = _pyossim.ossimMemoryImageSource_swigregister
ossimMemoryImageSource_swigregister(ossimMemoryImageSource)

class ossimElevationDatabaseFactoryBase(ossimObjectFactory):
    __swig_setmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevationDatabaseFactoryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevationDatabaseFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def createObject(self, *args): return _pyossim.ossimElevationDatabaseFactoryBase_createObject(self, *args)
    def createDatabase(self, *args): return _pyossim.ossimElevationDatabaseFactoryBase_createDatabase(self, *args)
    def open(self, *args): return _pyossim.ossimElevationDatabaseFactoryBase_open(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimElevationDatabaseFactoryBase
    __del__ = lambda self : None;
ossimElevationDatabaseFactoryBase_swigregister = _pyossim.ossimElevationDatabaseFactoryBase_swigregister
ossimElevationDatabaseFactoryBase_swigregister(ossimElevationDatabaseFactoryBase)

class ossimElevationDatabaseFactory(ossimElevationDatabaseFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ossimElevationDatabaseFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevationDatabaseFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimElevationDatabaseFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevationDatabaseFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimElevationDatabaseFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimElevationDatabaseFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimElevationDatabaseFactory_instance)
    def createDatabase(self, *args): return _pyossim.ossimElevationDatabaseFactory_createDatabase(self, *args)
    def open(self, *args): return _pyossim.ossimElevationDatabaseFactory_open(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimElevationDatabaseFactory_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimElevationDatabaseFactory
    __del__ = lambda self : None;
ossimElevationDatabaseFactory_swigregister = _pyossim.ossimElevationDatabaseFactory_swigregister
ossimElevationDatabaseFactory_swigregister(ossimElevationDatabaseFactory)

def ossimElevationDatabaseFactory_instance():
  return _pyossim.ossimElevationDatabaseFactory_instance()
ossimElevationDatabaseFactory_instance = _pyossim.ossimElevationDatabaseFactory_instance

class ossimElevSource(ossimSource):
    __swig_setmethods__ = {}
    for _s in [ossimSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevSource, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevSource, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def __set__(self, *args): return _pyossim.ossimElevSource___set__(self, *args)
    def getHeightAboveMSL(self, *args): return _pyossim.ossimElevSource_getHeightAboveMSL(self, *args)
    def getHeightAboveEllipsoid(self, *args): return _pyossim.ossimElevSource_getHeightAboveEllipsoid(self, *args)
    def intersectRay(self, *args): return _pyossim.ossimElevSource_intersectRay(self, *args)
    def getMinHeightAboveMSL(self): return _pyossim.ossimElevSource_getMinHeightAboveMSL(self)
    def getMaxHeightAboveMSL(self): return _pyossim.ossimElevSource_getMaxHeightAboveMSL(self)
    def getNullHeightValue(self): return _pyossim.ossimElevSource_getNullHeightValue(self)
    def getSeaLevelValue(self): return _pyossim.ossimElevSource_getSeaLevelValue(self)
    def pointHasCoverage(self, *args): return _pyossim.ossimElevSource_pointHasCoverage(self, *args)
    def getMeanSpacingMeters(self): return _pyossim.ossimElevSource_getMeanSpacingMeters(self)
    def getAccuracyLE90(self, *args): return _pyossim.ossimElevSource_getAccuracyLE90(self, *args)
    def getAccuracyCE90(self, *args): return _pyossim.ossimElevSource_getAccuracyCE90(self, *args)
    def getBoundingGndRect(self): return _pyossim.ossimElevSource_getBoundingGndRect(self)
    def const_ossimConnectableObject_canConnectMyInputTo(self, *args): return _pyossim.ossimElevSource_const_ossimConnectableObject_canConnectMyInputTo(self, *args)
    def initialize(self): return _pyossim.ossimElevSource_initialize(self)
    def getComputeStatisticsFlag(self): return _pyossim.ossimElevSource_getComputeStatisticsFlag(self)
    def setComputeStatisticsFlag(self, *args): return _pyossim.ossimElevSource_setComputeStatisticsFlag(self, *args)
ossimElevSource_swigregister = _pyossim.ossimElevSource_swigregister
ossimElevSource_swigregister(ossimElevSource)

class ossimElevationDatabase(ossimElevSource):
    __swig_setmethods__ = {}
    for _s in [ossimElevSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevationDatabase, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimElevSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevationDatabase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def __set__(self, *args): return _pyossim.ossimElevationDatabase___set__(self, *args)
    def getMeanSpacingMeters(self): return _pyossim.ossimElevationDatabase_getMeanSpacingMeters(self)
    def setGeoid(self, *args): return _pyossim.ossimElevationDatabase_setGeoid(self, *args)
    def getGeoid(self): return _pyossim.ossimElevationDatabase_getGeoid(self)
    def const_ossimElevationDatabase_getGeoid(self): return _pyossim.ossimElevationDatabase_const_ossimElevationDatabase_getGeoid(self)
    def ossimElevationDatabase_open(self, *args): return _pyossim.ossimElevationDatabase_ossimElevationDatabase_open(self, *args)
    def getConnectionString(self): return _pyossim.ossimElevationDatabase_getConnectionString(self)
    def getOpenCellList(self, *args): return _pyossim.ossimElevationDatabase_getOpenCellList(self, *args)
    def loadState(self, *args): return _pyossim.ossimElevationDatabase_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimElevationDatabase_saveState(self, *args)
ossimElevationDatabase_swigregister = _pyossim.ossimElevationDatabase_swigregister
ossimElevationDatabase_swigregister(ossimElevationDatabase)

class ossimElevCellHandler(ossimElevSource):
    __swig_setmethods__ = {}
    for _s in [ossimElevSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevCellHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimElevSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevCellHandler, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def __set__(self, *args): return _pyossim.ossimElevCellHandler___set__(self, *args)
    def getFilename(self): return _pyossim.ossimElevCellHandler_getFilename(self)
    def getSizeOfElevCell(self): return _pyossim.ossimElevCellHandler_getSizeOfElevCell(self)
    def getPostValue(self, *args): return _pyossim.ossimElevCellHandler_getPostValue(self, *args)
    def getMeanSpacingMeters(self): return _pyossim.ossimElevCellHandler_getMeanSpacingMeters(self)
    def pointHasCoverage(self, *args): return _pyossim.ossimElevCellHandler_pointHasCoverage(self, *args)
    def getAccuracyLE90(self, *args): return _pyossim.ossimElevCellHandler_getAccuracyLE90(self, *args)
    def getAccuracyCE90(self, *args): return _pyossim.ossimElevCellHandler_getAccuracyCE90(self, *args)
    def const_ossimConnectableObject_canConnectMyInputTo(self, *args): return _pyossim.ossimElevCellHandler_const_ossimConnectableObject_canConnectMyInputTo(self, *args)
    def close(self): return _pyossim.ossimElevCellHandler_close(self)
    def open(self, *args): return _pyossim.ossimElevCellHandler_open(self, *args)
ossimElevCellHandler_swigregister = _pyossim.ossimElevCellHandler_swigregister
ossimElevCellHandler_swigregister(ossimElevCellHandler)

class ossimDtedHandler(ossimElevCellHandler):
    __swig_setmethods__ = {}
    for _s in [ossimElevCellHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDtedHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimElevCellHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDtedHandler, name)
    __repr__ = _swig_repr
    TOTAL_POSTS = _pyossim.ossimDtedHandler_TOTAL_POSTS
    NUM_POSTS_PER_BLOCK = _pyossim.ossimDtedHandler_NUM_POSTS_PER_BLOCK
    def __init__(self, *args): 
        this = _pyossim.new_ossimDtedHandler(*args)
        try: self.this.append(this)
        except: self.this = this
    DATA_RECORD_OFFSET_TO_POST = _pyossim.ossimDtedHandler_DATA_RECORD_OFFSET_TO_POST
    DATA_RECORD_CHECKSUM_SIZE = _pyossim.ossimDtedHandler_DATA_RECORD_CHECKSUM_SIZE
    POST_SIZE = _pyossim.ossimDtedHandler_POST_SIZE
    NULL_POST = _pyossim.ossimDtedHandler_NULL_POST
    def open(self, *args): return _pyossim.ossimDtedHandler_open(self, *args)
    def close(self): return _pyossim.ossimDtedHandler_close(self)
    def getHeightAboveMSL(self, *args): return _pyossim.ossimDtedHandler_getHeightAboveMSL(self, *args)
    def getSizeOfElevCell(self): return _pyossim.ossimDtedHandler_getSizeOfElevCell(self)
    def getPostValue(self, *args): return _pyossim.ossimDtedHandler_getPostValue(self, *args)
    def edition(self): return _pyossim.ossimDtedHandler_edition(self)
    def productLevel(self): return _pyossim.ossimDtedHandler_productLevel(self)
    def compilationDate(self): return _pyossim.ossimDtedHandler_compilationDate(self)
    def isOpen(self): return _pyossim.ossimDtedHandler_isOpen(self)
    def vol(self): return _pyossim.ossimDtedHandler_vol(self)
    def hdr(self): return _pyossim.ossimDtedHandler_hdr(self)
    def uhl(self): return _pyossim.ossimDtedHandler_uhl(self)
    def dsi(self): return _pyossim.ossimDtedHandler_dsi(self)
    def acc(self): return _pyossim.ossimDtedHandler_acc(self)
ossimDtedHandler_swigregister = _pyossim.ossimDtedHandler_swigregister
ossimDtedHandler_swigregister(ossimDtedHandler)

class ossimBitMaskWriter(ossimOutputSource):
    __swig_setmethods__ = {}
    for _s in [ossimOutputSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimBitMaskWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimOutputSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimBitMaskWriter, name)
    __repr__ = _swig_repr
    __swig_setmethods__["BM_STARTING_RLEVEL_KW"] = _pyossim.ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_set
    __swig_getmethods__["BM_STARTING_RLEVEL_KW"] = _pyossim.ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_get
    if _newclass:BM_STARTING_RLEVEL_KW = _swig_property(_pyossim.ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_get, _pyossim.ossimBitMaskWriter_BM_STARTING_RLEVEL_KW_set)
    __swig_setmethods__["MASK_FILE_MAGIC_NUMBER"] = _pyossim.ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_set
    __swig_getmethods__["MASK_FILE_MAGIC_NUMBER"] = _pyossim.ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_get
    if _newclass:MASK_FILE_MAGIC_NUMBER = _swig_property(_pyossim.ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_get, _pyossim.ossimBitMaskWriter_MASK_FILE_MAGIC_NUMBER_set)
    def __init__(self): 
        this = _pyossim.new_ossimBitMaskWriter()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimBitMaskWriter
    __del__ = lambda self : None;
    def setBogusPixel(self, *args): return _pyossim.ossimBitMaskWriter_setBogusPixel(self, *args)
    def setBogusPixelRange(self, *args): return _pyossim.ossimBitMaskWriter_setBogusPixelRange(self, *args)
    def setStartingResLevel(self, *args): return _pyossim.ossimBitMaskWriter_setStartingResLevel(self, *args)
    def generateMask(self, *args): return _pyossim.ossimBitMaskWriter_generateMask(self, *args)
    def buildOverviews(self, *args): return _pyossim.ossimBitMaskWriter_buildOverviews(self, *args)
    def loadState(self, *args): return _pyossim.ossimBitMaskWriter_loadState(self, *args)
    def isOpen(self): return _pyossim.ossimBitMaskWriter_isOpen(self)
    def open(self): return _pyossim.ossimBitMaskWriter_open(self)
    def close(self): return _pyossim.ossimBitMaskWriter_close(self)
    def const_ossimConnectableObject_canConnectMyInputTo(self, *args): return _pyossim.ossimBitMaskWriter_const_ossimConnectableObject_canConnectMyInputTo(self, *args)
    def connectMyInputTo(self, *args): return _pyossim.ossimBitMaskWriter_connectMyInputTo(self, *args)
ossimBitMaskWriter_swigregister = _pyossim.ossimBitMaskWriter_swigregister
ossimBitMaskWriter_swigregister(ossimBitMaskWriter)

class ossimFilterResampler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFilterResampler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFilterResampler, name)
    __repr__ = _swig_repr
    ossimFilterResampler_NEAREST_NEIGHBOR = _pyossim.ossimFilterResampler_ossimFilterResampler_NEAREST_NEIGHBOR
    ossimFilterResampler_BOX = _pyossim.ossimFilterResampler_ossimFilterResampler_BOX
    ossimFilterResampler_GAUSSIAN = _pyossim.ossimFilterResampler_ossimFilterResampler_GAUSSIAN
    ossimFilterResampler_CUBIC = _pyossim.ossimFilterResampler_ossimFilterResampler_CUBIC
    ossimFilterResampler_HANNING = _pyossim.ossimFilterResampler_ossimFilterResampler_HANNING
    ossimFilterResampler_HAMMING = _pyossim.ossimFilterResampler_ossimFilterResampler_HAMMING
    ossimFilterResampler_LANCZOS = _pyossim.ossimFilterResampler_ossimFilterResampler_LANCZOS
    ossimFilterResampler_MITCHELL = _pyossim.ossimFilterResampler_ossimFilterResampler_MITCHELL
    ossimFilterResampler_CATROM = _pyossim.ossimFilterResampler_ossimFilterResampler_CATROM
    ossimFilterResampler_BLACKMAN = _pyossim.ossimFilterResampler_ossimFilterResampler_BLACKMAN
    ossimFilterResampler_BLACKMAN_SINC = _pyossim.ossimFilterResampler_ossimFilterResampler_BLACKMAN_SINC
    ossimFilterResampler_BLACKMAN_BESSEL = _pyossim.ossimFilterResampler_ossimFilterResampler_BLACKMAN_BESSEL
    ossimFilterResampler_QUADRATIC = _pyossim.ossimFilterResampler_ossimFilterResampler_QUADRATIC
    ossimFilterResampler_TRIANGLE = _pyossim.ossimFilterResampler_ossimFilterResampler_TRIANGLE
    ossimFilterResampler_BILINEAR = _pyossim.ossimFilterResampler_ossimFilterResampler_BILINEAR
    ossimFilterResampler_HERMITE = _pyossim.ossimFilterResampler_ossimFilterResampler_HERMITE
    ossimFilterResampler_BELL = _pyossim.ossimFilterResampler_ossimFilterResampler_BELL
    ossimFilterResampler_BSPLINE = _pyossim.ossimFilterResampler_ossimFilterResampler_BSPLINE
    def __init__(self): 
        this = _pyossim.new_ossimFilterResampler()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimFilterResampler
    __del__ = lambda self : None;
    def resample(self, *args): return _pyossim.ossimFilterResampler_resample(self, *args)
    def setFilterType(self, *args): return _pyossim.ossimFilterResampler_setFilterType(self, *args)
    def setMinifyFilterType(self, *args): return _pyossim.ossimFilterResampler_setMinifyFilterType(self, *args)
    def setMagnifyFilterType(self, *args): return _pyossim.ossimFilterResampler_setMagnifyFilterType(self, *args)
    def getMinifyFilterTypeAsString(self): return _pyossim.ossimFilterResampler_getMinifyFilterTypeAsString(self)
    def getMagnifyFilterTypeAsString(self): return _pyossim.ossimFilterResampler_getMagnifyFilterTypeAsString(self)
    def setScaleFactor(self, *args): return _pyossim.ossimFilterResampler_setScaleFactor(self, *args)
    def setBlurFactor(self, *args): return _pyossim.ossimFilterResampler_setBlurFactor(self, *args)
    def setBoundingInputRect(self, *args): return _pyossim.ossimFilterResampler_setBoundingInputRect(self, *args)
    def getBoundingInputRect(self): return _pyossim.ossimFilterResampler_getBoundingInputRect(self)
    def getBlurFactor(self): return _pyossim.ossimFilterResampler_getBlurFactor(self)
    def getScaleFactor(self): return _pyossim.ossimFilterResampler_getScaleFactor(self)
    def saveState(self, *args): return _pyossim.ossimFilterResampler_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimFilterResampler_loadState(self, *args)
    def getKernelSupport(self, *args): return _pyossim.ossimFilterResampler_getKernelSupport(self, *args)
    def getFilterTypes(self, *args): return _pyossim.ossimFilterResampler_getFilterTypes(self, *args)
ossimFilterResampler_swigregister = _pyossim.ossimFilterResampler_swigregister
ossimFilterResampler_swigregister(ossimFilterResampler)

class ossimFilterTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFilterTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFilterTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimFilterTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimFilterTable
    __del__ = lambda self : None;
    def buildTable(self, *args): return _pyossim.ossimFilterTable_buildTable(self, *args)
    def getWidthByHeight(self): return _pyossim.ossimFilterTable_getWidthByHeight(self)
    def getXSupport(self): return _pyossim.ossimFilterTable_getXSupport(self)
    def getYSupport(self): return _pyossim.ossimFilterTable_getYSupport(self)
    def getWidth(self): return _pyossim.ossimFilterTable_getWidth(self)
    def getHeight(self): return _pyossim.ossimFilterTable_getHeight(self)
    def getClosestWeights(self, *args): return _pyossim.ossimFilterTable_getClosestWeights(self, *args)
ossimFilterTable_swigregister = _pyossim.ossimFilterTable_swigregister
ossimFilterTable_swigregister(ossimFilterTable)

class ossimKeyword(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimKeyword, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimKeyword, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimKeyword(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimKeyword
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyossim.ossimKeyword___set__(self, *args)
    def const_operator_char_ptr(self): return _pyossim.ossimKeyword_const_operator_char_ptr(self)
    def key(self): return _pyossim.ossimKeyword_key(self)
    def description(self): return _pyossim.ossimKeyword_description(self)
    def value(self): return _pyossim.ossimKeyword_value(self)
    def keyString(self): return _pyossim.ossimKeyword_keyString(self)
    def descriptionString(self): return _pyossim.ossimKeyword_descriptionString(self)
    def valueString(self): return _pyossim.ossimKeyword_valueString(self)
    def setValue(self, *args): return _pyossim.ossimKeyword_setValue(self, *args)
    def setDescription(self, *args): return _pyossim.ossimKeyword_setDescription(self, *args)
ossimKeyword_swigregister = _pyossim.ossimKeyword_swigregister
ossimKeyword_swigregister(ossimKeyword)

ossimKeywordlist_HEADER = _pyossim.ossimKeywordlist_HEADER
class ossimKeywordlist(ossimErrorStatusInterface,ossimReferenced):
    __swig_setmethods__ = {}
    for _s in [ossimErrorStatusInterface,ossimReferenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimKeywordlist, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimErrorStatusInterface,ossimReferenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimKeywordlist, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimKeywordlist(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimKeywordlist
    __del__ = lambda self : None;
    def addFile(self, *args): return _pyossim.ossimKeywordlist_addFile(self, *args)
    def change_delimiter(self, *args): return _pyossim.ossimKeywordlist_change_delimiter(self, *args)
    def delimiter_str(self): return _pyossim.ossimKeywordlist_delimiter_str(self)
    def setExpandEnvVarsFlag(self, *args): return _pyossim.ossimKeywordlist_setExpandEnvVarsFlag(self, *args)
    def getExpandEnvVarsFlag(self): return _pyossim.ossimKeywordlist_getExpandEnvVarsFlag(self)
    def addPair(self, *args): return _pyossim.ossimKeywordlist_addPair(self, *args)
    def add(self, *args): return _pyossim.ossimKeywordlist_add(self, *args)
    def findKey(self, *args): return _pyossim.ossimKeywordlist_findKey(self, *args)
    def find(self, *args): return _pyossim.ossimKeywordlist_find(self, *args)
    def remove(self, *args): return _pyossim.ossimKeywordlist_remove(self, *args)
    def numberOf(self, *args): return _pyossim.ossimKeywordlist_numberOf(self, *args)
    def write(self, *args): return _pyossim.ossimKeywordlist_write(self, *args)
    def toString(self, *args): return _pyossim.ossimKeywordlist_toString(self, *args)
    def writeToStream(self, *args): return _pyossim.ossimKeywordlist_writeToStream(self, *args)
    def ossimErrorStatusInterface_print(self, *args): return _pyossim.ossimKeywordlist_ossimErrorStatusInterface_print(self, *args)
    def __eq__(self, *args): return _pyossim.ossimKeywordlist___eq__(self, *args)
    def clear(self): return _pyossim.ossimKeywordlist_clear(self)
    def addList(self, *args): return _pyossim.ossimKeywordlist_addList(self, *args)
    def parseStream(self, *args): return _pyossim.ossimKeywordlist_parseStream(self, *args)
    def parseString(self, *args): return _pyossim.ossimKeywordlist_parseString(self, *args)
    def findAllKeysThatContains(self, *args): return _pyossim.ossimKeywordlist_findAllKeysThatContains(self, *args)
    def findAllKeysThatMatch(self, *args): return _pyossim.ossimKeywordlist_findAllKeysThatMatch(self, *args)
    def extractKeysThatMatch(self, *args): return _pyossim.ossimKeywordlist_extractKeysThatMatch(self, *args)
    def removeKeysThatMatch(self, *args): return _pyossim.ossimKeywordlist_removeKeysThatMatch(self, *args)
    def getSubstringKeyList(self, *args): return _pyossim.ossimKeywordlist_getSubstringKeyList(self, *args)
    def getNumberOfSubstringKeys(self, *args): return _pyossim.ossimKeywordlist_getNumberOfSubstringKeys(self, *args)
    def addPrefixToAll(self, *args): return _pyossim.ossimKeywordlist_addPrefixToAll(self, *args)
    def addPrefixToKeysThatMatch(self, *args): return _pyossim.ossimKeywordlist_addPrefixToKeysThatMatch(self, *args)
    def stripPrefixFromAll(self, *args): return _pyossim.ossimKeywordlist_stripPrefixFromAll(self, *args)
    def getSize(self): return _pyossim.ossimKeywordlist_getSize(self)
    def getMap(self, *args): return _pyossim.ossimKeywordlist_getMap(self, *args)
    def downcaseKeywords(self): return _pyossim.ossimKeywordlist_downcaseKeywords(self)
    def upcaseKeywords(self): return _pyossim.ossimKeywordlist_upcaseKeywords(self)
    def trimAllValues(self, *args): return _pyossim.ossimKeywordlist_trimAllValues(self, *args)
    def const_trimAllValues(self, *args): return _pyossim.ossimKeywordlist_const_trimAllValues(self, *args)
    def getBoolKeywordValue(self, *args): return _pyossim.ossimKeywordlist_getBoolKeywordValue(self, *args)
ossimKeywordlist_swigregister = _pyossim.ossimKeywordlist_swigregister
ossimKeywordlist_swigregister(ossimKeywordlist)
DEFAULT_DELIMITER = cvar.DEFAULT_DELIMITER

class vectorOssimFileName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorOssimFileName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorOssimFileName, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyossim.vectorOssimFileName_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyossim.vectorOssimFileName___nonzero__(self)
    def __bool__(self): return _pyossim.vectorOssimFileName___bool__(self)
    def __len__(self): return _pyossim.vectorOssimFileName___len__(self)
    def pop(self): return _pyossim.vectorOssimFileName_pop(self)
    def __getslice__(self, *args): return _pyossim.vectorOssimFileName___getslice__(self, *args)
    def __setslice__(self, *args): return _pyossim.vectorOssimFileName___setslice__(self, *args)
    def __delslice__(self, *args): return _pyossim.vectorOssimFileName___delslice__(self, *args)
    def __delitem__(self, *args): return _pyossim.vectorOssimFileName___delitem__(self, *args)
    def __getitem__(self, *args): return _pyossim.vectorOssimFileName___getitem__(self, *args)
    def __setitem__(self, *args): return _pyossim.vectorOssimFileName___setitem__(self, *args)
    def append(self, *args): return _pyossim.vectorOssimFileName_append(self, *args)
    def empty(self): return _pyossim.vectorOssimFileName_empty(self)
    def size(self): return _pyossim.vectorOssimFileName_size(self)
    def clear(self): return _pyossim.vectorOssimFileName_clear(self)
    def swap(self, *args): return _pyossim.vectorOssimFileName_swap(self, *args)
    def get_allocator(self): return _pyossim.vectorOssimFileName_get_allocator(self)
    def begin(self): return _pyossim.vectorOssimFileName_begin(self)
    def end(self): return _pyossim.vectorOssimFileName_end(self)
    def rbegin(self): return _pyossim.vectorOssimFileName_rbegin(self)
    def rend(self): return _pyossim.vectorOssimFileName_rend(self)
    def pop_back(self): return _pyossim.vectorOssimFileName_pop_back(self)
    def erase(self, *args): return _pyossim.vectorOssimFileName_erase(self, *args)
    def __init__(self, *args): 
        this = _pyossim.new_vectorOssimFileName(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyossim.vectorOssimFileName_push_back(self, *args)
    def front(self): return _pyossim.vectorOssimFileName_front(self)
    def back(self): return _pyossim.vectorOssimFileName_back(self)
    def assign(self, *args): return _pyossim.vectorOssimFileName_assign(self, *args)
    def resize(self, *args): return _pyossim.vectorOssimFileName_resize(self, *args)
    def insert(self, *args): return _pyossim.vectorOssimFileName_insert(self, *args)
    def reserve(self, *args): return _pyossim.vectorOssimFileName_reserve(self, *args)
    def capacity(self): return _pyossim.vectorOssimFileName_capacity(self)
    __swig_destroy__ = _pyossim.delete_vectorOssimFileName
    __del__ = lambda self : None;
vectorOssimFileName_swigregister = _pyossim.vectorOssimFileName_swigregister
vectorOssimFileName_swigregister(vectorOssimFileName)

class ossimGeneralRasterInfo(ossimObject,ossimErrorStatusInterface):
    __swig_setmethods__ = {}
    for _s in [ossimObject,ossimErrorStatusInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeneralRasterInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject,ossimErrorStatusInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeneralRasterInfo, name)
    __repr__ = _swig_repr
    NONE = _pyossim.ossimGeneralRasterInfo_NONE
    ZEROES_TO_MIN = _pyossim.ossimGeneralRasterInfo_ZEROES_TO_MIN
    ZEROES_TO_NULL_EDGES_ONLY = _pyossim.ossimGeneralRasterInfo_ZEROES_TO_NULL_EDGES_ONLY
    UNKNOWN = _pyossim.ossimGeneralRasterInfo_UNKNOWN
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeneralRasterInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimGeneralRasterInfo
    __del__ = lambda self : None;
    def imageRect(self): return _pyossim.ossimGeneralRasterInfo_imageRect(self)
    def validImageRect(self): return _pyossim.ossimGeneralRasterInfo_validImageRect(self)
    def rawImageRect(self): return _pyossim.ossimGeneralRasterInfo_rawImageRect(self)
    def subImageOffset(self): return _pyossim.ossimGeneralRasterInfo_subImageOffset(self)
    def headerSize(self): return _pyossim.ossimGeneralRasterInfo_headerSize(self)
    def fillToNullsMode(self): return _pyossim.ossimGeneralRasterInfo_fillToNullsMode(self)
    def setFillToNullsMode(self, *args): return _pyossim.ossimGeneralRasterInfo_setFillToNullsMode(self, *args)
    def setMinPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_setMinPixelValue(self, *args)
    def getMinPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_getMinPixelValue(self, *args)
    def setMaxPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_setMaxPixelValue(self, *args)
    def getMaxPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_getMaxPixelValue(self, *args)
    def setNullPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_setNullPixelValue(self, *args)
    def getNullPixelValue(self, *args): return _pyossim.ossimGeneralRasterInfo_getNullPixelValue(self, *args)
    def setNumberOfBands(self, *args): return _pyossim.ossimGeneralRasterInfo_setNumberOfBands(self, *args)
    def pixelsToChop(self): return _pyossim.ossimGeneralRasterInfo_pixelsToChop(self)
    def numberOfBands(self): return _pyossim.ossimGeneralRasterInfo_numberOfBands(self)
    def interleaveType(self): return _pyossim.ossimGeneralRasterInfo_interleaveType(self)
    def getScalarType(self): return _pyossim.ossimGeneralRasterInfo_getScalarType(self)
    def validLines(self): return _pyossim.ossimGeneralRasterInfo_validLines(self)
    def rawLines(self): return _pyossim.ossimGeneralRasterInfo_rawLines(self)
    def bytesPerRawLine(self): return _pyossim.ossimGeneralRasterInfo_bytesPerRawLine(self)
    def bytesPerValidLine(self): return _pyossim.ossimGeneralRasterInfo_bytesPerValidLine(self)
    def validSamples(self): return _pyossim.ossimGeneralRasterInfo_validSamples(self)
    def rawSamples(self): return _pyossim.ossimGeneralRasterInfo_rawSamples(self)
    def offsetToFirstValidSample(self): return _pyossim.ossimGeneralRasterInfo_offsetToFirstValidSample(self)
    def getImageFileList(self): return _pyossim.ossimGeneralRasterInfo_getImageFileList(self)
    def setImageFileList(self, *args): return _pyossim.ossimGeneralRasterInfo_setImageFileList(self, *args)
    def setHeaderSize(self, *args): return _pyossim.ossimGeneralRasterInfo_setHeaderSize(self, *args)
    def setInterleaveType(self, *args): return _pyossim.ossimGeneralRasterInfo_setInterleaveType(self, *args)
    def ossimGeneralRasterInfo_print(self, *args): return _pyossim.ossimGeneralRasterInfo_ossimGeneralRasterInfo_print(self, *args)
    def setImageRect(self, *args): return _pyossim.ossimGeneralRasterInfo_setImageRect(self, *args)
    def setValidImageRect(self, *args): return _pyossim.ossimGeneralRasterInfo_setValidImageRect(self, *args)
    def setRawImageRect(self, *args): return _pyossim.ossimGeneralRasterInfo_setRawImageRect(self, *args)
    def setSubImageOffset(self, *args): return _pyossim.ossimGeneralRasterInfo_setSubImageOffset(self, *args)
    def bytesPerPixel(self, *args): return _pyossim.ossimGeneralRasterInfo_bytesPerPixel(self, *args)
    def getImageDataByteOrder(self): return _pyossim.ossimGeneralRasterInfo_getImageDataByteOrder(self)
    def setImageDataByteOrder(self, *args): return _pyossim.ossimGeneralRasterInfo_setImageDataByteOrder(self, *args)
    def saveState(self, *args): return _pyossim.ossimGeneralRasterInfo_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimGeneralRasterInfo_loadState(self, *args)
ossimGeneralRasterInfo_swigregister = _pyossim.ossimGeneralRasterInfo_swigregister
ossimGeneralRasterInfo_swigregister(ossimGeneralRasterInfo)

class ossimGeoAnnotationObject(ossimAnnotationObject):
    __swig_setmethods__ = {}
    for _s in [ossimAnnotationObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoAnnotationObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimAnnotationObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoAnnotationObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def transform(self, *args): return _pyossim.ossimGeoAnnotationObject_transform(self, *args)
    def saveState(self, *args): return _pyossim.ossimGeoAnnotationObject_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimGeoAnnotationObject_loadState(self, *args)
ossimGeoAnnotationObject_swigregister = _pyossim.ossimGeoAnnotationObject_swigregister
ossimGeoAnnotationObject_swigregister(ossimGeoAnnotationObject)

class ossimGeoAnnotationMultiEllipseObject(ossimGeoAnnotationObject):
    __swig_setmethods__ = {}
    for _s in [ossimGeoAnnotationObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGeoAnnotationMultiEllipseObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimGeoAnnotationObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGeoAnnotationMultiEllipseObject, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimGeoAnnotationMultiEllipseObject(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossimGeoAnnotationMultiEllipseObject_dup(self)
    def getNewClippedObject(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_getNewClippedObject(self, *args)
    def transform(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_transform(self, *args)
    def applyScale(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_applyScale(self, *args)
    def draw(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_draw(self, *args)
    def intersects(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_intersects(self, *args)
    def addPoint(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_addPoint(self, *args)
    def setColor(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_setColor(self, *args)
    def setThickness(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_setThickness(self, *args)
    def setPoint(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_setPoint(self, *args)
    def setWidthHeight(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_setWidthHeight(self, *args)
    def resize(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_resize(self, *args)
    def setFillFlag(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_setFillFlag(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_ossimObject_print(self, *args)
    def getBoundingRect(self, *args): return _pyossim.ossimGeoAnnotationMultiEllipseObject_getBoundingRect(self, *args)
    def computeBoundingRect(self): return _pyossim.ossimGeoAnnotationMultiEllipseObject_computeBoundingRect(self)
    __swig_destroy__ = _pyossim.delete_ossimGeoAnnotationMultiEllipseObject
    __del__ = lambda self : None;
ossimGeoAnnotationMultiEllipseObject_swigregister = _pyossim.ossimGeoAnnotationMultiEllipseObject_swigregister
ossimGeoAnnotationMultiEllipseObject_swigregister(ossimGeoAnnotationMultiEllipseObject)

class ossimGridRemapEngineFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimGridRemapEngineFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimGridRemapEngineFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["create"] = lambda x: _pyossim.ossimGridRemapEngineFactory_create
    if _newclass:create = staticmethod(_pyossim.ossimGridRemapEngineFactory_create)
    __swig_destroy__ = _pyossim.delete_ossimGridRemapEngineFactory
    __del__ = lambda self : None;
ossimGridRemapEngineFactory_swigregister = _pyossim.ossimGridRemapEngineFactory_swigregister
ossimGridRemapEngineFactory_swigregister(ossimGridRemapEngineFactory)

def ossimGridRemapEngineFactory_create(*args):
  return _pyossim.ossimGridRemapEngineFactory_create(*args)
ossimGridRemapEngineFactory_create = _pyossim.ossimGridRemapEngineFactory_create

class ossimImageSourceFilter(ossimImageSource,ossimConnectableObjectListener):
    __swig_setmethods__ = {}
    for _s in [ossimImageSource,ossimConnectableObjectListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageSourceFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimImageSource,ossimConnectableObjectListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageSourceFilter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimImageSourceFilter(*args)
        try: self.this.append(this)
        except: self.this = this
    def getOutputBandList(self, *args): return _pyossim.ossimImageSourceFilter_getOutputBandList(self, *args)
    def getNumberOfInputBands(self): return _pyossim.ossimImageSourceFilter_getNumberOfInputBands(self)
    def initialize(self): return _pyossim.ossimImageSourceFilter_initialize(self)
    def loadState(self, *args): return _pyossim.ossimImageSourceFilter_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimImageSourceFilter_saveState(self, *args)
    def const_ossimConnectableObject_canConnectMyInputTo(self, *args): return _pyossim.ossimImageSourceFilter_const_ossimConnectableObject_canConnectMyInputTo(self, *args)
    def connectInputEvent(self, *args): return _pyossim.ossimImageSourceFilter_connectInputEvent(self, *args)
    def disconnectInputEvent(self, *args): return _pyossim.ossimImageSourceFilter_disconnectInputEvent(self, *args)
    def propertyEvent(self, *args): return _pyossim.ossimImageSourceFilter_propertyEvent(self, *args)
    def refreshEvent(self, *args): return _pyossim.ossimImageSourceFilter_refreshEvent(self, *args)
    def setProperty(self, *args): return _pyossim.ossimImageSourceFilter_setProperty(self, *args)
    def getProperty(self, *args): return _pyossim.ossimImageSourceFilter_getProperty(self, *args)
    def getPropertyNames(self, *args): return _pyossim.ossimImageSourceFilter_getPropertyNames(self, *args)
ossimImageSourceFilter_swigregister = _pyossim.ossimImageSourceFilter_swigregister
ossimImageSourceFilter_swigregister(ossimImageSourceFilter)

class ossimHistoMatchRemapper(ossimImageSourceFilter):
    __swig_setmethods__ = {}
    for _s in [ossimImageSourceFilter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimHistoMatchRemapper, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimImageSourceFilter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimHistoMatchRemapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimHistoMatchRemapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTile(self, *args): return _pyossim.ossimHistoMatchRemapper_getTile(self, *args)
    def initialize(self): return _pyossim.ossimHistoMatchRemapper_initialize(self)
    def getInputMeanValues(self): return _pyossim.ossimHistoMatchRemapper_getInputMeanValues(self)
    def getInputSigmaValues(self): return _pyossim.ossimHistoMatchRemapper_getInputSigmaValues(self)
    def getTargetMeanValues(self): return _pyossim.ossimHistoMatchRemapper_getTargetMeanValues(self)
    def getTargetSigmaValues(self): return _pyossim.ossimHistoMatchRemapper_getTargetSigmaValues(self)
    def setInputMeanValues(self, *args): return _pyossim.ossimHistoMatchRemapper_setInputMeanValues(self, *args)
    def setInputSigmaValues(self, *args): return _pyossim.ossimHistoMatchRemapper_setInputSigmaValues(self, *args)
    def setTargetMeanValues(self, *args): return _pyossim.ossimHistoMatchRemapper_setTargetMeanValues(self, *args)
    def setTargetSigmaValues(self, *args): return _pyossim.ossimHistoMatchRemapper_setTargetSigmaValues(self, *args)
    def loadState(self, *args): return _pyossim.ossimHistoMatchRemapper_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimHistoMatchRemapper_saveState(self, *args)
ossimHistoMatchRemapper_swigregister = _pyossim.ossimHistoMatchRemapper_swigregister
ossimHistoMatchRemapper_swigregister(ossimHistoMatchRemapper)

class ossimIgenGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimIgenGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimIgenGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, input = None, output = None, view = None): 
        this = _pyossim.new_ossimIgenGenerator(input, output, view)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimIgenGenerator
    __del__ = lambda self : None;
    def setInput(self, *args): return _pyossim.ossimIgenGenerator_setInput(self, *args)
    def generateSpecList(self, outputToFileFlag = False): return _pyossim.ossimIgenGenerator_generateSpecList(self, outputToFileFlag)
    def getImageFilenamesFromSpecList(self, *args): return _pyossim.ossimIgenGenerator_getImageFilenamesFromSpecList(self, *args)
    def getBoundingGround(self): return _pyossim.ossimIgenGenerator_getBoundingGround(self)
    def executeSpecList(self): return _pyossim.ossimIgenGenerator_executeSpecList(self)
    def setIteratorsToStart(self): return _pyossim.ossimIgenGenerator_setIteratorsToStart(self)
    def nextSpecFile(self, *args): return _pyossim.ossimIgenGenerator_nextSpecFile(self, *args)
    def getSpecs(self, *args): return _pyossim.ossimIgenGenerator_getSpecs(self, *args)
    def getNumberOfSpecFiles(self): return _pyossim.ossimIgenGenerator_getNumberOfSpecFiles(self)
    def getSpecFilename(self, specFileIndex = 0): return _pyossim.ossimIgenGenerator_getSpecFilename(self, specFileIndex)
    def buildExe(self, i = 0): return _pyossim.ossimIgenGenerator_buildExe(self, i)
    def getSpec(self, *args): return _pyossim.ossimIgenGenerator_getSpec(self, *args)
    def getInput(self, *args): return _pyossim.ossimIgenGenerator_getInput(self, *args)
    def getOutput(self, *args): return _pyossim.ossimIgenGenerator_getOutput(self, *args)
    def getView(self, *args): return _pyossim.ossimIgenGenerator_getView(self, *args)
    def setView(self, *args): return _pyossim.ossimIgenGenerator_setView(self, *args)
    def setOutput(self, *args): return _pyossim.ossimIgenGenerator_setOutput(self, *args)
    def ossimIgenGenerator_setOutput(self, *args): return _pyossim.ossimIgenGenerator_ossimIgenGenerator_setOutput(self, *args)
    def setSpecFileLocation(self, *args): return _pyossim.ossimIgenGenerator_setSpecFileLocation(self, *args)
    def getSpecFileLocation(self): return _pyossim.ossimIgenGenerator_getSpecFileLocation(self)
    def setIgenExecutable(self, *args): return _pyossim.ossimIgenGenerator_setIgenExecutable(self, *args)
    def getIgenExecutable(self): return _pyossim.ossimIgenGenerator_getIgenExecutable(self)
    def setOutputPolygon(self, *args): return _pyossim.ossimIgenGenerator_setOutputPolygon(self, *args)
    def setPixelType(self, *args): return _pyossim.ossimIgenGenerator_setPixelType(self, *args)
    def getOutputGeoPolygon(self, *args): return _pyossim.ossimIgenGenerator_getOutputGeoPolygon(self, *args)
    def setTilingFlag(self, *args): return _pyossim.ossimIgenGenerator_setTilingFlag(self, *args)
    def setTileSpacing(self, *args): return _pyossim.ossimIgenGenerator_setTileSpacing(self, *args)
    def setTilePadding(self, *args): return _pyossim.ossimIgenGenerator_setTilePadding(self, *args)
    def setTileSpacingUnits(self, *args): return _pyossim.ossimIgenGenerator_setTileSpacingUnits(self, *args)
    def setTilePaddingUnits(self, *args): return _pyossim.ossimIgenGenerator_setTilePaddingUnits(self, *args)
    def getTilingFlag(self): return _pyossim.ossimIgenGenerator_getTilingFlag(self)
    def getTileSpacing(self): return _pyossim.ossimIgenGenerator_getTileSpacing(self)
    def getTilePadding(self): return _pyossim.ossimIgenGenerator_getTilePadding(self)
    def getTileSpacingUnits(self): return _pyossim.ossimIgenGenerator_getTileSpacingUnits(self)
    def getTilePaddingUnits(self): return _pyossim.ossimIgenGenerator_getTilePaddingUnits(self)
    def getPixelType(self): return _pyossim.ossimIgenGenerator_getPixelType(self)
    def setTileNamingConvention(self, *args): return _pyossim.ossimIgenGenerator_setTileNamingConvention(self, *args)
    def getTileNamingConvention(self): return _pyossim.ossimIgenGenerator_getTileNamingConvention(self)
    def getInputBoundingRect(self): return _pyossim.ossimIgenGenerator_getInputBoundingRect(self)
    def createProductProjection(self): return _pyossim.ossimIgenGenerator_createProductProjection(self)
    def createOutput(self): return _pyossim.ossimIgenGenerator_createOutput(self)
    def createInput(self): return _pyossim.ossimIgenGenerator_createInput(self)
ossimIgenGenerator_swigregister = _pyossim.ossimIgenGenerator_swigregister
ossimIgenGenerator_swigregister(ossimIgenGenerator)

class ossimImageDataHelper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageDataHelper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageDataHelper, name)
    __repr__ = _swig_repr
    def __init__(self, imageData = None): 
        this = _pyossim.new_ossimImageDataHelper(imageData)
        try: self.this.append(this)
        except: self.this = this
    def setImageData(self, *args): return _pyossim.ossimImageDataHelper_setImageData(self, *args)
    def fill(self, *args): return _pyossim.ossimImageDataHelper_fill(self, *args)
    def copyInputToThis(self, *args): return _pyossim.ossimImageDataHelper_copyInputToThis(self, *args)
    __swig_setmethods__["theImageData"] = _pyossim.ossimImageDataHelper_theImageData_set
    __swig_getmethods__["theImageData"] = _pyossim.ossimImageDataHelper_theImageData_get
    if _newclass:theImageData = _swig_property(_pyossim.ossimImageDataHelper_theImageData_get, _pyossim.ossimImageDataHelper_theImageData_set)
    __swig_destroy__ = _pyossim.delete_ossimImageDataHelper
    __del__ = lambda self : None;
ossimImageDataHelper_swigregister = _pyossim.ossimImageDataHelper_swigregister
ossimImageDataHelper_swigregister(ossimImageDataHelper)

class ossimDataObject(ossimObject):
    __swig_setmethods__ = {}
    for _s in [ossimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimDataObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimDataObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimDataObject
    __del__ = lambda self : None;
    def getHashId(self): return _pyossim.ossimDataObject_getHashId(self)
    def setOwner(self, *args): return _pyossim.ossimDataObject_setOwner(self, *args)
    def getOwner(self): return _pyossim.ossimDataObject_getOwner(self)
    def const_ossimDataObject_getOwner(self): return _pyossim.ossimDataObject_const_ossimDataObject_getOwner(self)
    def setDataObjectStatus(self, *args): return _pyossim.ossimDataObject_setDataObjectStatus(self, *args)
    def getDataObjectStatus(self): return _pyossim.ossimDataObject_getDataObjectStatus(self)
    def getDataObjectStatusString(self): return _pyossim.ossimDataObject_getDataObjectStatusString(self)
    def getObjectSizeInBytes(self): return _pyossim.ossimDataObject_getObjectSizeInBytes(self)
    def getDataSizeInBytes(self): return _pyossim.ossimDataObject_getDataSizeInBytes(self)
    def isInitialize(self): return _pyossim.ossimDataObject_isInitialize(self)
    def initialize(self): return _pyossim.ossimDataObject_initialize(self)
    def assign(self, *args): return _pyossim.ossimDataObject_assign(self, *args)
    def isEqualTo(self, *args): return _pyossim.ossimDataObject_isEqualTo(self, *args)
    def __set__(self, *args): return _pyossim.ossimDataObject___set__(self, *args)
    def const_ossimDataObject_operator_eq(self, *args): return _pyossim.ossimDataObject_const_ossimDataObject_operator_eq(self, *args)
    def __cmp__(self, *args): return _pyossim.ossimDataObject___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimDataObject___ne__(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimDataObject_ossimObject_print(self, *args)
    def saveState(self, *args): return _pyossim.ossimDataObject_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimDataObject_loadState(self, *args)
ossimDataObject_swigregister = _pyossim.ossimDataObject_swigregister
ossimDataObject_swigregister(ossimDataObject)

class ossimRectilinearDataObject(ossimDataObject):
    __swig_setmethods__ = {}
    for _s in [ossimDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimRectilinearDataObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimRectilinearDataObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimRectilinearDataObject
    __del__ = lambda self : None;
    def setNumberOfDataComponents(self, *args): return _pyossim.ossimRectilinearDataObject_setNumberOfDataComponents(self, *args)
    def setSpatialExtents(self, *args): return _pyossim.ossimRectilinearDataObject_setSpatialExtents(self, *args)
    def setScalarType(self, *args): return _pyossim.ossimRectilinearDataObject_setScalarType(self, *args)
    def getNumberOfDataComponents(self): return _pyossim.ossimRectilinearDataObject_getNumberOfDataComponents(self)
    def getNumberOfSpatialComponents(self): return _pyossim.ossimRectilinearDataObject_getNumberOfSpatialComponents(self)
    def getSpatialExtents(self): return _pyossim.ossimRectilinearDataObject_getSpatialExtents(self)
    def getScalarType(self): return _pyossim.ossimRectilinearDataObject_getScalarType(self)
    def getScalarSizeInBytes(self): return _pyossim.ossimRectilinearDataObject_getScalarSizeInBytes(self)
    def getBuf(self, *args): return _pyossim.ossimRectilinearDataObject_getBuf(self, *args)
    def assign(self, *args): return _pyossim.ossimRectilinearDataObject_assign(self, *args)
    def initialize(self): return _pyossim.ossimRectilinearDataObject_initialize(self)
    def computeSpatialProduct(self): return _pyossim.ossimRectilinearDataObject_computeSpatialProduct(self)
    def getDataSizeInBytes(self): return _pyossim.ossimRectilinearDataObject_getDataSizeInBytes(self)
    def ossimObject_print(self, *args): return _pyossim.ossimRectilinearDataObject_ossimObject_print(self, *args)
    def __set__(self, *args): return _pyossim.ossimRectilinearDataObject___set__(self, *args)
    def saveState(self, *args): return _pyossim.ossimRectilinearDataObject_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimRectilinearDataObject_loadState(self, *args)
ossimRectilinearDataObject_swigregister = _pyossim.ossimRectilinearDataObject_swigregister
ossimRectilinearDataObject_swigregister(ossimRectilinearDataObject)

class ossimImageDataRefPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageDataRefPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageDataRefPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimImageDataRefPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimImageDataRefPtr
    __del__ = lambda self : None;
    def __ref__(self, *args): return _pyossim.ossimImageDataRefPtr___ref__(self, *args)
    def __deref__(self, *args): return _pyossim.ossimImageDataRefPtr___deref__(self, *args)
    def valid(self): return _pyossim.ossimImageDataRefPtr_valid(self)
    def get(self, *args): return _pyossim.ossimImageDataRefPtr_get(self, *args)
    def take(self): return _pyossim.ossimImageDataRefPtr_take(self)
    def release(self): return _pyossim.ossimImageDataRefPtr_release(self)
    def getWidth(self): return _pyossim.ossimImageDataRefPtr_getWidth(self)
    def getHeight(self): return _pyossim.ossimImageDataRefPtr_getHeight(self)
    def getImageRectangle(self): return _pyossim.ossimImageDataRefPtr_getImageRectangle(self)
    def dup(self): return _pyossim.ossimImageDataRefPtr_dup(self)
    def getHashId(self): return _pyossim.ossimImageDataRefPtr_getHashId(self)
    def getOrigin(self): return _pyossim.ossimImageDataRefPtr_getOrigin(self)
    def computeMinMaxPix(self, *args): return _pyossim.ossimImageDataRefPtr_computeMinMaxPix(self, *args)
    def computeMinMaxNulPix(self, *args): return _pyossim.ossimImageDataRefPtr_computeMinMaxNulPix(self, *args)
    def getNullPix(self, *args): return _pyossim.ossimImageDataRefPtr_getNullPix(self, *args)
    def getMinPix(self, *args): return _pyossim.ossimImageDataRefPtr_getMinPix(self, *args)
    def getMaxPix(self, *args): return _pyossim.ossimImageDataRefPtr_getMaxPix(self, *args)
    def getMinNormalizedPix(self): return _pyossim.ossimImageDataRefPtr_getMinNormalizedPix(self)
    def getScalarTypeAsString(self): return _pyossim.ossimImageDataRefPtr_getScalarTypeAsString(self)
    def getNumberOfBands(self): return _pyossim.ossimImageDataRefPtr_getNumberOfBands(self)
    def getPix(self, *args): return _pyossim.ossimImageDataRefPtr_getPix(self, *args)
    def isNull(self, *args): return _pyossim.ossimImageDataRefPtr_isNull(self, *args)
    def isValidBand(self, *args): return _pyossim.ossimImageDataRefPtr_isValidBand(self, *args)
    def validate(self): return _pyossim.ossimImageDataRefPtr_validate(self)
    def newNormalizedFloat(self): return _pyossim.ossimImageDataRefPtr_newNormalizedFloat(self)
    def getNormalizedFloat(self, *args): return _pyossim.ossimImageDataRefPtr_getNormalizedFloat(self, *args)
    def convertToNormalizedFloat(self, *args): return _pyossim.ossimImageDataRefPtr_convertToNormalizedFloat(self, *args)
    def newNormalizedDouble(self): return _pyossim.ossimImageDataRefPtr_newNormalizedDouble(self)
    def convertToNormalizedDouble(self, *args): return _pyossim.ossimImageDataRefPtr_convertToNormalizedDouble(self, *args)
    def computeAverageBandValue(self, bandNumber = 0): return _pyossim.ossimImageDataRefPtr_computeAverageBandValue(self, bandNumber)
    def computeMeanSquaredError(self, *args): return _pyossim.ossimImageDataRefPtr_computeMeanSquaredError(self, *args)
    def hasAlpha(self): return _pyossim.ossimImageDataRefPtr_hasAlpha(self)
    def getSize(self): return _pyossim.ossimImageDataRefPtr_getSize(self)
    def getSizePerBand(self): return _pyossim.ossimImageDataRefPtr_getSizePerBand(self)
    def getSizePerBandInBytes(self): return _pyossim.ossimImageDataRefPtr_getSizePerBandInBytes(self)
    def getDataSizeInBytes(self): return _pyossim.ossimImageDataRefPtr_getDataSizeInBytes(self)
    def getSizeInBytes(self): return _pyossim.ossimImageDataRefPtr_getSizeInBytes(self)
    def write(self, *args): return _pyossim.ossimImageDataRefPtr_write(self, *args)
    def copyTileToNormalizedBuffer(self, *args): return _pyossim.ossimImageDataRefPtr_copyTileToNormalizedBuffer(self, *args)
    def copyTileBandToNormalizedBuffer(self, *args): return _pyossim.ossimImageDataRefPtr_copyTileBandToNormalizedBuffer(self, *args)
    def unloadBand(self, *args): return _pyossim.ossimImageDataRefPtr_unloadBand(self, *args)
    def unloadTile(self, *args): return _pyossim.ossimImageDataRefPtr_unloadTile(self, *args)
    def unloadTileToBipAlpha(self, *args): return _pyossim.ossimImageDataRefPtr_unloadTileToBipAlpha(self, *args)
    def isPointWithin(self, *args): return _pyossim.ossimImageDataRefPtr_isPointWithin(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimImageDataRefPtr_ossimObject_print(self, *args)
    def getIndexedFlag(self): return _pyossim.ossimImageDataRefPtr_getIndexedFlag(self)
    def saveState(self, *args): return _pyossim.ossimImageDataRefPtr_saveState(self, *args)
    def getNumberOfDataComponents(self): return _pyossim.ossimImageDataRefPtr_getNumberOfDataComponents(self)
    def getNumberOfSpatialComponents(self): return _pyossim.ossimImageDataRefPtr_getNumberOfSpatialComponents(self)
    def getSpatialExtents(self): return _pyossim.ossimImageDataRefPtr_getSpatialExtents(self)
    def getScalarType(self): return _pyossim.ossimImageDataRefPtr_getScalarType(self)
    def getScalarSizeInBytes(self): return _pyossim.ossimImageDataRefPtr_getScalarSizeInBytes(self)
    def computeSpatialProduct(self): return _pyossim.ossimImageDataRefPtr_computeSpatialProduct(self)
    def const_ossimDataObject_getOwner(self): return _pyossim.ossimImageDataRefPtr_const_ossimDataObject_getOwner(self)
    def setDataObjectStatus(self, *args): return _pyossim.ossimImageDataRefPtr_setDataObjectStatus(self, *args)
    def getDataObjectStatus(self): return _pyossim.ossimImageDataRefPtr_getDataObjectStatus(self)
    def getDataObjectStatusString(self): return _pyossim.ossimImageDataRefPtr_getDataObjectStatusString(self)
    def getObjectSizeInBytes(self): return _pyossim.ossimImageDataRefPtr_getObjectSizeInBytes(self)
    def isInitialize(self): return _pyossim.ossimImageDataRefPtr_isInitialize(self)
    def __cmp__(self, *args): return _pyossim.ossimImageDataRefPtr___cmp__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimImageDataRefPtr___ne__(self, *args)
    def getShortName(self): return _pyossim.ossimImageDataRefPtr_getShortName(self)
    def getLongName(self): return _pyossim.ossimImageDataRefPtr_getLongName(self)
    def getDescription(self): return _pyossim.ossimImageDataRefPtr_getDescription(self)
    def getClassName(self): return _pyossim.ossimImageDataRefPtr_getClassName(self)
    def getType(self): return _pyossim.ossimImageDataRefPtr_getType(self)
    def canCastTo(self, *args): return _pyossim.ossimImageDataRefPtr_canCastTo(self, *args)
    def ref(self): return _pyossim.ossimImageDataRefPtr_ref(self)
    def unref(self): return _pyossim.ossimImageDataRefPtr_unref(self)
    def unref_nodelete(self): return _pyossim.ossimImageDataRefPtr_unref_nodelete(self)
    def referenceCount(self): return _pyossim.ossimImageDataRefPtr_referenceCount(self)
ossimImageDataRefPtr_swigregister = _pyossim.ossimImageDataRefPtr_swigregister
ossimImageDataRefPtr_swigregister(ossimImageDataRefPtr)

ossimImageData_HEADER = _pyossim.ossimImageData_HEADER
class ossimImageData(ossimRectilinearDataObject):
    __swig_setmethods__ = {}
    for _s in [ossimRectilinearDataObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageData, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimRectilinearDataObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageData, name)
    __repr__ = _swig_repr
    COLOR_DISCREPANCY = _pyossim.ossimImageData_COLOR_DISCREPANCY
    COLOR_DISCREPANCY_OF_ANY_FROM_DEST = _pyossim.ossimImageData_COLOR_DISCREPANCY_OF_ANY_FROM_DEST
    COLOR_DISCREPANCY_OF_ALL_FROM_DEST = _pyossim.ossimImageData_COLOR_DISCREPANCY_OF_ALL_FROM_DEST
    COLOR_EQUALITY_OF_ANY_TO_SRC = _pyossim.ossimImageData_COLOR_EQUALITY_OF_ANY_TO_SRC
    COLOR_EQUALITY_OF_ALL_TO_SRC = _pyossim.ossimImageData_COLOR_EQUALITY_OF_ALL_TO_SRC
    NULL_RULE = _pyossim.ossimImageData_NULL_RULE
    def __init__(self, *args): 
        this = _pyossim.new_ossimImageData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimImageData
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyossim.ossimImageData___set__(self, *args)
    def getWidth(self): return _pyossim.ossimImageData_getWidth(self)
    def getHeight(self): return _pyossim.ossimImageData_getHeight(self)
    def getImageRectangle(self): return _pyossim.ossimImageData_getImageRectangle(self)
    def getWidthHeight(self, *args): return _pyossim.ossimImageData_getWidthHeight(self, *args)
    def setWidth(self, *args): return _pyossim.ossimImageData_setWidth(self, *args)
    def setHeight(self, *args): return _pyossim.ossimImageData_setHeight(self, *args)
    def setWidthHeight(self, *args): return _pyossim.ossimImageData_setWidthHeight(self, *args)
    def setImageRectangleAndBands(self, *args): return _pyossim.ossimImageData_setImageRectangleAndBands(self, *args)
    def setImageRectangle(self, *args): return _pyossim.ossimImageData_setImageRectangle(self, *args)
    def setOrigin(self, *args): return _pyossim.ossimImageData_setOrigin(self, *args)
    def assign(self, *args): return _pyossim.ossimImageData_assign(self, *args)
    def assignBand(self, *args): return _pyossim.ossimImageData_assignBand(self, *args)
    def dup(self): return _pyossim.ossimImageData_dup(self)
    def getHashId(self): return _pyossim.ossimImageData_getHashId(self)
    def setNullPix(self, *args): return _pyossim.ossimImageData_setNullPix(self, *args)
    def setMinPix(self, *args): return _pyossim.ossimImageData_setMinPix(self, *args)
    def setMaxPix(self, *args): return _pyossim.ossimImageData_setMaxPix(self, *args)
    def getOrigin(self): return _pyossim.ossimImageData_getOrigin(self)
    def computeMinMaxPix(self, *args): return _pyossim.ossimImageData_computeMinMaxPix(self, *args)
    def computeMinMaxNulPix(self, *args): return _pyossim.ossimImageData_computeMinMaxNulPix(self, *args)
    def getNullPix(self, *args): return _pyossim.ossimImageData_getNullPix(self, *args)
    def getMinPix(self, *args): return _pyossim.ossimImageData_getMinPix(self, *args)
    def getMaxPix(self, *args): return _pyossim.ossimImageData_getMaxPix(self, *args)
    def getMinNormalizedPix(self): return _pyossim.ossimImageData_getMinNormalizedPix(self)
    def getScalarTypeAsString(self): return _pyossim.ossimImageData_getScalarTypeAsString(self)
    def getNumberOfBands(self): return _pyossim.ossimImageData_getNumberOfBands(self)
    def setNumberOfBands(self, *args): return _pyossim.ossimImageData_setNumberOfBands(self, *args)
    def getPix(self, *args): return _pyossim.ossimImageData_getPix(self, *args)
    def fill(self, *args): return _pyossim.ossimImageData_fill(self, *args)
    def isNull(self, *args): return _pyossim.ossimImageData_isNull(self, *args)
    def setNull(self, *args): return _pyossim.ossimImageData_setNull(self, *args)
    def isValidBand(self, *args): return _pyossim.ossimImageData_isValidBand(self, *args)
    def validate(self): return _pyossim.ossimImageData_validate(self)
    def newNormalizedFloat(self): return _pyossim.ossimImageData_newNormalizedFloat(self)
    def getNormalizedFloat(self, *args): return _pyossim.ossimImageData_getNormalizedFloat(self, *args)
    def setNormalizedFloat(self, *args): return _pyossim.ossimImageData_setNormalizedFloat(self, *args)
    def convertToNormalizedFloat(self, *args): return _pyossim.ossimImageData_convertToNormalizedFloat(self, *args)
    def newNormalizedDouble(self): return _pyossim.ossimImageData_newNormalizedDouble(self)
    def convertToNormalizedDouble(self, *args): return _pyossim.ossimImageData_convertToNormalizedDouble(self, *args)
    def unnormalizeInput(self, *args): return _pyossim.ossimImageData_unnormalizeInput(self, *args)
    def computeAverageBandValue(self, bandNumber = 0): return _pyossim.ossimImageData_computeAverageBandValue(self, bandNumber)
    def computeMeanSquaredError(self, *args): return _pyossim.ossimImageData_computeMeanSquaredError(self, *args)
    def populateHistogram(self, *args): return _pyossim.ossimImageData_populateHistogram(self, *args)
    def hasAlpha(self): return _pyossim.ossimImageData_hasAlpha(self)
    def getAlphaBuf(self, *args): return _pyossim.ossimImageData_getAlphaBuf(self, *args)
    def getBuf(self, *args): return _pyossim.ossimImageData_getBuf(self, *args)
    def getUcharBuf(self, *args): return _pyossim.ossimImageData_getUcharBuf(self, *args)
    def getUshortBuf(self, *args): return _pyossim.ossimImageData_getUshortBuf(self, *args)
    def getSshortBuf(self, *args): return _pyossim.ossimImageData_getSshortBuf(self, *args)
    def getFloatBuf(self, *args): return _pyossim.ossimImageData_getFloatBuf(self, *args)
    def getDoubleBuf(self, *args): return _pyossim.ossimImageData_getDoubleBuf(self, *args)
    def getSize(self): return _pyossim.ossimImageData_getSize(self)
    def getSizePerBand(self): return _pyossim.ossimImageData_getSizePerBand(self)
    def getSizePerBandInBytes(self): return _pyossim.ossimImageData_getSizePerBandInBytes(self)
    def getDataSizeInBytes(self): return _pyossim.ossimImageData_getDataSizeInBytes(self)
    def getSizeInBytes(self): return _pyossim.ossimImageData_getSizeInBytes(self)
    def makeBlank(self): return _pyossim.ossimImageData_makeBlank(self)
    def initialize(self): return _pyossim.ossimImageData_initialize(self)
    def write(self, *args): return _pyossim.ossimImageData_write(self, *args)
    def copyTileToNormalizedBuffer(self, *args): return _pyossim.ossimImageData_copyTileToNormalizedBuffer(self, *args)
    def copyTileBandToNormalizedBuffer(self, *args): return _pyossim.ossimImageData_copyTileBandToNormalizedBuffer(self, *args)
    def copyNormalizedBufferToTile(self, *args): return _pyossim.ossimImageData_copyNormalizedBufferToTile(self, *args)
    def isWithin(self, *args): return _pyossim.ossimImageData_isWithin(self, *args)
    def setValue(self, *args): return _pyossim.ossimImageData_setValue(self, *args)
    def loadBand(self, *args): return _pyossim.ossimImageData_loadBand(self, *args)
    def nullTileAlpha(self, *args): return _pyossim.ossimImageData_nullTileAlpha(self, *args)
    def loadTile(self, *args): return _pyossim.ossimImageData_loadTile(self, *args)
    def loadTileFrom1Band(self, *args): return _pyossim.ossimImageData_loadTileFrom1Band(self, *args)
    def loadShortBand(self, *args): return _pyossim.ossimImageData_loadShortBand(self, *args)
    def unloadBand(self, *args): return _pyossim.ossimImageData_unloadBand(self, *args)
    def unloadTile(self, *args): return _pyossim.ossimImageData_unloadTile(self, *args)
    def unloadTileToBipAlpha(self, *args): return _pyossim.ossimImageData_unloadTileToBipAlpha(self, *args)
    def isPointWithin(self, *args): return _pyossim.ossimImageData_isPointWithin(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimImageData_ossimObject_print(self, *args)
    def stretchMinMax(self): return _pyossim.ossimImageData_stretchMinMax(self)
    def computeAlphaChannel(self): return _pyossim.ossimImageData_computeAlphaChannel(self)
    def copyLine(self, *args): return _pyossim.ossimImageData_copyLine(self, *args)
    def setIndexedFlag(self, *args): return _pyossim.ossimImageData_setIndexedFlag(self, *args)
    def getIndexedFlag(self): return _pyossim.ossimImageData_getIndexedFlag(self)
    def saveState(self, *args): return _pyossim.ossimImageData_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageData_loadState(self, *args)
    def copyToBuffer(self, *args): return _pyossim.ossimImageData_copyToBuffer(self, *args)
ossimImageData_swigregister = _pyossim.ossimImageData_swigregister
ossimImageData_swigregister(ossimImageData)

class ossimImageGeometryFactoryBase(ossimBaseObjectFactory):
    __swig_setmethods__ = {}
    for _s in [ossimBaseObjectFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageGeometryFactoryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimBaseObjectFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageGeometryFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def createObject(self, *args): return _pyossim.ossimImageGeometryFactoryBase_createObject(self, *args)
    def createGeometry(self, *args): return _pyossim.ossimImageGeometryFactoryBase_createGeometry(self, *args)
    def extendGeometry(self, *args): return _pyossim.ossimImageGeometryFactoryBase_extendGeometry(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimImageGeometryFactoryBase
    __del__ = lambda self : None;
ossimImageGeometryFactoryBase_swigregister = _pyossim.ossimImageGeometryFactoryBase_swigregister
ossimImageGeometryFactoryBase_swigregister(ossimImageGeometryFactoryBase)

ossimImageGeometryFactory_HEADER = _pyossim.ossimImageGeometryFactory_HEADER
class ossimImageGeometryFactory(ossimImageGeometryFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ossimImageGeometryFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageGeometryFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimImageGeometryFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageGeometryFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimImageGeometryFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimImageGeometryFactory_instance)
    def createGeometry(self, *args): return _pyossim.ossimImageGeometryFactory_createGeometry(self, *args)
    def extendGeometry(self, *args): return _pyossim.ossimImageGeometryFactory_extendGeometry(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimImageGeometryFactory_getTypeNameList(self, *args)
    def createTransform(self, *args): return _pyossim.ossimImageGeometryFactory_createTransform(self, *args)
    def createProjection(self, *args): return _pyossim.ossimImageGeometryFactory_createProjection(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimImageGeometryFactory
    __del__ = lambda self : None;
ossimImageGeometryFactory_swigregister = _pyossim.ossimImageGeometryFactory_swigregister
ossimImageGeometryFactory_swigregister(ossimImageGeometryFactory)

def ossimImageGeometryFactory_instance():
  return _pyossim.ossimImageGeometryFactory_instance()
ossimImageGeometryFactory_instance = _pyossim.ossimImageGeometryFactory_instance

class ossimImageGeometryRefPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageGeometryRefPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageGeometryRefPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimImageGeometryRefPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimImageGeometryRefPtr
    __del__ = lambda self : None;
    def __ref__(self, *args): return _pyossim.ossimImageGeometryRefPtr___ref__(self, *args)
    def __deref__(self, *args): return _pyossim.ossimImageGeometryRefPtr___deref__(self, *args)
    def valid(self): return _pyossim.ossimImageGeometryRefPtr_valid(self)
    def get(self, *args): return _pyossim.ossimImageGeometryRefPtr_get(self, *args)
    def take(self): return _pyossim.ossimImageGeometryRefPtr_take(self)
    def release(self): return _pyossim.ossimImageGeometryRefPtr_release(self)
    def rnToRn(self, *args): return _pyossim.ossimImageGeometryRefPtr_rnToRn(self, *args)
    def rnToFull(self, *args): return _pyossim.ossimImageGeometryRefPtr_rnToFull(self, *args)
    def fullToRn(self, *args): return _pyossim.ossimImageGeometryRefPtr_fullToRn(self, *args)
    def rnToWorld(self, *args): return _pyossim.ossimImageGeometryRefPtr_rnToWorld(self, *args)
    def worldToRn(self, *args): return _pyossim.ossimImageGeometryRefPtr_worldToRn(self, *args)
    def localToWorld(self, *args): return _pyossim.ossimImageGeometryRefPtr_localToWorld(self, *args)
    def worldToLocal(self, *args): return _pyossim.ossimImageGeometryRefPtr_worldToLocal(self, *args)
    def hasProjection(self): return _pyossim.ossimImageGeometryRefPtr_hasProjection(self)
    def hasTransform(self): return _pyossim.ossimImageGeometryRefPtr_hasTransform(self)
    def isAffectedByElevation(self): return _pyossim.ossimImageGeometryRefPtr_isAffectedByElevation(self)
    def getMetersPerPixel(self, *args): return _pyossim.ossimImageGeometryRefPtr_getMetersPerPixel(self, *args)
    def getDegreesPerPixel(self, *args): return _pyossim.ossimImageGeometryRefPtr_getDegreesPerPixel(self, *args)
    def getCornerGpts(self, *args): return _pyossim.ossimImageGeometryRefPtr_getCornerGpts(self, *args)
    def getTiePoint(self, *args): return _pyossim.ossimImageGeometryRefPtr_getTiePoint(self, *args)
    def ossimImageGeometry_print(self, *args): return _pyossim.ossimImageGeometryRefPtr_ossimImageGeometry_print(self, *args)
    def __eq__(self, *args): return _pyossim.ossimImageGeometryRefPtr___eq__(self, *args)
    def decimationFactor(self, *args): return _pyossim.ossimImageGeometryRefPtr_decimationFactor(self, *args)
    def decimationFactors(self, *args): return _pyossim.ossimImageGeometryRefPtr_decimationFactors(self, *args)
    def getNumberOfDecimations(self): return _pyossim.ossimImageGeometryRefPtr_getNumberOfDecimations(self)
    def getImageSize(self): return _pyossim.ossimImageGeometryRefPtr_getImageSize(self)
    def getBoundingRect(self, *args): return _pyossim.ossimImageGeometryRefPtr_getBoundingRect(self, *args)
    def dup(self): return _pyossim.ossimImageGeometryRefPtr_dup(self)
    def saveState(self, *args): return _pyossim.ossimImageGeometryRefPtr_saveState(self, *args)
    def getTargetRrds(self): return _pyossim.ossimImageGeometryRefPtr_getTargetRrds(self)
    def isEqualTo(self, *args): return _pyossim.ossimImageGeometryRefPtr_isEqualTo(self, *args)
    def getAdjustableParameterInterface(self, *args): return _pyossim.ossimImageGeometryRefPtr_getAdjustableParameterInterface(self, *args)
    def getShortName(self): return _pyossim.ossimImageGeometryRefPtr_getShortName(self)
    def getLongName(self): return _pyossim.ossimImageGeometryRefPtr_getLongName(self)
    def getDescription(self): return _pyossim.ossimImageGeometryRefPtr_getDescription(self)
    def getClassName(self): return _pyossim.ossimImageGeometryRefPtr_getClassName(self)
    def getType(self): return _pyossim.ossimImageGeometryRefPtr_getType(self)
    def canCastTo(self, *args): return _pyossim.ossimImageGeometryRefPtr_canCastTo(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimImageGeometryRefPtr_ossimObject_print(self, *args)
    def ref(self): return _pyossim.ossimImageGeometryRefPtr_ref(self)
    def unref(self): return _pyossim.ossimImageGeometryRefPtr_unref(self)
    def unref_nodelete(self): return _pyossim.ossimImageGeometryRefPtr_unref_nodelete(self)
    def referenceCount(self): return _pyossim.ossimImageGeometryRefPtr_referenceCount(self)
ossimImageGeometryRefPtr_swigregister = _pyossim.ossimImageGeometryRefPtr_swigregister
ossimImageGeometryRefPtr_swigregister(ossimImageGeometryRefPtr)

ossimImageGeometry_HEADER = _pyossim.ossimImageGeometry_HEADER
class ossimImageGeometry(ossimObject):
    __swig_setmethods__ = {}
    for _s in [ossimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageGeometry, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimImageGeometry
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pyossim.new_ossimImageGeometry(*args)
        try: self.this.append(this)
        except: self.this = this
    def rnToRn(self, *args): return _pyossim.ossimImageGeometry_rnToRn(self, *args)
    def rnToFull(self, *args): return _pyossim.ossimImageGeometry_rnToFull(self, *args)
    def fullToRn(self, *args): return _pyossim.ossimImageGeometry_fullToRn(self, *args)
    def rnToWorld(self, *args): return _pyossim.ossimImageGeometry_rnToWorld(self, *args)
    def worldToRn(self, *args): return _pyossim.ossimImageGeometry_worldToRn(self, *args)
    def localToWorld(self, *args): return _pyossim.ossimImageGeometry_localToWorld(self, *args)
    def worldToLocal(self, *args): return _pyossim.ossimImageGeometry_worldToLocal(self, *args)
    def setTransform(self, *args): return _pyossim.ossimImageGeometry_setTransform(self, *args)
    def setProjection(self, *args): return _pyossim.ossimImageGeometry_setProjection(self, *args)
    def getTransform(self, *args): return _pyossim.ossimImageGeometry_getTransform(self, *args)
    def getProjection(self, *args): return _pyossim.ossimImageGeometry_getProjection(self, *args)
    def hasProjection(self): return _pyossim.ossimImageGeometry_hasProjection(self)
    def hasTransform(self): return _pyossim.ossimImageGeometry_hasTransform(self)
    def isAffectedByElevation(self): return _pyossim.ossimImageGeometry_isAffectedByElevation(self)
    def getMetersPerPixel(self, *args): return _pyossim.ossimImageGeometry_getMetersPerPixel(self, *args)
    def getDegreesPerPixel(self, *args): return _pyossim.ossimImageGeometry_getDegreesPerPixel(self, *args)
    def getCornerGpts(self, *args): return _pyossim.ossimImageGeometry_getCornerGpts(self, *args)
    def getTiePoint(self, *args): return _pyossim.ossimImageGeometry_getTiePoint(self, *args)
    def ossimImageGeometry_print(self, *args): return _pyossim.ossimImageGeometry_ossimImageGeometry_print(self, *args)
    def __eq__(self, *args): return _pyossim.ossimImageGeometry___eq__(self, *args)
    def __set__(self, *args): return _pyossim.ossimImageGeometry___set__(self, *args)
    def decimationFactor(self, *args): return _pyossim.ossimImageGeometry_decimationFactor(self, *args)
    def decimationFactors(self, *args): return _pyossim.ossimImageGeometry_decimationFactors(self, *args)
    def setDiscreteDecimation(self, *args): return _pyossim.ossimImageGeometry_setDiscreteDecimation(self, *args)
    def getNumberOfDecimations(self): return _pyossim.ossimImageGeometry_getNumberOfDecimations(self)
    def setImageSize(self, *args): return _pyossim.ossimImageGeometry_setImageSize(self, *args)
    def getImageSize(self): return _pyossim.ossimImageGeometry_getImageSize(self)
    def getBoundingRect(self, *args): return _pyossim.ossimImageGeometry_getBoundingRect(self, *args)
    def dup(self): return _pyossim.ossimImageGeometry_dup(self)
    def loadState(self, *args): return _pyossim.ossimImageGeometry_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimImageGeometry_saveState(self, *args)
    def setTargetRrds(self, *args): return _pyossim.ossimImageGeometry_setTargetRrds(self, *args)
    def getTargetRrds(self): return _pyossim.ossimImageGeometry_getTargetRrds(self)
    def applyScale(self, *args): return _pyossim.ossimImageGeometry_applyScale(self, *args)
    def isEqualTo(self, *args): return _pyossim.ossimImageGeometry_isEqualTo(self, *args)
    def getAdjustableParameterInterface(self, *args): return _pyossim.ossimImageGeometry_getAdjustableParameterInterface(self, *args)
    def computeImageToGroundPartialsWRTAdjParam(self, *args): return _pyossim.ossimImageGeometry_computeImageToGroundPartialsWRTAdjParam(self, *args)
    def computeImageToGroundPartialsWRTAdjParams(self, *args): return _pyossim.ossimImageGeometry_computeImageToGroundPartialsWRTAdjParams(self, *args)
    def computeGroundToImagePartials(self, *args): return _pyossim.ossimImageGeometry_computeGroundToImagePartials(self, *args)
ossimImageGeometry_swigregister = _pyossim.ossimImageGeometry_swigregister
ossimImageGeometry_swigregister(ossimImageGeometry)

ossimImageHandler_HEADER = _pyossim.ossimImageHandler_HEADER
class ossimImageHandler(ossimImageSource):
    __swig_setmethods__ = {}
    for _s in [ossimImageSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimImageSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageHandler, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    OSSIM_OVERVIEW_COMPRESSION_NONE = _pyossim.ossimImageHandler_OSSIM_OVERVIEW_COMPRESSION_NONE
    OSSIM_OVERVIEW_COMPRESSION_JPEG = _pyossim.ossimImageHandler_OSSIM_OVERVIEW_COMPRESSION_JPEG
    OSSIM_OVERVIEW_COMPRESSION_LZW = _pyossim.ossimImageHandler_OSSIM_OVERVIEW_COMPRESSION_LZW
    OSSIM_OVERVIEW_COMPRESSION_DEFLATE = _pyossim.ossimImageHandler_OSSIM_OVERVIEW_COMPRESSION_DEFLATE
    OSSIM_OVERVIEW_COMPRESSION_PACKBITS = _pyossim.ossimImageHandler_OSSIM_OVERVIEW_COMPRESSION_PACKBITS
    __swig_destroy__ = _pyossim.delete_ossimImageHandler
    __del__ = lambda self : None;
    def initialize(self): return _pyossim.ossimImageHandler_initialize(self)
    def openOverview(self, *args): return _pyossim.ossimImageHandler_openOverview(self, *args)
    def closeOverview(self): return _pyossim.ossimImageHandler_closeOverview(self)
    def getOverview(self): return _pyossim.ossimImageHandler_getOverview(self)
    def hasOverviews(self): return _pyossim.ossimImageHandler_hasOverviews(self)
    def createDefaultOverviewFilename(self): return _pyossim.ossimImageHandler_createDefaultOverviewFilename(self)
    def createDefaultGeometryFilename(self): return _pyossim.ossimImageHandler_createDefaultGeometryFilename(self)
    def createDefaultMetadataFilename(self): return _pyossim.ossimImageHandler_createDefaultMetadataFilename(self)
    def createDefaultHistogramFilename(self): return _pyossim.ossimImageHandler_createDefaultHistogramFilename(self)
    def createDefaultValidVerticesFilename(self): return _pyossim.ossimImageHandler_createDefaultValidVerticesFilename(self)
    def writeValidImageVertices(self, *args): return _pyossim.ossimImageHandler_writeValidImageVertices(self, *args)
    def openValidVertices(self, *args): return _pyossim.ossimImageHandler_openValidVertices(self, *args)
    def open(self, *args): return _pyossim.ossimImageHandler_open(self, *args)
    def close(self): return _pyossim.ossimImageHandler_close(self)
    def isOpen(self): return _pyossim.ossimImageHandler_isOpen(self)
    def buildHistogram(self, numberOfRLevels = 0): return _pyossim.ossimImageHandler_buildHistogram(self, numberOfRLevels)
    def buildAllHistograms(self, numberOfRLevels = 0): return _pyossim.ossimImageHandler_buildAllHistograms(self, numberOfRLevels)
    def buildAllOverviews(self, *args): return _pyossim.ossimImageHandler_buildAllOverviews(self, *args)
    def buildOverview(self, *args): return _pyossim.ossimImageHandler_buildOverview(self, *args)
    def getImageGeometry(self): return _pyossim.ossimImageHandler_getImageGeometry(self)
    def setImageGeometry(self, *args): return _pyossim.ossimImageHandler_setImageGeometry(self, *args)
    def saveImageGeometry(self, *args): return _pyossim.ossimImageHandler_saveImageGeometry(self, *args)
    def getNumberOfLines(self, resLevel = 0): return _pyossim.ossimImageHandler_getNumberOfLines(self, resLevel)
    def getNumberOfSamples(self, resLevel = 0): return _pyossim.ossimImageHandler_getNumberOfSamples(self, resLevel)
    def getImageRectangle(self, resLevel = 0): return _pyossim.ossimImageHandler_getImageRectangle(self, resLevel)
    def getBoundingRect(self, resLevel = 0): return _pyossim.ossimImageHandler_getBoundingRect(self, resLevel)
    def getDecimationFactor(self, *args): return _pyossim.ossimImageHandler_getDecimationFactor(self, *args)
    def getDecimationFactors(self, *args): return _pyossim.ossimImageHandler_getDecimationFactors(self, *args)
    def getNumberOfDecimationLevels(self): return _pyossim.ossimImageHandler_getNumberOfDecimationLevels(self)
    def getNumberOfReducedResSets(self): return _pyossim.ossimImageHandler_getNumberOfReducedResSets(self)
    def setFilename(self, *args): return _pyossim.ossimImageHandler_setFilename(self, *args)
    def getFilename(self): return _pyossim.ossimImageHandler_getFilename(self)
    def saveState(self, *args): return _pyossim.ossimImageHandler_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageHandler_loadState(self, *args)
    def isValidRLevel(self, *args): return _pyossim.ossimImageHandler_isValidRLevel(self, *args)
    def const_ossimConnectableObject_canConnectMyInputTo(self, *args): return _pyossim.ossimImageHandler_const_ossimConnectableObject_canConnectMyInputTo(self, *args)
    def getValidImageVertices(self, *args): return _pyossim.ossimImageHandler_getValidImageVertices(self, *args)
    def isBandSelector(self): return _pyossim.ossimImageHandler_isBandSelector(self)
    def setOutputBandList(self, *args): return _pyossim.ossimImageHandler_setOutputBandList(self, *args)
    def isImageTiled(self): return _pyossim.ossimImageHandler_isImageTiled(self)
    def getImageTileWidth(self): return _pyossim.ossimImageHandler_getImageTileWidth(self)
    def getImageTileHeight(self): return _pyossim.ossimImageHandler_getImageTileHeight(self)
    def hasMetaData(self): return _pyossim.ossimImageHandler_hasMetaData(self)
    def getLut(self): return _pyossim.ossimImageHandler_getLut(self)
    def hasLut(self): return _pyossim.ossimImageHandler_hasLut(self)
    def loadMetaData(self): return _pyossim.ossimImageHandler_loadMetaData(self)
    def getMinPixelValue(self, band = 0): return _pyossim.ossimImageHandler_getMinPixelValue(self, band)
    def getMaxPixelValue(self, band = 0): return _pyossim.ossimImageHandler_getMaxPixelValue(self, band)
    def getNullPixelValue(self, band = 0): return _pyossim.ossimImageHandler_getNullPixelValue(self, band)
    def setMinPixelValue(self, *args): return _pyossim.ossimImageHandler_setMinPixelValue(self, *args)
    def setMaxPixelValue(self, *args): return _pyossim.ossimImageHandler_setMaxPixelValue(self, *args)
    def setNullPixelValue(self, *args): return _pyossim.ossimImageHandler_setNullPixelValue(self, *args)
    def getCurrentEntry(self): return _pyossim.ossimImageHandler_getCurrentEntry(self)
    def getNumberOfEntries(self): return _pyossim.ossimImageHandler_getNumberOfEntries(self)
    def getEntryList(self, *args): return _pyossim.ossimImageHandler_getEntryList(self, *args)
    def getEntryStringList(self, *args): return _pyossim.ossimImageHandler_getEntryStringList(self, *args)
    def useEntryIndex(self): return _pyossim.ossimImageHandler_useEntryIndex(self)
    def getOverviewFile(self): return _pyossim.ossimImageHandler_getOverviewFile(self)
    def setCurrentEntry(self, *args): return _pyossim.ossimImageHandler_setCurrentEntry(self, *args)
    def setProperty(self, *args): return _pyossim.ossimImageHandler_setProperty(self, *args)
    def getProperty(self, *args): return _pyossim.ossimImageHandler_getProperty(self, *args)
    def getPropertyNames(self, *args): return _pyossim.ossimImageHandler_getPropertyNames(self, *args)
    def getFilenameWithThisExtension(self, *args): return _pyossim.ossimImageHandler_getFilenameWithThisExtension(self, *args)
    def getStartingResLevel(self): return _pyossim.ossimImageHandler_getStartingResLevel(self)
    def setStartingResLevel(self, *args): return _pyossim.ossimImageHandler_setStartingResLevel(self, *args)
    def getOpenOverviewFlag(self): return _pyossim.ossimImageHandler_getOpenOverviewFlag(self)
    def setOpenOverviewFlag(self, *args): return _pyossim.ossimImageHandler_setOpenOverviewFlag(self, *args)
    def setSupplementaryDirectory(self, *args): return _pyossim.ossimImageHandler_setSupplementaryDirectory(self, *args)
    def getSupplementaryDirectory(self): return _pyossim.ossimImageHandler_getSupplementaryDirectory(self)
    def getImageID(self): return _pyossim.ossimImageHandler_getImageID(self)
    def setImageID(self, *args): return _pyossim.ossimImageHandler_setImageID(self, *args)
    def getPixelType(self): return _pyossim.ossimImageHandler_getPixelType(self)
ossimImageHandler_swigregister = _pyossim.ossimImageHandler_swigregister
ossimImageHandler_swigregister(ossimImageHandler)

class ossimImageMetaData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageMetaData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageMetaData, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimImageMetaData(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimImageMetaData
    __del__ = lambda self : None;
    def clear(self): return _pyossim.ossimImageMetaData_clear(self)
    def clearBandInfo(self): return _pyossim.ossimImageMetaData_clearBandInfo(self)
    def setDefaultsForArrays(self): return _pyossim.ossimImageMetaData_setDefaultsForArrays(self)
    def setNumberOfBands(self, *args): return _pyossim.ossimImageMetaData_setNumberOfBands(self, *args)
    def getNumberOfBands(self): return _pyossim.ossimImageMetaData_getNumberOfBands(self)
    def setScalarType(self, *args): return _pyossim.ossimImageMetaData_setScalarType(self, *args)
    def getScalarType(self): return _pyossim.ossimImageMetaData_getScalarType(self)
    def getMinPix(self, *args): return _pyossim.ossimImageMetaData_getMinPix(self, *args)
    def setMinPix(self, *args): return _pyossim.ossimImageMetaData_setMinPix(self, *args)
    def setMaxPix(self, *args): return _pyossim.ossimImageMetaData_setMaxPix(self, *args)
    def setNullPix(self, *args): return _pyossim.ossimImageMetaData_setNullPix(self, *args)
    def getMaxPix(self, *args): return _pyossim.ossimImageMetaData_getMaxPix(self, *args)
    def getNullPix(self, *args): return _pyossim.ossimImageMetaData_getNullPix(self, *args)
    def getMinPixelArray(self): return _pyossim.ossimImageMetaData_getMinPixelArray(self)
    def getMaxPixelArray(self): return _pyossim.ossimImageMetaData_getMaxPixelArray(self)
    def getNullPixelArray(self): return _pyossim.ossimImageMetaData_getNullPixelArray(self)
    def setMinValuesValid(self, *args): return _pyossim.ossimImageMetaData_setMinValuesValid(self, *args)
    def setMaxValuesValid(self, *args): return _pyossim.ossimImageMetaData_setMaxValuesValid(self, *args)
    def setNullValuesValid(self, *args): return _pyossim.ossimImageMetaData_setNullValuesValid(self, *args)
    def getMinValuesValidFlag(self): return _pyossim.ossimImageMetaData_getMinValuesValidFlag(self)
    def getMaxValuesValidFlag(self): return _pyossim.ossimImageMetaData_getMaxValuesValidFlag(self)
    def getNullValuesValidFlag(self): return _pyossim.ossimImageMetaData_getNullValuesValidFlag(self)
    def __set__(self, *args): return _pyossim.ossimImageMetaData___set__(self, *args)
    def isValid(self): return _pyossim.ossimImageMetaData_isValid(self)
    def assign(self, *args): return _pyossim.ossimImageMetaData_assign(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageMetaData_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimImageMetaData_saveState(self, *args)
ossimImageMetaData_swigregister = _pyossim.ossimImageMetaData_swigregister
ossimImageMetaData_swigregister(ossimImageMetaData)

class ossimImageMosaic(ossimImageCombiner):
    __swig_setmethods__ = {}
    for _s in [ossimImageCombiner]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageMosaic, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimImageCombiner]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageMosaic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimImageMosaic(*args)
        try: self.this.append(this)
        except: self.this = this
    def getTile(self, *args): return _pyossim.ossimImageMosaic_getTile(self, *args)
    def initialize(self): return _pyossim.ossimImageMosaic_initialize(self)
    def saveState(self, *args): return _pyossim.ossimImageMosaic_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageMosaic_loadState(self, *args)
ossimImageMosaic_swigregister = _pyossim.ossimImageMosaic_swigregister
ossimImageMosaic_swigregister(ossimImageMosaic)

class ossimImageSourceFactoryBase(ossimObjectFactory):
    __swig_setmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageSourceFactoryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageSourceFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def createImageSource(self, *args): return _pyossim.ossimImageSourceFactoryBase_createImageSource(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimImageSourceFactoryBase
    __del__ = lambda self : None;
ossimImageSourceFactoryBase_swigregister = _pyossim.ossimImageSourceFactoryBase_swigregister
ossimImageSourceFactoryBase_swigregister(ossimImageSourceFactoryBase)

class ossimImageSourceSequencer(ossimImageSource,ossimConnectableObjectListener):
    __swig_setmethods__ = {}
    for _s in [ossimImageSource,ossimConnectableObjectListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageSourceSequencer, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimImageSource,ossimConnectableObjectListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageSourceSequencer, name)
    __repr__ = _swig_repr
    def __init__(self, inputSource = None, owner = None): 
        this = _pyossim.new_ossimImageSourceSequencer(inputSource, owner)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimImageSourceSequencer
    __del__ = lambda self : None;
    def getNumberOfTiles(self): return _pyossim.ossimImageSourceSequencer_getNumberOfTiles(self)
    def getNumberOfTilesHorizontal(self): return _pyossim.ossimImageSourceSequencer_getNumberOfTilesHorizontal(self)
    def getNumberOfTilesVertical(self): return _pyossim.ossimImageSourceSequencer_getNumberOfTilesVertical(self)
    def initialize(self): return _pyossim.ossimImageSourceSequencer_initialize(self)
    def setAreaOfInterest(self, *args): return _pyossim.ossimImageSourceSequencer_setAreaOfInterest(self, *args)
    def getAreaOfInterest(self): return _pyossim.ossimImageSourceSequencer_getAreaOfInterest(self)
    def setToStartOfSequence(self): return _pyossim.ossimImageSourceSequencer_setToStartOfSequence(self)
    def getNextTile(self, resLevel = 0): return _pyossim.ossimImageSourceSequencer_getNextTile(self, resLevel)
    def getTileOrigin(self, *args): return _pyossim.ossimImageSourceSequencer_getTileOrigin(self, *args)
    def getTileRect(self, *args): return _pyossim.ossimImageSourceSequencer_getTileRect(self, *args)
    def getTile(self, *args): return _pyossim.ossimImageSourceSequencer_getTile(self, *args)
    def getBoundingRect(self, resLevel = 0): return _pyossim.ossimImageSourceSequencer_getBoundingRect(self, resLevel)
    def getDecimationFactor(self, *args): return _pyossim.ossimImageSourceSequencer_getDecimationFactor(self, *args)
    def getDecimationFactors(self, *args): return _pyossim.ossimImageSourceSequencer_getDecimationFactors(self, *args)
    def getNumberOfDecimationLevels(self): return _pyossim.ossimImageSourceSequencer_getNumberOfDecimationLevels(self)
    def getNumberOfInputBands(self): return _pyossim.ossimImageSourceSequencer_getNumberOfInputBands(self)
    def getOutputScalarType(self): return _pyossim.ossimImageSourceSequencer_getOutputScalarType(self)
    def getTileWidth(self): return _pyossim.ossimImageSourceSequencer_getTileWidth(self)
    def getTileHeight(self): return _pyossim.ossimImageSourceSequencer_getTileHeight(self)
    def slaveProcessTiles(self): return _pyossim.ossimImageSourceSequencer_slaveProcessTiles(self)
    def isMaster(self): return _pyossim.ossimImageSourceSequencer_isMaster(self)
    def getTileSize(self): return _pyossim.ossimImageSourceSequencer_getTileSize(self)
    def setTileSize(self, *args): return _pyossim.ossimImageSourceSequencer_setTileSize(self, *args)
    def connectInputEvent(self, *args): return _pyossim.ossimImageSourceSequencer_connectInputEvent(self, *args)
    def disconnectInputEvent(self, *args): return _pyossim.ossimImageSourceSequencer_disconnectInputEvent(self, *args)
    def const_ossimConnectableObject_canConnectMyInputTo(self, *args): return _pyossim.ossimImageSourceSequencer_const_ossimConnectableObject_canConnectMyInputTo(self, *args)
    def getNullPixelValue(self, band = 0): return _pyossim.ossimImageSourceSequencer_getNullPixelValue(self, band)
    def getMinPixelValue(self, band = 0): return _pyossim.ossimImageSourceSequencer_getMinPixelValue(self, band)
    def getMaxPixelValue(self, band = 0): return _pyossim.ossimImageSourceSequencer_getMaxPixelValue(self, band)
ossimImageSourceSequencer_swigregister = _pyossim.ossimImageSourceSequencer_swigregister
ossimImageSourceSequencer_swigregister(ossimImageSourceSequencer)

class ossimImageWriter(ossimOutputSource):
    __swig_setmethods__ = {}
    for _s in [ossimOutputSource]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimOutputSource]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageWriter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimImageWriter
    __del__ = lambda self : None;
    def setViewingRect(self, *args): return _pyossim.ossimImageWriter_setViewingRect(self, *args)
    def getAreaOfInterest(self): return _pyossim.ossimImageWriter_getAreaOfInterest(self)
    def setAreaOfInterest(self, *args): return _pyossim.ossimImageWriter_setAreaOfInterest(self, *args)
    def saveState(self, *args): return _pyossim.ossimImageWriter_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageWriter_loadState(self, *args)
ossimImageWriter_swigregister = _pyossim.ossimImageWriter_swigregister
ossimImageWriter_swigregister(ossimImageWriter)

class ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter()
        try: self.this.append(this)
        except: self.this = this
    def addFactory(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_addFactory(self, *args)
    def isFactoryRegistered(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_isFactoryRegistered(self, *args)
    def registerFactory(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_registerFactory(self, *args)
    def unregisterFactory(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_unregisterFactory(self, *args)
    def unregisterAllFactories(self): return _pyossim.ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_unregisterAllFactories(self)
    def registerFactoryToFront(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_registerFactoryToFront(self, *args)
    def registerFactoryBefore(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_registerFactoryBefore(self, *args)
    def getAllTypeNamesFromRegistry(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_getAllTypeNamesFromRegistry(self, *args)
    def createObjectFromRegistry(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_createObjectFromRegistry(self, *args)
    def createNativeObjectFromRegistry(self, *args): return _pyossim.ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_createNativeObjectFromRegistry(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter
    __del__ = lambda self : None;
ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_swigregister = _pyossim.ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_swigregister
ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter_swigregister(ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter)

class ossimImageWriterFactoryRegistry(ossimObjectFactory,ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter):
    __swig_setmethods__ = {}
    for _s in [ossimObjectFactory,ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageWriterFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObjectFactory,ossimFactoryListInterface_ossimImageWriterFactoryBase_ossimImageFileWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageWriterFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimImageWriterFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimImageWriterFactoryRegistry_instance)
    def createWriterFromExtension(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_createWriterFromExtension(self, *args)
    def createWriter(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_createWriter(self, *args)
    def createObject(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_getTypeNameList(self, *args)
    def getImageTypeList(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_getImageTypeList(self, *args)
    def getImageFileWritersBySuffix(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_getImageFileWritersBySuffix(self, *args)
    def getImageFileWritersByMimeType(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_getImageFileWritersByMimeType(self, *args)
    def printImageTypeList(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_printImageTypeList(self, *args)
    def printWriterProps(self, *args): return _pyossim.ossimImageWriterFactoryRegistry_printWriterProps(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimImageWriterFactoryRegistry
    __del__ = lambda self : None;
ossimImageWriterFactoryRegistry_swigregister = _pyossim.ossimImageWriterFactoryRegistry_swigregister
ossimImageWriterFactoryRegistry_swigregister(ossimImageWriterFactoryRegistry)

def ossimImageWriterFactoryRegistry_instance():
  return _pyossim.ossimImageWriterFactoryRegistry_instance()
ossimImageWriterFactoryRegistry_instance = _pyossim.ossimImageWriterFactoryRegistry_instance


def ossimImageWriterFactoryRegistryGetInstance():
  return _pyossim.ossimImageWriterFactoryRegistryGetInstance()
ossimImageWriterFactoryRegistryGetInstance = _pyossim.ossimImageWriterFactoryRegistryGetInstance
class ossimImageFileWriter(ossimImageWriter,ossimProcessInterface,ossimConnectableObjectListener):
    __swig_setmethods__ = {}
    for _s in [ossimImageWriter,ossimProcessInterface,ossimConnectableObjectListener]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimImageFileWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimImageWriter,ossimProcessInterface,ossimConnectableObjectListener]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimImageFileWriter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimImageFileWriter
    __del__ = lambda self : None;
    def getObject(self, *args): return _pyossim.ossimImageFileWriter_getObject(self, *args)
    def getImageTypeList(self, *args): return _pyossim.ossimImageFileWriter_getImageTypeList(self, *args)
    def getExtension(self): return _pyossim.ossimImageFileWriter_getExtension(self)
    def getOutputHasInternalOverviews(self): return _pyossim.ossimImageFileWriter_getOutputHasInternalOverviews(self)
    def hasImageType(self, *args): return _pyossim.ossimImageFileWriter_hasImageType(self, *args)
    def setTileSize(self, *args): return _pyossim.ossimImageFileWriter_setTileSize(self, *args)
    def writeEnviHeaderFile(self): return _pyossim.ossimImageFileWriter_writeEnviHeaderFile(self)
    def writeErsHeaderFile(self): return _pyossim.ossimImageFileWriter_writeErsHeaderFile(self)
    def writeExternalGeometryFile(self): return _pyossim.ossimImageFileWriter_writeExternalGeometryFile(self)
    def writeFgdcFile(self): return _pyossim.ossimImageFileWriter_writeFgdcFile(self)
    def writeHistogramFile(self): return _pyossim.ossimImageFileWriter_writeHistogramFile(self)
    def writeJpegWorldFile(self): return _pyossim.ossimImageFileWriter_writeJpegWorldFile(self)
    def writeOverviewFile(self, tiff_compress_type = 1, jpeg_compress_quality = 75, 
    includeR0 = False): return _pyossim.ossimImageFileWriter_writeOverviewFile(self, tiff_compress_type, jpeg_compress_quality, includeR0)
    def writeReadmeFile(self): return _pyossim.ossimImageFileWriter_writeReadmeFile(self)
    def writeTiffWorldFile(self): return _pyossim.ossimImageFileWriter_writeTiffWorldFile(self)
    def writeWorldFile(self): return _pyossim.ossimImageFileWriter_writeWorldFile(self)
    def writeMetaDataFiles(self): return _pyossim.ossimImageFileWriter_writeMetaDataFiles(self)
    def setAreaOfInterest(self, *args): return _pyossim.ossimImageFileWriter_setAreaOfInterest(self, *args)
    def changeSequencer(self, *args): return _pyossim.ossimImageFileWriter_changeSequencer(self, *args)
    def getSequencer(self): return _pyossim.ossimImageFileWriter_getSequencer(self)
    def initialize(self): return _pyossim.ossimImageFileWriter_initialize(self)
    def execute(self): return _pyossim.ossimImageFileWriter_execute(self)
    def writeStream(self): return _pyossim.ossimImageFileWriter_writeStream(self)
    def setOutputStream(self, *args): return _pyossim.ossimImageFileWriter_setOutputStream(self, *args)
    def getOutputStream(self): return _pyossim.ossimImageFileWriter_getOutputStream(self)
    def setPercentComplete(self, *args): return _pyossim.ossimImageFileWriter_setPercentComplete(self, *args)
    def setOutputImageType(self, *args): return _pyossim.ossimImageFileWriter_setOutputImageType(self, *args)
    def getOutputImageType(self): return _pyossim.ossimImageFileWriter_getOutputImageType(self)
    def getOutputImageTypeString(self): return _pyossim.ossimImageFileWriter_getOutputImageTypeString(self)
    def setOutputName(self, *args): return _pyossim.ossimImageFileWriter_setOutputName(self, *args)
    def setFilename(self, *args): return _pyossim.ossimImageFileWriter_setFilename(self, *args)
    def getFilename(self): return _pyossim.ossimImageFileWriter_getFilename(self)
    def saveState(self, *args): return _pyossim.ossimImageFileWriter_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimImageFileWriter_loadState(self, *args)
    def const_ossimConnectableObject_canConnectMyInputTo(self, *args): return _pyossim.ossimImageFileWriter_const_ossimConnectableObject_canConnectMyInputTo(self, *args)
    def disconnectInputEvent(self, *args): return _pyossim.ossimImageFileWriter_disconnectInputEvent(self, *args)
    def connectInputEvent(self, *args): return _pyossim.ossimImageFileWriter_connectInputEvent(self, *args)
    def propertyEvent(self, *args): return _pyossim.ossimImageFileWriter_propertyEvent(self, *args)
    def getWriteImageFlag(self): return _pyossim.ossimImageFileWriter_getWriteImageFlag(self)
    def getWriteHistogramFlag(self): return _pyossim.ossimImageFileWriter_getWriteHistogramFlag(self)
    def getWriteOverviewFlag(self): return _pyossim.ossimImageFileWriter_getWriteOverviewFlag(self)
    def getScaleToEightBitFlag(self): return _pyossim.ossimImageFileWriter_getScaleToEightBitFlag(self)
    def getWriteEnviHeaderFlag(self): return _pyossim.ossimImageFileWriter_getWriteEnviHeaderFlag(self)
    def getWriteErsHeaderFlag(self): return _pyossim.ossimImageFileWriter_getWriteErsHeaderFlag(self)
    def getWriteExternalGeometryFlag(self): return _pyossim.ossimImageFileWriter_getWriteExternalGeometryFlag(self)
    def getWriteFgdcFlag(self): return _pyossim.ossimImageFileWriter_getWriteFgdcFlag(self)
    def getWriteJpegWorldFileFlag(self): return _pyossim.ossimImageFileWriter_getWriteJpegWorldFileFlag(self)
    def getWriteReadmeFlag(self): return _pyossim.ossimImageFileWriter_getWriteReadmeFlag(self)
    def getWriteTiffWorldFileFlag(self): return _pyossim.ossimImageFileWriter_getWriteTiffWorldFileFlag(self)
    def getWriteWorldFileFlag(self): return _pyossim.ossimImageFileWriter_getWriteWorldFileFlag(self)
    def setWriteImageFlag(self, *args): return _pyossim.ossimImageFileWriter_setWriteImageFlag(self, *args)
    def setWriteOverviewFlag(self, *args): return _pyossim.ossimImageFileWriter_setWriteOverviewFlag(self, *args)
    def setWriteHistogramFlag(self, *args): return _pyossim.ossimImageFileWriter_setWriteHistogramFlag(self, *args)
    def setScaleToEightBitFlag(self, *args): return _pyossim.ossimImageFileWriter_setScaleToEightBitFlag(self, *args)
    def setWriteEnviHeaderFlag(self, *args): return _pyossim.ossimImageFileWriter_setWriteEnviHeaderFlag(self, *args)
    def setWriteErsHeaderFlag(self, *args): return _pyossim.ossimImageFileWriter_setWriteErsHeaderFlag(self, *args)
    def setWriteExternalGeometryFlag(self, *args): return _pyossim.ossimImageFileWriter_setWriteExternalGeometryFlag(self, *args)
    def setWriteFgdcFlag(self, *args): return _pyossim.ossimImageFileWriter_setWriteFgdcFlag(self, *args)
    def setWriteJpegWorldFile(self, *args): return _pyossim.ossimImageFileWriter_setWriteJpegWorldFile(self, *args)
    def setWriteReadme(self, *args): return _pyossim.ossimImageFileWriter_setWriteReadme(self, *args)
    def setWriteTiffWorldFile(self, *args): return _pyossim.ossimImageFileWriter_setWriteTiffWorldFile(self, *args)
    def setWriteWorldFile(self, *args): return _pyossim.ossimImageFileWriter_setWriteWorldFile(self, *args)
    def getOverviewCompressType(self): return _pyossim.ossimImageFileWriter_getOverviewCompressType(self)
    def getOverviewJpegCompressQuality(self): return _pyossim.ossimImageFileWriter_getOverviewJpegCompressQuality(self)
    def setOverviewCompressType(self, *args): return _pyossim.ossimImageFileWriter_setOverviewCompressType(self, *args)
    def setOverviewJpegCompressQuality(self, *args): return _pyossim.ossimImageFileWriter_setOverviewJpegCompressQuality(self, *args)
    def setProperty(self, *args): return _pyossim.ossimImageFileWriter_setProperty(self, *args)
    def getProperty(self, *args): return _pyossim.ossimImageFileWriter_getProperty(self, *args)
    def getPropertyNames(self, *args): return _pyossim.ossimImageFileWriter_getPropertyNames(self, *args)
    def addListener(self, *args): return _pyossim.ossimImageFileWriter_addListener(self, *args)
    def removeListener(self, *args): return _pyossim.ossimImageFileWriter_removeListener(self, *args)
    def setPixelType(self, *args): return _pyossim.ossimImageFileWriter_setPixelType(self, *args)
    def getPixelType(self): return _pyossim.ossimImageFileWriter_getPixelType(self)
    def getPixelTypeString(self, *args): return _pyossim.ossimImageFileWriter_getPixelTypeString(self, *args)
ossimImageFileWriter_swigregister = _pyossim.ossimImageFileWriter_swigregister
ossimImageFileWriter_swigregister(ossimImageFileWriter)

class ossimJpegWriter(ossimImageFileWriter):
    __swig_setmethods__ = {}
    for _s in [ossimImageFileWriter]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimJpegWriter, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimImageFileWriter]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimJpegWriter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimJpegWriter()
        try: self.this.append(this)
        except: self.this = this
    def getImageTypeList(self, *args): return _pyossim.ossimJpegWriter_getImageTypeList(self, *args)
    def setQuality(self, *args): return _pyossim.ossimJpegWriter_setQuality(self, *args)
    def isOpen(self): return _pyossim.ossimJpegWriter_isOpen(self)
    def open(self): return _pyossim.ossimJpegWriter_open(self)
    def close(self): return _pyossim.ossimJpegWriter_close(self)
    def saveState(self, *args): return _pyossim.ossimJpegWriter_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimJpegWriter_loadState(self, *args)
    def setProperty(self, *args): return _pyossim.ossimJpegWriter_setProperty(self, *args)
    def getProperty(self, *args): return _pyossim.ossimJpegWriter_getProperty(self, *args)
    def getPropertyNames(self, *args): return _pyossim.ossimJpegWriter_getPropertyNames(self, *args)
    def getExtension(self): return _pyossim.ossimJpegWriter_getExtension(self)
    def hasImageType(self, *args): return _pyossim.ossimJpegWriter_hasImageType(self, *args)
ossimJpegWriter_swigregister = _pyossim.ossimJpegWriter_swigregister
ossimJpegWriter_swigregister(ossimJpegWriter)

ossimTiffTileSource_HEADER = _pyossim.ossimTiffTileSource_HEADER
class ossimTiffTileSource(ossimImageHandler):
    __swig_setmethods__ = {}
    for _s in [ossimImageHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimTiffTileSource, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimImageHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimTiffTileSource, name)
    __repr__ = _swig_repr
    UNKNOWN = _pyossim.ossimTiffTileSource_UNKNOWN
    READ_RGBA_U8_TILE = _pyossim.ossimTiffTileSource_READ_RGBA_U8_TILE
    READ_RGBA_U8_STRIP = _pyossim.ossimTiffTileSource_READ_RGBA_U8_STRIP
    READ_RGBA_U8A_STRIP = _pyossim.ossimTiffTileSource_READ_RGBA_U8A_STRIP
    READ_SCAN_LINE = _pyossim.ossimTiffTileSource_READ_SCAN_LINE
    READ_TILE = _pyossim.ossimTiffTileSource_READ_TILE
    def __init__(self): 
        this = _pyossim.new_ossimTiffTileSource()
        try: self.this.append(this)
        except: self.this = this
    def getLongName(self): return _pyossim.ossimTiffTileSource_getLongName(self)
    def getShortName(self): return _pyossim.ossimTiffTileSource_getShortName(self)
    def open(self, *args): return _pyossim.ossimTiffTileSource_open(self, *args)
    def close(self): return _pyossim.ossimTiffTileSource_close(self)
    def getTile(self, *args): return _pyossim.ossimTiffTileSource_getTile(self, *args)
    def getNumberOfInputBands(self): return _pyossim.ossimTiffTileSource_getNumberOfInputBands(self)
    def getNumberOfOutputBands(self): return _pyossim.ossimTiffTileSource_getNumberOfOutputBands(self)
    def getNumberOfLines(self, resLevel = 0): return _pyossim.ossimTiffTileSource_getNumberOfLines(self, resLevel)
    def getNumberOfSamples(self, resLevel = 0): return _pyossim.ossimTiffTileSource_getNumberOfSamples(self, resLevel)
    def getNumberOfDirectories(self): return _pyossim.ossimTiffTileSource_getNumberOfDirectories(self)
    def getNumberOfDecimationLevels(self): return _pyossim.ossimTiffTileSource_getNumberOfDecimationLevels(self)
    def saveState(self, *args): return _pyossim.ossimTiffTileSource_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimTiffTileSource_loadState(self, *args)
    def isOpen(self): return _pyossim.ossimTiffTileSource_isOpen(self)
    def getOutputScalarType(self): return _pyossim.ossimTiffTileSource_getOutputScalarType(self)
    def getTileWidth(self): return _pyossim.ossimTiffTileSource_getTileWidth(self)
    def getTileHeight(self): return _pyossim.ossimTiffTileSource_getTileHeight(self)
    def hasR0(self): return _pyossim.ossimTiffTileSource_hasR0(self)
    def getMinPixelValue(self, band = 0): return _pyossim.ossimTiffTileSource_getMinPixelValue(self, band)
    def getMaxPixelValue(self, band = 0): return _pyossim.ossimTiffTileSource_getMaxPixelValue(self, band)
    def getNullPixelValue(self, band = 0): return _pyossim.ossimTiffTileSource_getNullPixelValue(self, band)
    def isValidRLevel(self, *args): return _pyossim.ossimTiffTileSource_isValidRLevel(self, *args)
    def getImageTileWidth(self): return _pyossim.ossimTiffTileSource_getImageTileWidth(self)
    def getImageTileHeight(self): return _pyossim.ossimTiffTileSource_getImageTileHeight(self)
    def setApplyColorPaletteFlag(self, *args): return _pyossim.ossimTiffTileSource_setApplyColorPaletteFlag(self, *args)
    def getApplyColorPaletteFlag(self): return _pyossim.ossimTiffTileSource_getApplyColorPaletteFlag(self)
    def setProperty(self, *args): return _pyossim.ossimTiffTileSource_setProperty(self, *args)
    def getProperty(self, *args): return _pyossim.ossimTiffTileSource_getProperty(self, *args)
    def getPropertyNames(self, *args): return _pyossim.ossimTiffTileSource_getPropertyNames(self, *args)
    def isColorMapped(self): return _pyossim.ossimTiffTileSource_isColorMapped(self)
    def ossimObject_print(self, *args): return _pyossim.ossimTiffTileSource_ossimObject_print(self, *args)
    def tiffPtr(self): return _pyossim.ossimTiffTileSource_tiffPtr(self)
ossimTiffTileSource_swigregister = _pyossim.ossimTiffTileSource_swigregister
ossimTiffTileSource_swigregister(ossimTiffTileSource)

class ossimNormalizedRemapTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNormalizedRemapTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNormalizedRemapTable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimNormalizedRemapTable
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _pyossim.ossimNormalizedRemapTable___getitem__(self, *args)
    def normFromPix(self, *args): return _pyossim.ossimNormalizedRemapTable_normFromPix(self, *args)
    def pixFromNorm(self, *args): return _pyossim.ossimNormalizedRemapTable_pixFromNorm(self, *args)
    def getEntries(self): return _pyossim.ossimNormalizedRemapTable_getEntries(self)
    def getNormalizer(self): return _pyossim.ossimNormalizedRemapTable_getNormalizer(self)
ossimNormalizedRemapTable_swigregister = _pyossim.ossimNormalizedRemapTable_swigregister
ossimNormalizedRemapTable_swigregister(ossimNormalizedRemapTable)

class ossimNormalizedS16RemapTable(ossimNormalizedRemapTable):
    __swig_setmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNormalizedS16RemapTable, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNormalizedS16RemapTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNormalizedS16RemapTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNormalizedS16RemapTable
    __del__ = lambda self : None;
    TABLE_ENTRIES = _pyossim.ossimNormalizedS16RemapTable_TABLE_ENTRIES
    OFFSET_TO_ZERO = _pyossim.ossimNormalizedS16RemapTable_OFFSET_TO_ZERO
    NULL_PIX = _pyossim.ossimNormalizedS16RemapTable_NULL_PIX
    MIN_PIX = _pyossim.ossimNormalizedS16RemapTable_MIN_PIX
    def getEntries(self): return _pyossim.ossimNormalizedS16RemapTable_getEntries(self)
    def __getitem__(self, *args): return _pyossim.ossimNormalizedS16RemapTable___getitem__(self, *args)
    def normFromPix(self, *args): return _pyossim.ossimNormalizedS16RemapTable_normFromPix(self, *args)
    def pixFromNorm(self, *args): return _pyossim.ossimNormalizedS16RemapTable_pixFromNorm(self, *args)
ossimNormalizedS16RemapTable_swigregister = _pyossim.ossimNormalizedS16RemapTable_swigregister
ossimNormalizedS16RemapTable_swigregister(ossimNormalizedS16RemapTable)

class ossimNormalizedU11RemapTable(ossimNormalizedRemapTable):
    __swig_setmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNormalizedU11RemapTable, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNormalizedU11RemapTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNormalizedU11RemapTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNormalizedU11RemapTable
    __del__ = lambda self : None;
    TABLE_ENTRIES = _pyossim.ossimNormalizedU11RemapTable_TABLE_ENTRIES
    def getEntries(self): return _pyossim.ossimNormalizedU11RemapTable_getEntries(self)
    def __getitem__(self, *args): return _pyossim.ossimNormalizedU11RemapTable___getitem__(self, *args)
    def normFromPix(self, *args): return _pyossim.ossimNormalizedU11RemapTable_normFromPix(self, *args)
    def pixFromNorm(self, *args): return _pyossim.ossimNormalizedU11RemapTable_pixFromNorm(self, *args)
ossimNormalizedU11RemapTable_swigregister = _pyossim.ossimNormalizedU11RemapTable_swigregister
ossimNormalizedU11RemapTable_swigregister(ossimNormalizedU11RemapTable)

class ossimNormalizedU16RemapTable(ossimNormalizedRemapTable):
    __swig_setmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNormalizedU16RemapTable, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNormalizedU16RemapTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNormalizedU16RemapTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNormalizedU16RemapTable
    __del__ = lambda self : None;
    TABLE_ENTRIES = _pyossim.ossimNormalizedU16RemapTable_TABLE_ENTRIES
    def getEntries(self): return _pyossim.ossimNormalizedU16RemapTable_getEntries(self)
    def __getitem__(self, *args): return _pyossim.ossimNormalizedU16RemapTable___getitem__(self, *args)
    def normFromPix(self, *args): return _pyossim.ossimNormalizedU16RemapTable_normFromPix(self, *args)
    def pixFromNorm(self, *args): return _pyossim.ossimNormalizedU16RemapTable_pixFromNorm(self, *args)
ossimNormalizedU16RemapTable_swigregister = _pyossim.ossimNormalizedU16RemapTable_swigregister
ossimNormalizedU16RemapTable_swigregister(ossimNormalizedU16RemapTable)

class ossimNormalizedU8RemapTable(ossimNormalizedRemapTable):
    __swig_setmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimNormalizedU8RemapTable, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimNormalizedRemapTable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimNormalizedU8RemapTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimNormalizedU8RemapTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimNormalizedU8RemapTable
    __del__ = lambda self : None;
    TABLE_ENTRIES = _pyossim.ossimNormalizedU8RemapTable_TABLE_ENTRIES
    def getEntries(self): return _pyossim.ossimNormalizedU8RemapTable_getEntries(self)
    def __getitem__(self, *args): return _pyossim.ossimNormalizedU8RemapTable___getitem__(self, *args)
    def normFromPix(self, *args): return _pyossim.ossimNormalizedU8RemapTable_normFromPix(self, *args)
    def pixFromNorm(self, *args): return _pyossim.ossimNormalizedU8RemapTable_pixFromNorm(self, *args)
ossimNormalizedU8RemapTable_swigregister = _pyossim.ossimNormalizedU8RemapTable_swigregister
ossimNormalizedU8RemapTable_swigregister(ossimNormalizedU8RemapTable)

class ossimOverviewBuilderFactoryBase(ossimObjectFactory):
    __swig_setmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimOverviewBuilderFactoryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObjectFactory]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimOverviewBuilderFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimOverviewBuilderFactoryBase
    __del__ = lambda self : None;
    def createBuilder(self, *args): return _pyossim.ossimOverviewBuilderFactoryBase_createBuilder(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimOverviewBuilderFactoryBase_getTypeNameList(self, *args)
    def createObject(self, *args): return _pyossim.ossimOverviewBuilderFactoryBase_createObject(self, *args)
ossimOverviewBuilderFactoryBase_swigregister = _pyossim.ossimOverviewBuilderFactoryBase_swigregister
ossimOverviewBuilderFactoryBase_swigregister(ossimOverviewBuilderFactoryBase)

class ossimOverviewBuilderFactory(ossimOverviewBuilderFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ossimOverviewBuilderFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimOverviewBuilderFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimOverviewBuilderFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimOverviewBuilderFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimOverviewBuilderFactory_instance
    if _newclass:instance = staticmethod(_pyossim.ossimOverviewBuilderFactory_instance)
    __swig_destroy__ = _pyossim.delete_ossimOverviewBuilderFactory
    __del__ = lambda self : None;
    def createBuilder(self, *args): return _pyossim.ossimOverviewBuilderFactory_createBuilder(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimOverviewBuilderFactory_getTypeNameList(self, *args)
ossimOverviewBuilderFactory_swigregister = _pyossim.ossimOverviewBuilderFactory_swigregister
ossimOverviewBuilderFactory_swigregister(ossimOverviewBuilderFactory)

def ossimOverviewBuilderFactory_instance():
  return _pyossim.ossimOverviewBuilderFactory_instance()
ossimOverviewBuilderFactory_instance = _pyossim.ossimOverviewBuilderFactory_instance

class ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase()
        try: self.this.append(this)
        except: self.this = this
    def addFactory(self, *args): return _pyossim.ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_addFactory(self, *args)
    def isFactoryRegistered(self, *args): return _pyossim.ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_isFactoryRegistered(self, *args)
    def registerFactory(self, *args): return _pyossim.ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_registerFactory(self, *args)
    def unregisterFactory(self, *args): return _pyossim.ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_unregisterFactory(self, *args)
    def unregisterAllFactories(self): return _pyossim.ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_unregisterAllFactories(self)
    def registerFactoryToFront(self, *args): return _pyossim.ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_registerFactoryToFront(self, *args)
    def registerFactoryBefore(self, *args): return _pyossim.ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_registerFactoryBefore(self, *args)
    def getAllTypeNamesFromRegistry(self, *args): return _pyossim.ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_getAllTypeNamesFromRegistry(self, *args)
    def createObjectFromRegistry(self, *args): return _pyossim.ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_createObjectFromRegistry(self, *args)
    def createNativeObjectFromRegistry(self, *args): return _pyossim.ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_createNativeObjectFromRegistry(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase
    __del__ = lambda self : None;
ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_swigregister = _pyossim.ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_swigregister
ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase_swigregister(ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase)

ossimOverviewBuilderFactoryRegistry_HEADER = _pyossim.ossimOverviewBuilderFactoryRegistry_HEADER
class ossimOverviewBuilderFactoryRegistry(ossimObjectFactory,ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase):
    __swig_setmethods__ = {}
    for _s in [ossimObjectFactory,ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimOverviewBuilderFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObjectFactory,ossimFactoryListInterface_ossimOverviewBuilderFactoryBase_ossimOverviewBuilderBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimOverviewBuilderFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimOverviewBuilderFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimOverviewBuilderFactoryRegistry_instance)
    def createObject(self, *args): return _pyossim.ossimOverviewBuilderFactoryRegistry_createObject(self, *args)
    def createBuilder(self, *args): return _pyossim.ossimOverviewBuilderFactoryRegistry_createBuilder(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimOverviewBuilderFactoryRegistry_getTypeNameList(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimOverviewBuilderFactoryRegistry
    __del__ = lambda self : None;
ossimOverviewBuilderFactoryRegistry_swigregister = _pyossim.ossimOverviewBuilderFactoryRegistry_swigregister
ossimOverviewBuilderFactoryRegistry_swigregister(ossimOverviewBuilderFactoryRegistry)

def ossimOverviewBuilderFactoryRegistry_instance():
  return _pyossim.ossimOverviewBuilderFactoryRegistry_instance()
ossimOverviewBuilderFactoryRegistry_instance = _pyossim.ossimOverviewBuilderFactoryRegistry_instance

ossimOverviewSequencer_HEADER = _pyossim.ossimOverviewSequencer_HEADER
class ossimOverviewSequencer(ossimReferenced):
    __swig_setmethods__ = {}
    for _s in [ossimReferenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimOverviewSequencer, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimReferenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimOverviewSequencer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimOverviewSequencer()
        try: self.this.append(this)
        except: self.this = this
    def getNumberOfTiles(self): return _pyossim.ossimOverviewSequencer_getNumberOfTiles(self)
    def getNumberOfTilesHorizontal(self): return _pyossim.ossimOverviewSequencer_getNumberOfTilesHorizontal(self)
    def getNumberOfTilesVertical(self): return _pyossim.ossimOverviewSequencer_getNumberOfTilesVertical(self)
    def getOutputImageRectangle(self, *args): return _pyossim.ossimOverviewSequencer_getOutputImageRectangle(self, *args)
    def setImageHandler(self, *args): return _pyossim.ossimOverviewSequencer_setImageHandler(self, *args)
    def setBitMaskObjects(self, *args): return _pyossim.ossimOverviewSequencer_setBitMaskObjects(self, *args)
    def setSourceLevel(self, *args): return _pyossim.ossimOverviewSequencer_setSourceLevel(self, *args)
    def getHistogramMode(self): return _pyossim.ossimOverviewSequencer_getHistogramMode(self)
    def setHistogramMode(self, *args): return _pyossim.ossimOverviewSequencer_setHistogramMode(self, *args)
    def writeHistogram(self, *args): return _pyossim.ossimOverviewSequencer_writeHistogram(self, *args)
    def initialize(self): return _pyossim.ossimOverviewSequencer_initialize(self)
    def setToStartOfSequence(self): return _pyossim.ossimOverviewSequencer_setToStartOfSequence(self)
    def getNextTile(self): return _pyossim.ossimOverviewSequencer_getNextTile(self)
    def slaveProcessTiles(self): return _pyossim.ossimOverviewSequencer_slaveProcessTiles(self)
    def isMaster(self): return _pyossim.ossimOverviewSequencer_isMaster(self)
    def getTileSize(self): return _pyossim.ossimOverviewSequencer_getTileSize(self)
    def setTileSize(self, *args): return _pyossim.ossimOverviewSequencer_setTileSize(self, *args)
    def setResampleType(self, *args): return _pyossim.ossimOverviewSequencer_setResampleType(self, *args)
    def setScanForMinMax(self, *args): return _pyossim.ossimOverviewSequencer_setScanForMinMax(self, *args)
    def getScanForMinMax(self): return _pyossim.ossimOverviewSequencer_getScanForMinMax(self)
    def setScanForMinMaxNull(self, *args): return _pyossim.ossimOverviewSequencer_setScanForMinMaxNull(self, *args)
    def getScanForMinMaxNull(self): return _pyossim.ossimOverviewSequencer_getScanForMinMaxNull(self)
    def writeOmdFile(self, *args): return _pyossim.ossimOverviewSequencer_writeOmdFile(self, *args)
ossimOverviewSequencer_swigregister = _pyossim.ossimOverviewSequencer_swigregister
ossimOverviewSequencer_swigregister(ossimOverviewSequencer)

class ossimApplanixEORecordRefPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimApplanixEORecordRefPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimApplanixEORecordRefPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimApplanixEORecordRefPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimApplanixEORecordRefPtr
    __del__ = lambda self : None;
    def __ref__(self, *args): return _pyossim.ossimApplanixEORecordRefPtr___ref__(self, *args)
    def __deref__(self, *args): return _pyossim.ossimApplanixEORecordRefPtr___deref__(self, *args)
    def valid(self): return _pyossim.ossimApplanixEORecordRefPtr_valid(self)
    def get(self, *args): return _pyossim.ossimApplanixEORecordRefPtr_get(self, *args)
    def take(self): return _pyossim.ossimApplanixEORecordRefPtr_take(self)
    def release(self): return _pyossim.ossimApplanixEORecordRefPtr_release(self)
    __swig_getmethods__["theField"] = _pyossim.ossimApplanixEORecordRefPtr_theField_get
    if _newclass:theField = _swig_property(_pyossim.ossimApplanixEORecordRefPtr_theField_get)
    def ref(self): return _pyossim.ossimApplanixEORecordRefPtr_ref(self)
    def unref(self): return _pyossim.ossimApplanixEORecordRefPtr_unref(self)
    def unref_nodelete(self): return _pyossim.ossimApplanixEORecordRefPtr_unref_nodelete(self)
    def referenceCount(self): return _pyossim.ossimApplanixEORecordRefPtr_referenceCount(self)
ossimApplanixEORecordRefPtr_swigregister = _pyossim.ossimApplanixEORecordRefPtr_swigregister
ossimApplanixEORecordRefPtr_swigregister(ossimApplanixEORecordRefPtr)

ossimApplanixEOFile_HEADER = _pyossim.ossimApplanixEOFile_HEADER
class ossimApplanixEORecord(ossimReferenced):
    __swig_setmethods__ = {}
    for _s in [ossimReferenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimApplanixEORecord, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimReferenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimApplanixEORecord, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimApplanixEORecord(*args)
        try: self.this.append(this)
        except: self.this = this
    def setSize(self, *args): return _pyossim.ossimApplanixEORecord_setSize(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimApplanixEORecord___getitem__(self, *args)
    __swig_setmethods__["theField"] = _pyossim.ossimApplanixEORecord_theField_set
    __swig_getmethods__["theField"] = _pyossim.ossimApplanixEORecord_theField_get
    if _newclass:theField = _swig_property(_pyossim.ossimApplanixEORecord_theField_get, _pyossim.ossimApplanixEORecord_theField_set)
    __swig_destroy__ = _pyossim.delete_ossimApplanixEORecord
    __del__ = lambda self : None;
ossimApplanixEORecord_swigregister = _pyossim.ossimApplanixEORecord_swigregister
ossimApplanixEORecord_swigregister(ossimApplanixEORecord)

class ossimApplanixEOFile(ossimReferenced):
    __swig_setmethods__ = {}
    for _s in [ossimReferenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimApplanixEOFile, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimReferenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimApplanixEOFile, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimApplanixEOFile()
        try: self.this.append(this)
        except: self.this = this
    def parseFile(self, *args): return _pyossim.ossimApplanixEOFile_parseFile(self, *args)
    def parseStream(self, *args): return _pyossim.ossimApplanixEOFile_parseStream(self, *args)
    def isEOFile(self, *args): return _pyossim.ossimApplanixEOFile_isEOFile(self, *args)
    def parseHeader(self, *args): return _pyossim.ossimApplanixEOFile_parseHeader(self, *args)
    def getFieldIdxLike(self, *args): return _pyossim.ossimApplanixEOFile_getFieldIdxLike(self, *args)
    def getFieldIdx(self, *args): return _pyossim.ossimApplanixEOFile_getFieldIdx(self, *args)
    def indexRecordIds(self): return _pyossim.ossimApplanixEOFile_indexRecordIds(self)
    def getRecordGivenId(self, *args): return _pyossim.ossimApplanixEOFile_getRecordGivenId(self, *args)
    def getNumberOfRecords(self): return _pyossim.ossimApplanixEOFile_getNumberOfRecords(self)
    def getRecord(self, *args): return _pyossim.ossimApplanixEOFile_getRecord(self, *args)
    def isHeightAboveMSL(self): return _pyossim.ossimApplanixEOFile_isHeightAboveMSL(self)
    def isEcefModel(self): return _pyossim.ossimApplanixEOFile_isEcefModel(self)
    def isUtmFrame(self): return _pyossim.ossimApplanixEOFile_isUtmFrame(self)
    def getUtmZone(self): return _pyossim.ossimApplanixEOFile_getUtmZone(self)
    def getUtmHemisphere(self): return _pyossim.ossimApplanixEOFile_getUtmHemisphere(self)
    def getSbetField(self): return _pyossim.ossimApplanixEOFile_getSbetField(self)
    def getBoreSightTx(self): return _pyossim.ossimApplanixEOFile_getBoreSightTx(self)
    def getBoreSightTy(self): return _pyossim.ossimApplanixEOFile_getBoreSightTy(self)
    def getBoreSightTz(self): return _pyossim.ossimApplanixEOFile_getBoreSightTz(self)
    def getLeverArmLx(self): return _pyossim.ossimApplanixEOFile_getLeverArmLx(self)
    def getLeverArmLy(self): return _pyossim.ossimApplanixEOFile_getLeverArmLy(self)
    def getLeverArmLz(self): return _pyossim.ossimApplanixEOFile_getLeverArmLz(self)
    def getKardinalKappa(self): return _pyossim.ossimApplanixEOFile_getKardinalKappa(self)
    def getShiftValuesX(self): return _pyossim.ossimApplanixEOFile_getShiftValuesX(self)
    def getShiftValuesY(self): return _pyossim.ossimApplanixEOFile_getShiftValuesY(self)
    def getShiftValuesZ(self): return _pyossim.ossimApplanixEOFile_getShiftValuesZ(self)
    def getMappingFrameDatum(self): return _pyossim.ossimApplanixEOFile_getMappingFrameDatum(self)
    def getMappingFrameProjection(self): return _pyossim.ossimApplanixEOFile_getMappingFrameProjection(self)
    def getMappingFrameCentralMeridian(self): return _pyossim.ossimApplanixEOFile_getMappingFrameCentralMeridian(self)
    def getMappingFrameOriginLatitude(self): return _pyossim.ossimApplanixEOFile_getMappingFrameOriginLatitude(self)
    def getMappingFrameGridScaleFactor(self): return _pyossim.ossimApplanixEOFile_getMappingFrameGridScaleFactor(self)
    def getMappingFrameFalseEasting(self): return _pyossim.ossimApplanixEOFile_getMappingFrameFalseEasting(self)
    def getMappingFrameFalseNorthing(self): return _pyossim.ossimApplanixEOFile_getMappingFrameFalseNorthing(self)
    def convertToOssimDatumCode(self, *args): return _pyossim.ossimApplanixEOFile_convertToOssimDatumCode(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimApplanixEOFile
    __del__ = lambda self : None;
ossimApplanixEOFile_swigregister = _pyossim.ossimApplanixEOFile_swigregister
ossimApplanixEOFile_swigregister(ossimApplanixEOFile)

class ossimEpsgProjectionDatabase(ossimReferenced):
    __swig_setmethods__ = {}
    for _s in [ossimReferenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimEpsgProjectionDatabase, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimReferenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimEpsgProjectionDatabase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimEpsgProjectionDatabase_instance
    if _newclass:instance = staticmethod(_pyossim.ossimEpsgProjectionDatabase_instance)
    __swig_destroy__ = _pyossim.delete_ossimEpsgProjectionDatabase
    __del__ = lambda self : None;
    def findProjection(self, *args): return _pyossim.ossimEpsgProjectionDatabase_findProjection(self, *args)
    def findProjectionCode(self, *args): return _pyossim.ossimEpsgProjectionDatabase_findProjectionCode(self, *args)
    def findProjectionName(self, *args): return _pyossim.ossimEpsgProjectionDatabase_findProjectionName(self, *args)
    def getProjectionsList(self, *args): return _pyossim.ossimEpsgProjectionDatabase_getProjectionsList(self, *args)
    def numRecords(self): return _pyossim.ossimEpsgProjectionDatabase_numRecords(self)
ossimEpsgProjectionDatabase_swigregister = _pyossim.ossimEpsgProjectionDatabase_swigregister
ossimEpsgProjectionDatabase_swigregister(ossimEpsgProjectionDatabase)

def ossimEpsgProjectionDatabase_instance():
  return _pyossim.ossimEpsgProjectionDatabase_instance()
ossimEpsgProjectionDatabase_instance = _pyossim.ossimEpsgProjectionDatabase_instance

class ossimMapProjectionInfo(ossimObject):
    __swig_setmethods__ = {}
    for _s in [ossimObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimMapProjectionInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimMapProjectionInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimMapProjectionInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimMapProjectionInfo
    __del__ = lambda self : None;
    def errorStatus(self): return _pyossim.ossimMapProjectionInfo_errorStatus(self)
    def getGeom(self, *args): return _pyossim.ossimMapProjectionInfo_getGeom(self, *args)
    def getMetersPerPixel(self): return _pyossim.ossimMapProjectionInfo_getMetersPerPixel(self)
    def getUsSurveyFeetPerPixel(self): return _pyossim.ossimMapProjectionInfo_getUsSurveyFeetPerPixel(self)
    def getDecimalDegreesPerPixel(self): return _pyossim.ossimMapProjectionInfo_getDecimalDegreesPerPixel(self)
    def ulEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_ulEastingNorthingPt(self)
    def urEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_urEastingNorthingPt(self)
    def lrEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_lrEastingNorthingPt(self)
    def llEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_llEastingNorthingPt(self)
    def ulEastingNorthingPtInFt(self): return _pyossim.ossimMapProjectionInfo_ulEastingNorthingPtInFt(self)
    def urEastingNorthingPtInFt(self): return _pyossim.ossimMapProjectionInfo_urEastingNorthingPtInFt(self)
    def lrEastingNorthingPtInFt(self): return _pyossim.ossimMapProjectionInfo_lrEastingNorthingPtInFt(self)
    def llEastingNorthingPtInFt(self): return _pyossim.ossimMapProjectionInfo_llEastingNorthingPtInFt(self)
    def ulGroundPt(self): return _pyossim.ossimMapProjectionInfo_ulGroundPt(self)
    def urGroundPt(self): return _pyossim.ossimMapProjectionInfo_urGroundPt(self)
    def lrGroundPt(self): return _pyossim.ossimMapProjectionInfo_lrGroundPt(self)
    def llGroundPt(self): return _pyossim.ossimMapProjectionInfo_llGroundPt(self)
    def centerGroundPt(self): return _pyossim.ossimMapProjectionInfo_centerGroundPt(self)
    def centerEastingNorthingPt(self): return _pyossim.ossimMapProjectionInfo_centerEastingNorthingPt(self)
    def linesPerImage(self): return _pyossim.ossimMapProjectionInfo_linesPerImage(self)
    def pixelsPerLine(self): return _pyossim.ossimMapProjectionInfo_pixelsPerLine(self)
    def ossimMapProjectionInfo_print(self, *args): return _pyossim.ossimMapProjectionInfo_ossimMapProjectionInfo_print(self, *args)
    def setPixelType(self, *args): return _pyossim.ossimMapProjectionInfo_setPixelType(self, *args)
    def getPixelType(self): return _pyossim.ossimMapProjectionInfo_getPixelType(self)
    def setOutputFeetFlag(self, *args): return _pyossim.ossimMapProjectionInfo_setOutputFeetFlag(self, *args)
    def unitsInFeet(self): return _pyossim.ossimMapProjectionInfo_unitsInFeet(self)
    def getImageInfoString(self): return _pyossim.ossimMapProjectionInfo_getImageInfoString(self)
    def setImageInfoString(self, *args): return _pyossim.ossimMapProjectionInfo_setImageInfoString(self, *args)
    def getProjection(self): return _pyossim.ossimMapProjectionInfo_getProjection(self)
    __swig_setmethods__["README_IMAGE_STRING_KW"] = _pyossim.ossimMapProjectionInfo_README_IMAGE_STRING_KW_set
    __swig_getmethods__["README_IMAGE_STRING_KW"] = _pyossim.ossimMapProjectionInfo_README_IMAGE_STRING_KW_get
    if _newclass:README_IMAGE_STRING_KW = _swig_property(_pyossim.ossimMapProjectionInfo_README_IMAGE_STRING_KW_get, _pyossim.ossimMapProjectionInfo_README_IMAGE_STRING_KW_set)
    __swig_setmethods__["PIXEL_TYPE_KW"] = _pyossim.ossimMapProjectionInfo_PIXEL_TYPE_KW_set
    __swig_getmethods__["PIXEL_TYPE_KW"] = _pyossim.ossimMapProjectionInfo_PIXEL_TYPE_KW_get
    if _newclass:PIXEL_TYPE_KW = _swig_property(_pyossim.ossimMapProjectionInfo_PIXEL_TYPE_KW_get, _pyossim.ossimMapProjectionInfo_PIXEL_TYPE_KW_set)
    __swig_setmethods__["OUTPUT_US_FT_INFO_KW"] = _pyossim.ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_set
    __swig_getmethods__["OUTPUT_US_FT_INFO_KW"] = _pyossim.ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_get
    if _newclass:OUTPUT_US_FT_INFO_KW = _swig_property(_pyossim.ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_get, _pyossim.ossimMapProjectionInfo_OUTPUT_US_FT_INFO_KW_set)
    def loadState(self, *args): return _pyossim.ossimMapProjectionInfo_loadState(self, *args)
    def saveState(self, *args): return _pyossim.ossimMapProjectionInfo_saveState(self, *args)
ossimMapProjectionInfo_swigregister = _pyossim.ossimMapProjectionInfo_swigregister
ossimMapProjectionInfo_swigregister(ossimMapProjectionInfo)

ONE_SIGMA = _pyossim.ONE_SIGMA
P50 = _pyossim.P50
P90 = _pyossim.P90
P95 = _pyossim.P95
NUM_PROB_LEVELS = _pyossim.NUM_PROB_LEVELS
class pqeErrorEllipse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pqeErrorEllipse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pqeErrorEllipse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["theSemiMinorAxis"] = _pyossim.pqeErrorEllipse_theSemiMinorAxis_set
    __swig_getmethods__["theSemiMinorAxis"] = _pyossim.pqeErrorEllipse_theSemiMinorAxis_get
    if _newclass:theSemiMinorAxis = _swig_property(_pyossim.pqeErrorEllipse_theSemiMinorAxis_get, _pyossim.pqeErrorEllipse_theSemiMinorAxis_set)
    __swig_setmethods__["theSemiMajorAxis"] = _pyossim.pqeErrorEllipse_theSemiMajorAxis_set
    __swig_getmethods__["theSemiMajorAxis"] = _pyossim.pqeErrorEllipse_theSemiMajorAxis_get
    if _newclass:theSemiMajorAxis = _swig_property(_pyossim.pqeErrorEllipse_theSemiMajorAxis_get, _pyossim.pqeErrorEllipse_theSemiMajorAxis_set)
    __swig_setmethods__["theAzimAngle"] = _pyossim.pqeErrorEllipse_theAzimAngle_set
    __swig_getmethods__["theAzimAngle"] = _pyossim.pqeErrorEllipse_theAzimAngle_get
    if _newclass:theAzimAngle = _swig_property(_pyossim.pqeErrorEllipse_theAzimAngle_get, _pyossim.pqeErrorEllipse_theAzimAngle_set)
    __swig_setmethods__["theCenter"] = _pyossim.pqeErrorEllipse_theCenter_set
    __swig_getmethods__["theCenter"] = _pyossim.pqeErrorEllipse_theCenter_get
    if _newclass:theCenter = _swig_property(_pyossim.pqeErrorEllipse_theCenter_get, _pyossim.pqeErrorEllipse_theCenter_set)
    def __init__(self): 
        this = _pyossim.new_pqeErrorEllipse()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_pqeErrorEllipse
    __del__ = lambda self : None;
pqeErrorEllipse_swigregister = _pyossim.pqeErrorEllipse_swigregister
pqeErrorEllipse_swigregister(pqeErrorEllipse)

class pqeRPCModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pqeRPCModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pqeRPCModel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["theLineScale"] = _pyossim.pqeRPCModel_theLineScale_set
    __swig_getmethods__["theLineScale"] = _pyossim.pqeRPCModel_theLineScale_get
    if _newclass:theLineScale = _swig_property(_pyossim.pqeRPCModel_theLineScale_get, _pyossim.pqeRPCModel_theLineScale_set)
    __swig_setmethods__["theSampScale"] = _pyossim.pqeRPCModel_theSampScale_set
    __swig_getmethods__["theSampScale"] = _pyossim.pqeRPCModel_theSampScale_get
    if _newclass:theSampScale = _swig_property(_pyossim.pqeRPCModel_theSampScale_get, _pyossim.pqeRPCModel_theSampScale_set)
    __swig_setmethods__["theLatScale"] = _pyossim.pqeRPCModel_theLatScale_set
    __swig_getmethods__["theLatScale"] = _pyossim.pqeRPCModel_theLatScale_get
    if _newclass:theLatScale = _swig_property(_pyossim.pqeRPCModel_theLatScale_get, _pyossim.pqeRPCModel_theLatScale_set)
    __swig_setmethods__["theLonScale"] = _pyossim.pqeRPCModel_theLonScale_set
    __swig_getmethods__["theLonScale"] = _pyossim.pqeRPCModel_theLonScale_get
    if _newclass:theLonScale = _swig_property(_pyossim.pqeRPCModel_theLonScale_get, _pyossim.pqeRPCModel_theLonScale_set)
    __swig_setmethods__["theHgtScale"] = _pyossim.pqeRPCModel_theHgtScale_set
    __swig_getmethods__["theHgtScale"] = _pyossim.pqeRPCModel_theHgtScale_get
    if _newclass:theHgtScale = _swig_property(_pyossim.pqeRPCModel_theHgtScale_get, _pyossim.pqeRPCModel_theHgtScale_set)
    __swig_setmethods__["theLineOffset"] = _pyossim.pqeRPCModel_theLineOffset_set
    __swig_getmethods__["theLineOffset"] = _pyossim.pqeRPCModel_theLineOffset_get
    if _newclass:theLineOffset = _swig_property(_pyossim.pqeRPCModel_theLineOffset_get, _pyossim.pqeRPCModel_theLineOffset_set)
    __swig_setmethods__["theSampOffset"] = _pyossim.pqeRPCModel_theSampOffset_set
    __swig_getmethods__["theSampOffset"] = _pyossim.pqeRPCModel_theSampOffset_get
    if _newclass:theSampOffset = _swig_property(_pyossim.pqeRPCModel_theSampOffset_get, _pyossim.pqeRPCModel_theSampOffset_set)
    __swig_setmethods__["theLatOffset"] = _pyossim.pqeRPCModel_theLatOffset_set
    __swig_getmethods__["theLatOffset"] = _pyossim.pqeRPCModel_theLatOffset_get
    if _newclass:theLatOffset = _swig_property(_pyossim.pqeRPCModel_theLatOffset_get, _pyossim.pqeRPCModel_theLatOffset_set)
    __swig_setmethods__["theLonOffset"] = _pyossim.pqeRPCModel_theLonOffset_set
    __swig_getmethods__["theLonOffset"] = _pyossim.pqeRPCModel_theLonOffset_get
    if _newclass:theLonOffset = _swig_property(_pyossim.pqeRPCModel_theLonOffset_get, _pyossim.pqeRPCModel_theLonOffset_set)
    __swig_setmethods__["theHgtOffset"] = _pyossim.pqeRPCModel_theHgtOffset_set
    __swig_getmethods__["theHgtOffset"] = _pyossim.pqeRPCModel_theHgtOffset_get
    if _newclass:theHgtOffset = _swig_property(_pyossim.pqeRPCModel_theHgtOffset_get, _pyossim.pqeRPCModel_theHgtOffset_set)
    __swig_setmethods__["theLineNumCoef"] = _pyossim.pqeRPCModel_theLineNumCoef_set
    __swig_getmethods__["theLineNumCoef"] = _pyossim.pqeRPCModel_theLineNumCoef_get
    if _newclass:theLineNumCoef = _swig_property(_pyossim.pqeRPCModel_theLineNumCoef_get, _pyossim.pqeRPCModel_theLineNumCoef_set)
    __swig_setmethods__["theLineDenCoef"] = _pyossim.pqeRPCModel_theLineDenCoef_set
    __swig_getmethods__["theLineDenCoef"] = _pyossim.pqeRPCModel_theLineDenCoef_get
    if _newclass:theLineDenCoef = _swig_property(_pyossim.pqeRPCModel_theLineDenCoef_get, _pyossim.pqeRPCModel_theLineDenCoef_set)
    __swig_setmethods__["theSampNumCoef"] = _pyossim.pqeRPCModel_theSampNumCoef_set
    __swig_getmethods__["theSampNumCoef"] = _pyossim.pqeRPCModel_theSampNumCoef_get
    if _newclass:theSampNumCoef = _swig_property(_pyossim.pqeRPCModel_theSampNumCoef_get, _pyossim.pqeRPCModel_theSampNumCoef_set)
    __swig_setmethods__["theSampDenCoef"] = _pyossim.pqeRPCModel_theSampDenCoef_set
    __swig_getmethods__["theSampDenCoef"] = _pyossim.pqeRPCModel_theSampDenCoef_get
    if _newclass:theSampDenCoef = _swig_property(_pyossim.pqeRPCModel_theSampDenCoef_get, _pyossim.pqeRPCModel_theSampDenCoef_set)
    __swig_setmethods__["theType"] = _pyossim.pqeRPCModel_theType_set
    __swig_getmethods__["theType"] = _pyossim.pqeRPCModel_theType_get
    if _newclass:theType = _swig_property(_pyossim.pqeRPCModel_theType_get, _pyossim.pqeRPCModel_theType_set)
    def __init__(self): 
        this = _pyossim.new_pqeRPCModel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_pqeRPCModel
    __del__ = lambda self : None;
pqeRPCModel_swigregister = _pyossim.pqeRPCModel_swigregister
pqeRPCModel_swigregister(pqeRPCModel)

class ossimPositionQualityEvaluator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPositionQualityEvaluator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPositionQualityEvaluator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimPositionQualityEvaluator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimPositionQualityEvaluator
    __del__ = lambda self : None;
    def addContributingCovariance(self, *args): return _pyossim.ossimPositionQualityEvaluator_addContributingCovariance(self, *args)
    def addContributingCE_LE(self, *args): return _pyossim.ossimPositionQualityEvaluator_addContributingCE_LE(self, *args)
    def subtractContributingCovariance(self, *args): return _pyossim.ossimPositionQualityEvaluator_subtractContributingCovariance(self, *args)
    def subtractContributingCE_LE(self, *args): return _pyossim.ossimPositionQualityEvaluator_subtractContributingCE_LE(self, *args)
    def getCovMatrix(self, *args): return _pyossim.ossimPositionQualityEvaluator_getCovMatrix(self, *args)
    def computeCE_LE(self, *args): return _pyossim.ossimPositionQualityEvaluator_computeCE_LE(self, *args)
    def extractErrorEllipse(self, *args): return _pyossim.ossimPositionQualityEvaluator_extractErrorEllipse(self, *args)
    def isValid(self): return _pyossim.ossimPositionQualityEvaluator_isValid(self)
    def ossimPositionQualityEvaluator_print(self, *args): return _pyossim.ossimPositionQualityEvaluator_ossimPositionQualityEvaluator_print(self, *args)
ossimPositionQualityEvaluator_swigregister = _pyossim.ossimPositionQualityEvaluator_swigregister
ossimPositionQualityEvaluator_swigregister(ossimPositionQualityEvaluator)

class ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection()
        try: self.this.append(this)
        except: self.this = this
    def addFactory(self, *args): return _pyossim.ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_addFactory(self, *args)
    def isFactoryRegistered(self, *args): return _pyossim.ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_isFactoryRegistered(self, *args)
    def registerFactory(self, *args): return _pyossim.ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_registerFactory(self, *args)
    def unregisterFactory(self, *args): return _pyossim.ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_unregisterFactory(self, *args)
    def unregisterAllFactories(self): return _pyossim.ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_unregisterAllFactories(self)
    def registerFactoryToFront(self, *args): return _pyossim.ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_registerFactoryToFront(self, *args)
    def registerFactoryBefore(self, *args): return _pyossim.ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_registerFactoryBefore(self, *args)
    def getAllTypeNamesFromRegistry(self, *args): return _pyossim.ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_getAllTypeNamesFromRegistry(self, *args)
    def createObjectFromRegistry(self, *args): return _pyossim.ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_createObjectFromRegistry(self, *args)
    def createNativeObjectFromRegistry(self, *args): return _pyossim.ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_createNativeObjectFromRegistry(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection
    __del__ = lambda self : None;
ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_swigregister = _pyossim.ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_swigregister
ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection_swigregister(ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection)

class ossimProjectionFactoryRegistry(ossimObjectFactory,ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection):
    __swig_setmethods__ = {}
    for _s in [ossimObjectFactory,ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimProjectionFactoryRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObjectFactory,ossimFactoryListInterface_ossimProjectionFactoryBase_ossimProjection]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimProjectionFactoryRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimProjectionFactoryRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyossim.ossimProjectionFactoryRegistry_instance
    if _newclass:instance = staticmethod(_pyossim.ossimProjectionFactoryRegistry_instance)
    def createProjection(self, *args): return _pyossim.ossimProjectionFactoryRegistry_createProjection(self, *args)
    def createObject(self, *args): return _pyossim.ossimProjectionFactoryRegistry_createObject(self, *args)
    def getTypeNameList(self, *args): return _pyossim.ossimProjectionFactoryRegistry_getTypeNameList(self, *args)
ossimProjectionFactoryRegistry_swigregister = _pyossim.ossimProjectionFactoryRegistry_swigregister
ossimProjectionFactoryRegistry_swigregister(ossimProjectionFactoryRegistry)

def ossimProjectionFactoryRegistry_instance():
  return _pyossim.ossimProjectionFactoryRegistry_instance()
ossimProjectionFactoryRegistry_instance = _pyossim.ossimProjectionFactoryRegistry_instance


def ossimProjectionFactoryRegistryGetInstance():
  return _pyossim.ossimProjectionFactoryRegistryGetInstance()
ossimProjectionFactoryRegistryGetInstance = _pyossim.ossimProjectionFactoryRegistryGetInstance
class ossimProjection(ossimObject,ossimErrorStatusInterface):
    __swig_setmethods__ = {}
    for _s in [ossimObject,ossimErrorStatusInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimProjection, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimObject,ossimErrorStatusInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimProjection, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimProjection
    __del__ = lambda self : None;
    def dup(self): return _pyossim.ossimProjection_dup(self)
    def origin(self): return _pyossim.ossimProjection_origin(self)
    def forward(self, *args): return _pyossim.ossimProjection_forward(self, *args)
    def inverse(self, *args): return _pyossim.ossimProjection_inverse(self, *args)
    def worldToLineSample(self, *args): return _pyossim.ossimProjection_worldToLineSample(self, *args)
    def lineSampleToWorld(self, *args): return _pyossim.ossimProjection_lineSampleToWorld(self, *args)
    def lineSampleHeightToWorld(self, *args): return _pyossim.ossimProjection_lineSampleHeightToWorld(self, *args)
    def getRoundTripError(self, *args): return _pyossim.ossimProjection_getRoundTripError(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimProjection_ossimObject_print(self, *args)
    def getGroundClipPoints(self, *args): return _pyossim.ossimProjection_getGroundClipPoints(self, *args)
    def saveState(self, *args): return _pyossim.ossimProjection_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimProjection_loadState(self, *args)
    def isEqualTo(self, *args): return _pyossim.ossimProjection_isEqualTo(self, *args)
    def __eq__(self, *args): return _pyossim.ossimProjection___eq__(self, *args)
    def __ne__(self, *args): return _pyossim.ossimProjection___ne__(self, *args)
    def getMetersPerPixel(self): return _pyossim.ossimProjection_getMetersPerPixel(self)
    def isAffectedByElevation(self): return _pyossim.ossimProjection_isAffectedByElevation(self)
ossimProjection_swigregister = _pyossim.ossimProjection_swigregister
ossimProjection_swigregister(ossimProjection)

class ossimOptimizableProjection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimOptimizableProjection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimOptimizableProjection, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimOptimizableProjection
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyossim.ossimOptimizableProjection___set__(self, *args)
    def setupOptimizer(self, *args): return _pyossim.ossimOptimizableProjection_setupOptimizer(self, *args)
    def useForward(self): return _pyossim.ossimOptimizableProjection_useForward(self)
    def degreesOfFreedom(self): return _pyossim.ossimOptimizableProjection_degreesOfFreedom(self)
    def needsInitialState(self): return _pyossim.ossimOptimizableProjection_needsInitialState(self)
    def optimizeFit(self, *args): return _pyossim.ossimOptimizableProjection_optimizeFit(self, *args)
ossimOptimizableProjection_swigregister = _pyossim.ossimOptimizableProjection_swigregister
ossimOptimizableProjection_swigregister(ossimOptimizableProjection)

class ossimSensorModel(ossimProjection,ossimOptimizableProjection,ossimAdjustableParameterInterface):
    __swig_setmethods__ = {}
    for _s in [ossimProjection,ossimOptimizableProjection,ossimAdjustableParameterInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimSensorModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimProjection,ossimOptimizableProjection,ossimAdjustableParameterInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimSensorModel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    COV_INVALID = _pyossim.ossimSensorModel_COV_INVALID
    COV_PARTIAL = _pyossim.ossimSensorModel_COV_PARTIAL
    COV_FULL = _pyossim.ossimSensorModel_COV_FULL
    OBS_INIT = _pyossim.ossimSensorModel_OBS_INIT
    EVALUATE = _pyossim.ossimSensorModel_EVALUATE
    P_WRT_X = _pyossim.ossimSensorModel_P_WRT_X
    P_WRT_Y = _pyossim.ossimSensorModel_P_WRT_Y
    P_WRT_Z = _pyossim.ossimSensorModel_P_WRT_Z
    def getBaseObject(self): return _pyossim.ossimSensorModel_getBaseObject(self)
    def const_ossimAdjustableParameterInterface_getBaseObject(self): return _pyossim.ossimSensorModel_const_ossimAdjustableParameterInterface_getBaseObject(self)
    def origin(self): return _pyossim.ossimSensorModel_origin(self)
    def getMetersPerPixel(self): return _pyossim.ossimSensorModel_getMetersPerPixel(self)
    def getNominalPosError(self): return _pyossim.ossimSensorModel_getNominalPosError(self)
    def getRelativePosError(self): return _pyossim.ossimSensorModel_getRelativePosError(self)
    def setNominalPosError(self, *args): return _pyossim.ossimSensorModel_setNominalPosError(self, *args)
    def setRelativePosError(self, *args): return _pyossim.ossimSensorModel_setRelativePosError(self, *args)
    def lineSampleToWorld(self, *args): return _pyossim.ossimSensorModel_lineSampleToWorld(self, *args)
    def worldToLineSample(self, *args): return _pyossim.ossimSensorModel_worldToLineSample(self, *args)
    def lineSampleHeightToWorld(self, *args): return _pyossim.ossimSensorModel_lineSampleHeightToWorld(self, *args)
    def imagingRay(self, *args): return _pyossim.ossimSensorModel_imagingRay(self, *args)
    def ossimObject_print(self, *args): return _pyossim.ossimSensorModel_ossimObject_print(self, *args)
    def setRefImgPt(self, *args): return _pyossim.ossimSensorModel_setRefImgPt(self, *args)
    def setRefGndPt(self, *args): return _pyossim.ossimSensorModel_setRefGndPt(self, *args)
    def setImageRect(self, *args): return _pyossim.ossimSensorModel_setImageRect(self, *args)
    def setGroundRect(self, *args): return _pyossim.ossimSensorModel_setGroundRect(self, *args)
    def imageSize(self): return _pyossim.ossimSensorModel_imageSize(self)
    def setImageSize(self, *args): return _pyossim.ossimSensorModel_setImageSize(self, *args)
    def adjustableParametersChanged(self): return _pyossim.ossimSensorModel_adjustableParametersChanged(self)
    def updateModel(self): return _pyossim.ossimSensorModel_updateModel(self)
    def saveState(self, *args): return _pyossim.ossimSensorModel_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimSensorModel_loadState(self, *args)
    def insideImage(self, *args): return _pyossim.ossimSensorModel_insideImage(self, *args)
    __swig_getmethods__["writeGeomTemplate"] = lambda x: _pyossim.ossimSensorModel_writeGeomTemplate
    if _newclass:writeGeomTemplate = staticmethod(_pyossim.ossimSensorModel_writeGeomTemplate)
    def __cmp__(self, *args): return _pyossim.ossimSensorModel___cmp__(self, *args)
    def getImageID(self): return _pyossim.ossimSensorModel_getImageID(self)
    def getImageClipRect(self): return _pyossim.ossimSensorModel_getImageClipRect(self)
    def degreesOfFreedom(self): return _pyossim.ossimSensorModel_degreesOfFreedom(self)
    def needsInitialState(self): return _pyossim.ossimSensorModel_needsInitialState(self)
    def optimizeFit(self, *args): return _pyossim.ossimSensorModel_optimizeFit(self, *args)
    def getForwardDeriv(self, *args): return _pyossim.ossimSensorModel_getForwardDeriv(self, *args)
    def getInverseDeriv(self, *args): return _pyossim.ossimSensorModel_getInverseDeriv(self, *args)
    def getObsCovMat(self, *args): return _pyossim.ossimSensorModel_getObsCovMat(self, *args)
    def isAffectedByElevation(self): return _pyossim.ossimSensorModel_isAffectedByElevation(self)
    def computeGsd(self): return _pyossim.ossimSensorModel_computeGsd(self)
ossimSensorModel_swigregister = _pyossim.ossimSensorModel_swigregister
ossimSensorModel_swigregister(ossimSensorModel)

def ossimSensorModel_writeGeomTemplate(*args):
  return _pyossim.ossimSensorModel_writeGeomTemplate(*args)
ossimSensorModel_writeGeomTemplate = _pyossim.ossimSensorModel_writeGeomTemplate

class ossimRpcPqeInputs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimRpcPqeInputs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimRpcPqeInputs, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimRpcPqeInputs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimRpcPqeInputs
    __del__ = lambda self : None;
    __swig_setmethods__["theRpcElevationAngle"] = _pyossim.ossimRpcPqeInputs_theRpcElevationAngle_set
    __swig_getmethods__["theRpcElevationAngle"] = _pyossim.ossimRpcPqeInputs_theRpcElevationAngle_get
    if _newclass:theRpcElevationAngle = _swig_property(_pyossim.ossimRpcPqeInputs_theRpcElevationAngle_get, _pyossim.ossimRpcPqeInputs_theRpcElevationAngle_set)
    __swig_setmethods__["theRpcAzimuthAngle"] = _pyossim.ossimRpcPqeInputs_theRpcAzimuthAngle_set
    __swig_getmethods__["theRpcAzimuthAngle"] = _pyossim.ossimRpcPqeInputs_theRpcAzimuthAngle_get
    if _newclass:theRpcAzimuthAngle = _swig_property(_pyossim.ossimRpcPqeInputs_theRpcAzimuthAngle_get, _pyossim.ossimRpcPqeInputs_theRpcAzimuthAngle_set)
    __swig_setmethods__["theRpcBiasError"] = _pyossim.ossimRpcPqeInputs_theRpcBiasError_set
    __swig_getmethods__["theRpcBiasError"] = _pyossim.ossimRpcPqeInputs_theRpcBiasError_get
    if _newclass:theRpcBiasError = _swig_property(_pyossim.ossimRpcPqeInputs_theRpcBiasError_get, _pyossim.ossimRpcPqeInputs_theRpcBiasError_set)
    __swig_setmethods__["theRpcRandError"] = _pyossim.ossimRpcPqeInputs_theRpcRandError_set
    __swig_getmethods__["theRpcRandError"] = _pyossim.ossimRpcPqeInputs_theRpcRandError_get
    if _newclass:theRpcRandError = _swig_property(_pyossim.ossimRpcPqeInputs_theRpcRandError_get, _pyossim.ossimRpcPqeInputs_theRpcRandError_set)
    __swig_setmethods__["theSurfaceNormalVector"] = _pyossim.ossimRpcPqeInputs_theSurfaceNormalVector_set
    __swig_getmethods__["theSurfaceNormalVector"] = _pyossim.ossimRpcPqeInputs_theSurfaceNormalVector_get
    if _newclass:theSurfaceNormalVector = _swig_property(_pyossim.ossimRpcPqeInputs_theSurfaceNormalVector_get, _pyossim.ossimRpcPqeInputs_theSurfaceNormalVector_set)
    __swig_setmethods__["theSurfaceCovMatrix"] = _pyossim.ossimRpcPqeInputs_theSurfaceCovMatrix_set
    __swig_getmethods__["theSurfaceCovMatrix"] = _pyossim.ossimRpcPqeInputs_theSurfaceCovMatrix_get
    if _newclass:theSurfaceCovMatrix = _swig_property(_pyossim.ossimRpcPqeInputs_theSurfaceCovMatrix_get, _pyossim.ossimRpcPqeInputs_theSurfaceCovMatrix_set)
ossimRpcPqeInputs_swigregister = _pyossim.ossimRpcPqeInputs_swigregister
ossimRpcPqeInputs_swigregister(ossimRpcPqeInputs)

class ossimSensorModelTuple(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimSensorModelTuple, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimSensorModelTuple, name)
    __repr__ = _swig_repr
    OBS_INIT = _pyossim.ossimSensorModelTuple_OBS_INIT
    EVALUATE = _pyossim.ossimSensorModelTuple_EVALUATE
    P_WRT_X = _pyossim.ossimSensorModelTuple_P_WRT_X
    P_WRT_Y = _pyossim.ossimSensorModelTuple_P_WRT_Y
    P_WRT_Z = _pyossim.ossimSensorModelTuple_P_WRT_Z
    OP_SUCCESS = _pyossim.ossimSensorModelTuple_OP_SUCCESS
    ERROR_PROP_FAIL = _pyossim.ossimSensorModelTuple_ERROR_PROP_FAIL
    OP_FAIL = _pyossim.ossimSensorModelTuple_OP_FAIL
    def __init__(self): 
        this = _pyossim.new_ossimSensorModelTuple()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimSensorModelTuple
    __del__ = lambda self : None;
    def addImage(self, *args): return _pyossim.ossimSensorModelTuple_addImage(self, *args)
    def ossimSensorModelTuple_print(self, *args): return _pyossim.ossimSensorModelTuple_ossimSensorModelTuple_print(self, *args)
    def intersect(self, *args): return _pyossim.ossimSensorModelTuple_intersect(self, *args)
    def setIntersectionSurfaceAccuracy(self, *args): return _pyossim.ossimSensorModelTuple_setIntersectionSurfaceAccuracy(self, *args)
    def getRpcPqeInputs(self, *args): return _pyossim.ossimSensorModelTuple_getRpcPqeInputs(self, *args)
ossimSensorModelTuple_swigregister = _pyossim.ossimSensorModelTuple_swigregister
ossimSensorModelTuple_swigregister(ossimSensorModelTuple)

class ossimStatePlaneProjectionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimStatePlaneProjectionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimStatePlaneProjectionInfo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimStatePlaneProjectionInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    def code(self): return _pyossim.ossimStatePlaneProjectionInfo_code(self)
    def name(self): return _pyossim.ossimStatePlaneProjectionInfo_name(self)
    def projName(self): return _pyossim.ossimStatePlaneProjectionInfo_projName(self)
    def originLat(self): return _pyossim.ossimStatePlaneProjectionInfo_originLat(self)
    def originLon(self): return _pyossim.ossimStatePlaneProjectionInfo_originLon(self)
    def datum(self): return _pyossim.ossimStatePlaneProjectionInfo_datum(self)
    def origin(self): return _pyossim.ossimStatePlaneProjectionInfo_origin(self)
    def parallel1(self): return _pyossim.ossimStatePlaneProjectionInfo_parallel1(self)
    def parallel2(self): return _pyossim.ossimStatePlaneProjectionInfo_parallel2(self)
    def falseEasting(self): return _pyossim.ossimStatePlaneProjectionInfo_falseEasting(self)
    def falseNorthing(self): return _pyossim.ossimStatePlaneProjectionInfo_falseNorthing(self)
    def falseEastingInMeters(self): return _pyossim.ossimStatePlaneProjectionInfo_falseEastingInMeters(self)
    def falseNorthingInMeters(self): return _pyossim.ossimStatePlaneProjectionInfo_falseNorthingInMeters(self)
    def scaleFactor(self): return _pyossim.ossimStatePlaneProjectionInfo_scaleFactor(self)
    def units(self): return _pyossim.ossimStatePlaneProjectionInfo_units(self)
    def getUnitType(self): return _pyossim.ossimStatePlaneProjectionInfo_getUnitType(self)
    def matchesProjection(self, *args): return _pyossim.ossimStatePlaneProjectionInfo_matchesProjection(self, *args)
    def isSameCode(self, *args): return _pyossim.ossimStatePlaneProjectionInfo_isSameCode(self, *args)
    def populateProjectionKeywords(self, *args): return _pyossim.ossimStatePlaneProjectionInfo_populateProjectionKeywords(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimStatePlaneProjectionInfo
    __del__ = lambda self : None;
ossimStatePlaneProjectionInfo_swigregister = _pyossim.ossimStatePlaneProjectionInfo_swigregister
ossimStatePlaneProjectionInfo_swigregister(ossimStatePlaneProjectionInfo)

def __lshift__(*args):
  return _pyossim.__lshift__(*args)
__lshift__ = _pyossim.__lshift__

class ossimUpspt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimUpspt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimUpspt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimUpspt(*args)
        try: self.this.append(this)
        except: self.this = this
    def hemisphere(self): return _pyossim.ossimUpspt_hemisphere(self)
    def easting(self): return _pyossim.ossimUpspt_easting(self)
    def northing(self): return _pyossim.ossimUpspt_northing(self)
    def datum(self): return _pyossim.ossimUpspt_datum(self)
    __swig_destroy__ = _pyossim.delete_ossimUpspt
    __del__ = lambda self : None;
ossimUpspt_swigregister = _pyossim.ossimUpspt_swigregister
ossimUpspt_swigregister(ossimUpspt)

class ossimUtmpt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimUtmpt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimUtmpt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimUtmpt(*args)
        try: self.this.append(this)
        except: self.this = this
    def zone(self): return _pyossim.ossimUtmpt_zone(self)
    def hemisphere(self): return _pyossim.ossimUtmpt_hemisphere(self)
    def easting(self): return _pyossim.ossimUtmpt_easting(self)
    def northing(self): return _pyossim.ossimUtmpt_northing(self)
    def datum(self): return _pyossim.ossimUtmpt_datum(self)
    def convertFromGround(self, *args): return _pyossim.ossimUtmpt_convertFromGround(self, *args)
    def convertToGround(self, *args): return _pyossim.ossimUtmpt_convertToGround(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimUtmpt
    __del__ = lambda self : None;
ossimUtmpt_swigregister = _pyossim.ossimUtmpt_swigregister
ossimUtmpt_swigregister(ossimUtmpt)

class ossimApplanixUtmModel(ossimSensorModel):
    __swig_setmethods__ = {}
    for _s in [ossimSensorModel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimApplanixUtmModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimSensorModel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimApplanixUtmModel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimApplanixUtmModel(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossimApplanixUtmModel_dup(self)
    def imagingRay(self, *args): return _pyossim.ossimApplanixUtmModel_imagingRay(self, *args)
    def lineSampleToWorld(self, *args): return _pyossim.ossimApplanixUtmModel_lineSampleToWorld(self, *args)
    def lineSampleHeightToWorld(self, *args): return _pyossim.ossimApplanixUtmModel_lineSampleHeightToWorld(self, *args)
    def worldToLineSample(self, *args): return _pyossim.ossimApplanixUtmModel_worldToLineSample(self, *args)
    def updateModel(self): return _pyossim.ossimApplanixUtmModel_updateModel(self)
    def setPrincipalPoint(self, *args): return _pyossim.ossimApplanixUtmModel_setPrincipalPoint(self, *args)
    def setPixelSize(self, *args): return _pyossim.ossimApplanixUtmModel_setPixelSize(self, *args)
    def setImageRect(self, *args): return _pyossim.ossimApplanixUtmModel_setImageRect(self, *args)
    def setFocalLength(self, *args): return _pyossim.ossimApplanixUtmModel_setFocalLength(self, *args)
    def setPlatformPosition(self, *args): return _pyossim.ossimApplanixUtmModel_setPlatformPosition(self, *args)
    def saveState(self, *args): return _pyossim.ossimApplanixUtmModel_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimApplanixUtmModel_loadState(self, *args)
    def initAdjustableParameters(self): return _pyossim.ossimApplanixUtmModel_initAdjustableParameters(self)
    def useForward(self): return _pyossim.ossimApplanixUtmModel_useForward(self)
    def setupOptimizer(self, *args): return _pyossim.ossimApplanixUtmModel_setupOptimizer(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimApplanixUtmModel
    __del__ = lambda self : None;
ossimApplanixUtmModel_swigregister = _pyossim.ossimApplanixUtmModel_swigregister
ossimApplanixUtmModel_swigregister(ossimApplanixUtmModel)

class ossimApplanixEcefModel(ossimSensorModel):
    __swig_setmethods__ = {}
    for _s in [ossimSensorModel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimApplanixEcefModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimSensorModel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimApplanixEcefModel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimApplanixEcefModel(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyossim.ossimApplanixEcefModel_dup(self)
    def imagingRay(self, *args): return _pyossim.ossimApplanixEcefModel_imagingRay(self, *args)
    def lineSampleToWorld(self, *args): return _pyossim.ossimApplanixEcefModel_lineSampleToWorld(self, *args)
    def lineSampleHeightToWorld(self, *args): return _pyossim.ossimApplanixEcefModel_lineSampleHeightToWorld(self, *args)
    def worldToLineSample(self, *args): return _pyossim.ossimApplanixEcefModel_worldToLineSample(self, *args)
    def updateModel(self): return _pyossim.ossimApplanixEcefModel_updateModel(self)
    def setPrincipalPoint(self, *args): return _pyossim.ossimApplanixEcefModel_setPrincipalPoint(self, *args)
    def insideImage(self, *args): return _pyossim.ossimApplanixEcefModel_insideImage(self, *args)
    def setRollPitchHeading(self, *args): return _pyossim.ossimApplanixEcefModel_setRollPitchHeading(self, *args)
    def setPixelSize(self, *args): return _pyossim.ossimApplanixEcefModel_setPixelSize(self, *args)
    def setImageRect(self, *args): return _pyossim.ossimApplanixEcefModel_setImageRect(self, *args)
    def setFocalLength(self, *args): return _pyossim.ossimApplanixEcefModel_setFocalLength(self, *args)
    def setPlatformPosition(self, *args): return _pyossim.ossimApplanixEcefModel_setPlatformPosition(self, *args)
    def saveState(self, *args): return _pyossim.ossimApplanixEcefModel_saveState(self, *args)
    def loadState(self, *args): return _pyossim.ossimApplanixEcefModel_loadState(self, *args)
    def initAdjustableParameters(self): return _pyossim.ossimApplanixEcefModel_initAdjustableParameters(self)
    def useForward(self): return _pyossim.ossimApplanixEcefModel_useForward(self)
    def setupOptimizer(self, *args): return _pyossim.ossimApplanixEcefModel_setupOptimizer(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimApplanixEcefModel
    __del__ = lambda self : None;
ossimApplanixEcefModel_swigregister = _pyossim.ossimApplanixEcefModel_swigregister
ossimApplanixEcefModel_swigregister(ossimApplanixEcefModel)

ossimElevUtil_HEADER = _pyossim.ossimElevUtil_HEADER
class ossimElevUtil(ossimReferenced):
    __swig_setmethods__ = {}
    for _s in [ossimReferenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimElevUtil, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimReferenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimElevUtil, name)
    __repr__ = _swig_repr
    OSSIM_DEM_OP_UNKNOWN = _pyossim.ossimElevUtil_OSSIM_DEM_OP_UNKNOWN
    OSSIM_DEM_OP_HILL_SHADE = _pyossim.ossimElevUtil_OSSIM_DEM_OP_HILL_SHADE
    OSSIM_DEM_OP_COLOR_RELIEF = _pyossim.ossimElevUtil_OSSIM_DEM_OP_COLOR_RELIEF
    OSSIM_DEM_OP_ORTHO = _pyossim.ossimElevUtil_OSSIM_DEM_OP_ORTHO
    OSSIM_DEM_PROJ_UNKNOWN = _pyossim.ossimElevUtil_OSSIM_DEM_PROJ_UNKNOWN
    OSSIM_DEM_PROJ_GEO = _pyossim.ossimElevUtil_OSSIM_DEM_PROJ_GEO
    OSSIM_DEM_PROJ_GEO_SCALED = _pyossim.ossimElevUtil_OSSIM_DEM_PROJ_GEO_SCALED
    OSSIM_DEM_PROJ_INPUT = _pyossim.ossimElevUtil_OSSIM_DEM_PROJ_INPUT
    OSSIM_DEM_PROJ_UTM = _pyossim.ossimElevUtil_OSSIM_DEM_PROJ_UTM
    def __init__(self): 
        this = _pyossim.new_ossimElevUtil()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimElevUtil
    __del__ = lambda self : None;
    def initialize(self, *args): return _pyossim.ossimElevUtil_initialize(self, *args)
    def execute(self): return _pyossim.ossimElevUtil_execute(self)
    def getOutputFilename(self, *args): return _pyossim.ossimElevUtil_getOutputFilename(self, *args)
ossimElevUtil_swigregister = _pyossim.ossimElevUtil_swigregister
ossimElevUtil_swigregister(ossimElevUtil)

ossimInfo_HEADER = _pyossim.ossimInfo_HEADER
class ossimInfo(ossimReferenced):
    __swig_setmethods__ = {}
    for _s in [ossimReferenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimReferenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimInfo
    __del__ = lambda self : None;
    def addArguments(self, *args): return _pyossim.ossimInfo_addArguments(self, *args)
    def initialize(self, *args): return _pyossim.ossimInfo_initialize(self, *args)
    def execute(self): return _pyossim.ossimInfo_execute(self)
    def executeImageOptions(self, *args): return _pyossim.ossimInfo_executeImageOptions(self, *args)
    def openImage(self, *args): return _pyossim.ossimInfo_openImage(self, *args)
    def closeImage(self): return _pyossim.ossimInfo_closeImage(self)
    def getImageHandler(self): return _pyossim.ossimInfo_getImageHandler(self)
    def dumpImage(self, *args): return _pyossim.ossimInfo_dumpImage(self, *args)
    def printFactories(self, *args): return _pyossim.ossimInfo_printFactories(self, *args)
    def getImageMetadata(self, *args): return _pyossim.ossimInfo_getImageMetadata(self, *args)
    def getImagePalette(self, *args): return _pyossim.ossimInfo_getImagePalette(self, *args)
    def getImageInfo(self, *args): return _pyossim.ossimInfo_getImageInfo(self, *args)
    def getImageGeometryInfo(self, *args): return _pyossim.ossimInfo_getImageGeometryInfo(self, *args)
    def getImageRect(self, *args): return _pyossim.ossimInfo_getImageRect(self, *args)
    def isImageEntryOverview(self): return _pyossim.ossimInfo_isImageEntryOverview(self)
    def printConfiguration(self, *args): return _pyossim.ossimInfo_printConfiguration(self, *args)
    def printDatums(self, *args): return _pyossim.ossimInfo_printDatums(self, *args)
    def deg2rad(self, *args): return _pyossim.ossimInfo_deg2rad(self, *args)
    def rad2deg(self, *args): return _pyossim.ossimInfo_rad2deg(self, *args)
    def ft2mtrs(self, *args): return _pyossim.ossimInfo_ft2mtrs(self, *args)
    def mtrs2ft(self, *args): return _pyossim.ossimInfo_mtrs2ft(self, *args)
    def mtrsPerDeg(self, *args): return _pyossim.ossimInfo_mtrsPerDeg(self, *args)
    def outputHeight(self, *args): return _pyossim.ossimInfo_outputHeight(self, *args)
    def printPlugins(self, *args): return _pyossim.ossimInfo_printPlugins(self, *args)
    def testPlugin(self, *args): return _pyossim.ossimInfo_testPlugin(self, *args)
    def printOverviewTypes(self, *args): return _pyossim.ossimInfo_printOverviewTypes(self, *args)
    def printProjections(self, *args): return _pyossim.ossimInfo_printProjections(self, *args)
    def printReaderProps(self, *args): return _pyossim.ossimInfo_printReaderProps(self, *args)
    def printResamplerFilters(self, *args): return _pyossim.ossimInfo_printResamplerFilters(self, *args)
    def printWriters(self, *args): return _pyossim.ossimInfo_printWriters(self, *args)
    def printWriterProps(self, *args): return _pyossim.ossimInfo_printWriterProps(self, *args)
    def getRadiometry(self, *args): return _pyossim.ossimInfo_getRadiometry(self, *args)
ossimInfo_swigregister = _pyossim.ossimInfo_swigregister
ossimInfo_swigregister(ossimInfo)

ossimRpfUtil_HEADER = _pyossim.ossimRpfUtil_HEADER
class ossimRpfUtil(ossimReferenced):
    __swig_setmethods__ = {}
    for _s in [ossimReferenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimRpfUtil, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimReferenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimRpfUtil, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimRpfUtil()
        try: self.this.append(this)
        except: self.this = this
    def writeDotRpfFiles(self, *args): return _pyossim.ossimRpfUtil_writeDotRpfFiles(self, *args)
    def writeDotRpfFile(self, *args): return _pyossim.ossimRpfUtil_writeDotRpfFile(self, *args)
ossimRpfUtil_swigregister = _pyossim.ossimRpfUtil_swigregister
ossimRpfUtil_swigregister(ossimRpfUtil)



