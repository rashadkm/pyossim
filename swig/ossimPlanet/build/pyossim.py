# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyossim', [dirname(__file__)])
        except ImportError:
            import _pyossim
            return _pyossim
        if fp is not None:
            try:
                _mod = imp.load_module('_pyossim', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyossim = swig_import_helper()
    del swig_import_helper
else:
    import _pyossim
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


OSG_REFERENCED = _pyossim.OSG_REFERENCED
class Referenced(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Referenced, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Referenced, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_Referenced(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyossim.Referenced___set__(self, *args)
    def setThreadSafeRefUnref(self, *args): return _pyossim.Referenced_setThreadSafeRefUnref(self, *args)
    def getThreadSafeRefUnref(self): return _pyossim.Referenced_getThreadSafeRefUnref(self)
    def getRefMutex(self): return _pyossim.Referenced_getRefMutex(self)
    __swig_getmethods__["getGlobalReferencedMutex"] = lambda x: _pyossim.Referenced_getGlobalReferencedMutex
    if _newclass:getGlobalReferencedMutex = staticmethod(_pyossim.Referenced_getGlobalReferencedMutex)
    def ref(self): return _pyossim.Referenced_ref(self)
    def unref(self): return _pyossim.Referenced_unref(self)
    def unref_nodelete(self): return _pyossim.Referenced_unref_nodelete(self)
    def referenceCount(self): return _pyossim.Referenced_referenceCount(self)
    def getObserverSet(self): return _pyossim.Referenced_getObserverSet(self)
    def getOrCreateObserverSet(self): return _pyossim.Referenced_getOrCreateObserverSet(self)
    def addObserver(self, *args): return _pyossim.Referenced_addObserver(self, *args)
    def removeObserver(self, *args): return _pyossim.Referenced_removeObserver(self, *args)
    __swig_getmethods__["setThreadSafeReferenceCounting"] = lambda x: _pyossim.Referenced_setThreadSafeReferenceCounting
    if _newclass:setThreadSafeReferenceCounting = staticmethod(_pyossim.Referenced_setThreadSafeReferenceCounting)
    __swig_getmethods__["getThreadSafeReferenceCounting"] = lambda x: _pyossim.Referenced_getThreadSafeReferenceCounting
    if _newclass:getThreadSafeReferenceCounting = staticmethod(_pyossim.Referenced_getThreadSafeReferenceCounting)
    __swig_getmethods__["setDeleteHandler"] = lambda x: _pyossim.Referenced_setDeleteHandler
    if _newclass:setDeleteHandler = staticmethod(_pyossim.Referenced_setDeleteHandler)
    __swig_getmethods__["getDeleteHandler"] = lambda x: _pyossim.Referenced_getDeleteHandler
    if _newclass:getDeleteHandler = staticmethod(_pyossim.Referenced_getDeleteHandler)
Referenced_swigregister = _pyossim.Referenced_swigregister
Referenced_swigregister(Referenced)

def Referenced_getGlobalReferencedMutex():
  return _pyossim.Referenced_getGlobalReferencedMutex()
Referenced_getGlobalReferencedMutex = _pyossim.Referenced_getGlobalReferencedMutex

def Referenced_setThreadSafeReferenceCounting(*args):
  return _pyossim.Referenced_setThreadSafeReferenceCounting(*args)
Referenced_setThreadSafeReferenceCounting = _pyossim.Referenced_setThreadSafeReferenceCounting

def Referenced_getThreadSafeReferenceCounting():
  return _pyossim.Referenced_getThreadSafeReferenceCounting()
Referenced_getThreadSafeReferenceCounting = _pyossim.Referenced_getThreadSafeReferenceCounting

def Referenced_setDeleteHandler(*args):
  return _pyossim.Referenced_setDeleteHandler(*args)
Referenced_setDeleteHandler = _pyossim.Referenced_setDeleteHandler

def Referenced_getDeleteHandler():
  return _pyossim.Referenced_getDeleteHandler()
Referenced_getDeleteHandler = _pyossim.Referenced_getDeleteHandler


def intrusive_ptr_add_ref(*args):
  return _pyossim.intrusive_ptr_add_ref(*args)
intrusive_ptr_add_ref = _pyossim.intrusive_ptr_add_ref

def intrusive_ptr_release(*args):
  return _pyossim.intrusive_ptr_release(*args)
intrusive_ptr_release = _pyossim.intrusive_ptr_release
NULL = _pyossim.NULL
OSG_OBJECT = _pyossim.OSG_OBJECT
class Object(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self): return _pyossim.Object_cloneType(self)
    def clone(self, *args): return _pyossim.Object_clone(self, *args)
    def isSameKindAs(self, *args): return _pyossim.Object_isSameKindAs(self, *args)
    def libraryName(self): return _pyossim.Object_libraryName(self)
    def className(self): return _pyossim.Object_className(self)
    def setThreadSafeRefUnref(self, *args): return _pyossim.Object_setThreadSafeRefUnref(self, *args)
    def setName(self, *args): return _pyossim.Object_setName(self, *args)
    def getName(self): return _pyossim.Object_getName(self)
    DYNAMIC = _pyossim.Object_DYNAMIC
    STATIC = _pyossim.Object_STATIC
    UNSPECIFIED = _pyossim.Object_UNSPECIFIED
    def setDataVariance(self, *args): return _pyossim.Object_setDataVariance(self, *args)
    def getDataVariance(self): return _pyossim.Object_getDataVariance(self)
    def computeDataVariance(self): return _pyossim.Object_computeDataVariance(self)
    def setUserDataContainer(self, *args): return _pyossim.Object_setUserDataContainer(self, *args)
    def getUserDataContainer(self, *args): return _pyossim.Object_getUserDataContainer(self, *args)
    def getOrCreateUserDataContainer(self): return _pyossim.Object_getOrCreateUserDataContainer(self)
    def setUserData(self, *args): return _pyossim.Object_setUserData(self, *args)
    def getUserData(self, *args): return _pyossim.Object_getUserData(self, *args)
    def resizeGLObjectBuffers(self, *args): return _pyossim.Object_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, arg0 = None): return _pyossim.Object_releaseGLObjects(self, arg0)
Object_swigregister = _pyossim.Object_swigregister
Object_swigregister(Object)

OSG_NODE = _pyossim.OSG_NODE
class Node(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_Node(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyossim.Node_cloneType(self)
    def clone(self, *args): return _pyossim.Node_clone(self, *args)
    def isSameKindAs(self, *args): return _pyossim.Node_isSameKindAs(self, *args)
    def libraryName(self): return _pyossim.Node_libraryName(self)
    def className(self): return _pyossim.Node_className(self)
    def asGroup(self, *args): return _pyossim.Node_asGroup(self, *args)
    def asTransform(self, *args): return _pyossim.Node_asTransform(self, *args)
    def asSwitch(self, *args): return _pyossim.Node_asSwitch(self, *args)
    def asGeode(self, *args): return _pyossim.Node_asGeode(self, *args)
    def asTerrain(self, *args): return _pyossim.Node_asTerrain(self, *args)
    def accept(self, *args): return _pyossim.Node_accept(self, *args)
    def ascend(self, *args): return _pyossim.Node_ascend(self, *args)
    def traverse(self, *args): return _pyossim.Node_traverse(self, *args)
    def getParents(self): return _pyossim.Node_getParents(self)
    def getParent(self, *args): return _pyossim.Node_getParent(self, *args)
    def getNumParents(self): return _pyossim.Node_getNumParents(self)
    def getParentalNodePaths(self, haltTraversalAtNode = None): return _pyossim.Node_getParentalNodePaths(self, haltTraversalAtNode)
    def getWorldMatrices(self, haltTraversalAtNode = None): return _pyossim.Node_getWorldMatrices(self, haltTraversalAtNode)
    def setUpdateCallback(self, *args): return _pyossim.Node_setUpdateCallback(self, *args)
    def getUpdateCallback(self, *args): return _pyossim.Node_getUpdateCallback(self, *args)
    def addUpdateCallback(self, *args): return _pyossim.Node_addUpdateCallback(self, *args)
    def removeUpdateCallback(self, *args): return _pyossim.Node_removeUpdateCallback(self, *args)
    def getNumChildrenRequiringUpdateTraversal(self): return _pyossim.Node_getNumChildrenRequiringUpdateTraversal(self)
    def setEventCallback(self, *args): return _pyossim.Node_setEventCallback(self, *args)
    def getEventCallback(self, *args): return _pyossim.Node_getEventCallback(self, *args)
    def addEventCallback(self, *args): return _pyossim.Node_addEventCallback(self, *args)
    def removeEventCallback(self, *args): return _pyossim.Node_removeEventCallback(self, *args)
    def getNumChildrenRequiringEventTraversal(self): return _pyossim.Node_getNumChildrenRequiringEventTraversal(self)
    def setCullCallback(self, *args): return _pyossim.Node_setCullCallback(self, *args)
    def getCullCallback(self, *args): return _pyossim.Node_getCullCallback(self, *args)
    def addCullCallback(self, *args): return _pyossim.Node_addCullCallback(self, *args)
    def removeCullCallback(self, *args): return _pyossim.Node_removeCullCallback(self, *args)
    def setCullingActive(self, *args): return _pyossim.Node_setCullingActive(self, *args)
    def getCullingActive(self): return _pyossim.Node_getCullingActive(self)
    def getNumChildrenWithCullingDisabled(self): return _pyossim.Node_getNumChildrenWithCullingDisabled(self)
    def isCullingActive(self): return _pyossim.Node_isCullingActive(self)
    def getNumChildrenWithOccluderNodes(self): return _pyossim.Node_getNumChildrenWithOccluderNodes(self)
    def containsOccluderNodes(self): return _pyossim.Node_containsOccluderNodes(self)
    def setNodeMask(self, *args): return _pyossim.Node_setNodeMask(self, *args)
    def getNodeMask(self): return _pyossim.Node_getNodeMask(self)
    def setStateSet(self, *args): return _pyossim.Node_setStateSet(self, *args)
    def getOrCreateStateSet(self): return _pyossim.Node_getOrCreateStateSet(self)
    def getStateSet(self, *args): return _pyossim.Node_getStateSet(self, *args)
    def setDescriptions(self, *args): return _pyossim.Node_setDescriptions(self, *args)
    def getDescriptions(self, *args): return _pyossim.Node_getDescriptions(self, *args)
    def getDescription(self, *args): return _pyossim.Node_getDescription(self, *args)
    def getNumDescriptions(self): return _pyossim.Node_getNumDescriptions(self)
    def addDescription(self, *args): return _pyossim.Node_addDescription(self, *args)
    def setInitialBound(self, *args): return _pyossim.Node_setInitialBound(self, *args)
    def getInitialBound(self): return _pyossim.Node_getInitialBound(self)
    def dirtyBound(self): return _pyossim.Node_dirtyBound(self)
    def getBound(self): return _pyossim.Node_getBound(self)
    def computeBound(self): return _pyossim.Node_computeBound(self)
    def setThreadSafeRefUnref(self, *args): return _pyossim.Node_setThreadSafeRefUnref(self, *args)
    def resizeGLObjectBuffers(self, *args): return _pyossim.Node_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, arg0 = None): return _pyossim.Node_releaseGLObjects(self, arg0)
Node_swigregister = _pyossim.Node_swigregister
Node_swigregister(Node)

class ossimPlanetAction(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAction, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimPlanetAction
    __del__ = lambda self : None;
    def toDestinationCommandAction(self, *args): return _pyossim.ossimPlanetAction_toDestinationCommandAction(self, *args)
    def toXmlAction(self, *args): return _pyossim.ossimPlanetAction_toXmlAction(self, *args)
    def clone(self): return _pyossim.ossimPlanetAction_clone(self)
    def cloneType(self): return _pyossim.ossimPlanetAction_cloneType(self)
    def setSourceCode(self, *args): return _pyossim.ossimPlanetAction_setSourceCode(self, *args)
    def sourceCode(self, *args): return _pyossim.ossimPlanetAction_sourceCode(self, *args)
    def target(self, *args): return _pyossim.ossimPlanetAction_target(self, *args)
    def setTarget(self, *args): return _pyossim.ossimPlanetAction_setTarget(self, *args)
    def command(self, *args): return _pyossim.ossimPlanetAction_command(self, *args)
    def setCommand(self, *args): return _pyossim.ossimPlanetAction_setCommand(self, *args)
    def origin(self): return _pyossim.ossimPlanetAction_origin(self)
    def setOrigin(self, *args): return _pyossim.ossimPlanetAction_setOrigin(self, *args)
    def ossimPlanetAction_print(self, *args): return _pyossim.ossimPlanetAction_ossimPlanetAction_print(self, *args)
    def read(self, *args): return _pyossim.ossimPlanetAction_read(self, *args)
    def printError(self, *args): return _pyossim.ossimPlanetAction_printError(self, *args)
    def post(self): return _pyossim.ossimPlanetAction_post(self)
    def execute(self): return _pyossim.ossimPlanetAction_execute(self)
    def allExecute(self): return _pyossim.ossimPlanetAction_allExecute(self)
    def tellExecute(self, *args): return _pyossim.ossimPlanetAction_tellExecute(self, *args)
ossimPlanetAction_swigregister = _pyossim.ossimPlanetAction_swigregister
ossimPlanetAction_swigregister(ossimPlanetAction)

def __lshift__(*args):
  return _pyossim.__lshift__(*args)
__lshift__ = _pyossim.__lshift__

def __rshift__(*args):
  return _pyossim.__rshift__(*args)
__rshift__ = _pyossim.__rshift__

class ossimPlanetActionReceiver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetActionReceiver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetActionReceiver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimPlanetActionReceiver
    __del__ = lambda self : None;
    def name(self): return _pyossim.ossimPlanetActionReceiver_name(self)
    def pathname(self): return _pyossim.ossimPlanetActionReceiver_pathname(self)
    def setPathname(self, *args): return _pyossim.ossimPlanetActionReceiver_setPathname(self, *args)
    def setPathnameAndRegister(self, *args): return _pyossim.ossimPlanetActionReceiver_setPathnameAndRegister(self, *args)
    def execute(self, *args): return _pyossim.ossimPlanetActionReceiver_execute(self, *args)
ossimPlanetActionReceiver_swigregister = _pyossim.ossimPlanetActionReceiver_swigregister
ossimPlanetActionReceiver_swigregister(ossimPlanetActionReceiver)

class ossimPlanetArchiveMapping(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetArchiveMapping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetArchiveMapping, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimPlanetArchiveMapping(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimPlanetArchiveMapping
    __del__ = lambda self : None;
    def getSource(self): return _pyossim.ossimPlanetArchiveMapping_getSource(self)
    def setSource(self, *args): return _pyossim.ossimPlanetArchiveMapping_setSource(self, *args)
    def getDestination(self): return _pyossim.ossimPlanetArchiveMapping_getDestination(self)
    def setDestination(self, *args): return _pyossim.ossimPlanetArchiveMapping_setDestination(self, *args)
ossimPlanetArchiveMapping_swigregister = _pyossim.ossimPlanetArchiveMapping_swigregister
ossimPlanetArchiveMapping_swigregister(ossimPlanetArchiveMapping)

class ossimPlanetArchive(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetArchive, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimPlanetArchive()
        try: self.this.append(this)
        except: self.this = this
    def addMapping(self, *args): return _pyossim.ossimPlanetArchive_addMapping(self, *args)
    def removeMapping(self, *args): return _pyossim.ossimPlanetArchive_removeMapping(self, *args)
    def matchPath(self, *args): return _pyossim.ossimPlanetArchive_matchPath(self, *args)
    def convertToDirectory(self, *args): return _pyossim.ossimPlanetArchive_convertToDirectory(self, *args)
    def setArchiveMappingEnabledFlag(self, enabled = False): return _pyossim.ossimPlanetArchive_setArchiveMappingEnabledFlag(self, enabled)
    def archiveMappingEnabled(self): return _pyossim.ossimPlanetArchive_archiveMappingEnabled(self)
    def getMappingList(self): return _pyossim.ossimPlanetArchive_getMappingList(self)
ossimPlanetArchive_swigregister = _pyossim.ossimPlanetArchive_swigregister
ossimPlanetArchive_swigregister(ossimPlanetArchive)

class ossimPlanetCallback(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimPlanetCallback()
        try: self.this.append(this)
        except: self.this = this
    def setEnableFlag(self, *args): return _pyossim.ossimPlanetCallback_setEnableFlag(self, *args)
    def enableFlag(self): return _pyossim.ossimPlanetCallback_enableFlag(self)
    __swig_destroy__ = _pyossim.delete_ossimPlanetCallback
    __del__ = lambda self : None;
ossimPlanetCallback_swigregister = _pyossim.ossimPlanetCallback_swigregister
ossimPlanetCallback_swigregister(ossimPlanetCallback)

class ossimPlanetOperationCallback(ossimPlanetCallback):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetOperationCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetOperationCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimPlanetOperationCallback()
        try: self.this.append(this)
        except: self.this = this
    def ready(self, *args): return _pyossim.ossimPlanetOperationCallback_ready(self, *args)
    def started(self, *args): return _pyossim.ossimPlanetOperationCallback_started(self, *args)
    def finished(self, *args): return _pyossim.ossimPlanetOperationCallback_finished(self, *args)
    def canceled(self, *args): return _pyossim.ossimPlanetOperationCallback_canceled(self, *args)
    def priorityChanged(self, *args): return _pyossim.ossimPlanetOperationCallback_priorityChanged(self, *args)
    def propertyChanged(self, *args): return _pyossim.ossimPlanetOperationCallback_propertyChanged(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimPlanetOperationCallback
    __del__ = lambda self : None;
ossimPlanetOperationCallback_swigregister = _pyossim.ossimPlanetOperationCallback_swigregister
ossimPlanetOperationCallback_swigregister(ossimPlanetOperationCallback)

class ossimPlanetOperation(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetOperation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    READY_STATE = _pyossim.ossimPlanetOperation_READY_STATE
    RUN_STATE = _pyossim.ossimPlanetOperation_RUN_STATE
    CANCELED_STATE = _pyossim.ossimPlanetOperation_CANCELED_STATE
    FINISHED_STATE = _pyossim.ossimPlanetOperation_FINISHED_STATE
    __swig_destroy__ = _pyossim.delete_ossimPlanetOperation
    __del__ = lambda self : None;
    def setName(self, *args): return _pyossim.ossimPlanetOperation_setName(self, *args)
    def name(self): return _pyossim.ossimPlanetOperation_name(self)
    def setId(self, *args): return _pyossim.ossimPlanetOperation_setId(self, *args)
    def id(self): return _pyossim.ossimPlanetOperation_id(self)
    def setState(self, *args): return _pyossim.ossimPlanetOperation_setState(self, *args)
    def isStopped(self): return _pyossim.ossimPlanetOperation_isStopped(self)
    def state(self): return _pyossim.ossimPlanetOperation_state(self)
    def release(self): return _pyossim.ossimPlanetOperation_release(self)
    def addDependency(self, *args): return _pyossim.ossimPlanetOperation_addDependency(self, *args)
    def removeDependency(self, *args): return _pyossim.ossimPlanetOperation_removeDependency(self, *args)
    def hasDependency(self): return _pyossim.ossimPlanetOperation_hasDependency(self)
    def dependencyList(self, *args): return _pyossim.ossimPlanetOperation_dependencyList(self, *args)
    def setPriority(self, *args): return _pyossim.ossimPlanetOperation_setPriority(self, *args)
    def priority(self): return _pyossim.ossimPlanetOperation_priority(self)
    def status(self, *args): return _pyossim.ossimPlanetOperation_status(self, *args)
    def setStatus(self, *args): return _pyossim.ossimPlanetOperation_setStatus(self, *args)
    def nextDependency(self, recurseFlag = True): return _pyossim.ossimPlanetOperation_nextDependency(self, recurseFlag)
    def cancel(self): return _pyossim.ossimPlanetOperation_cancel(self)
    def runMutex(self): return _pyossim.ossimPlanetOperation_runMutex(self)
    def reset(self): return _pyossim.ossimPlanetOperation_reset(self)
    def start(self): return _pyossim.ossimPlanetOperation_start(self)
ossimPlanetOperation_swigregister = _pyossim.ossimPlanetOperation_swigregister
ossimPlanetOperation_swigregister(ossimPlanetOperation)
cvar = _pyossim.cvar
ossimPlanetOperation.PRIORITY_HIGHEST = _pyossim.cvar.ossimPlanetOperation_PRIORITY_HIGHEST
ossimPlanetOperation.PRIORITY_LOWEST = _pyossim.cvar.ossimPlanetOperation_PRIORITY_LOWEST

class ossimPlanetOperationQueue(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetOperationQueue, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetOperationQueue, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimPlanetOperationQueue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimPlanetOperationQueue
    __del__ = lambda self : None;
    def add(self, *args): return _pyossim.ossimPlanetOperationQueue_add(self, *args)
    def removeByName(self, *args): return _pyossim.ossimPlanetOperationQueue_removeByName(self, *args)
    def removeById(self, *args): return _pyossim.ossimPlanetOperationQueue_removeById(self, *args)
    def remove(self, *args): return _pyossim.ossimPlanetOperationQueue_remove(self, *args)
    def removeStoppedOperations(self): return _pyossim.ossimPlanetOperationQueue_removeStoppedOperations(self)
    def removeAllOperations(self): return _pyossim.ossimPlanetOperationQueue_removeAllOperations(self)
    def nextOperation(self, blockIfEmptyFlag = True): return _pyossim.ossimPlanetOperationQueue_nextOperation(self, blockIfEmptyFlag)
    def releaseOperationsBlock(self): return _pyossim.ossimPlanetOperationQueue_releaseOperationsBlock(self)
    def empty(self): return _pyossim.ossimPlanetOperationQueue_empty(self)
    def size(self): return _pyossim.ossimPlanetOperationQueue_size(self)
ossimPlanetOperationQueue_swigregister = _pyossim.ossimPlanetOperationQueue_swigregister
ossimPlanetOperationQueue_swigregister(ossimPlanetOperationQueue)

class ossimPlanetOperationPriorityQueue(ossimPlanetOperationQueue):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetOperationQueue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetOperationPriorityQueue, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetOperationQueue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetOperationPriorityQueue, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimPlanetOperationPriorityQueue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimPlanetOperationPriorityQueue
    __del__ = lambda self : None;
    def nextOperation(self, blockIfEmptyFlag = True): return _pyossim.ossimPlanetOperationPriorityQueue_nextOperation(self, blockIfEmptyFlag)
ossimPlanetOperationPriorityQueue_swigregister = _pyossim.ossimPlanetOperationPriorityQueue_swigregister
ossimPlanetOperationPriorityQueue_swigregister(ossimPlanetOperationPriorityQueue)

class ossimPlanetOperationThreadQueue(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetOperationThreadQueue, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetOperationThreadQueue, name)
    __repr__ = _swig_repr
    def __init__(self, opq = None): 
        this = _pyossim.new_ossimPlanetOperationThreadQueue(opq)
        try: self.this.append(this)
        except: self.this = this
    def setOperationQueue(self, *args): return _pyossim.ossimPlanetOperationThreadQueue_setOperationQueue(self, *args)
    def operationQueue(self, *args): return _pyossim.ossimPlanetOperationThreadQueue_operationQueue(self, *args)
    def add(self, *args): return _pyossim.ossimPlanetOperationThreadQueue_add(self, *args)
    def remove(self, *args): return _pyossim.ossimPlanetOperationThreadQueue_remove(self, *args)
    def removeByName(self, *args): return _pyossim.ossimPlanetOperationThreadQueue_removeByName(self, *args)
    def removeById(self, *args): return _pyossim.ossimPlanetOperationThreadQueue_removeById(self, *args)
    def removeAllOperations(self): return _pyossim.ossimPlanetOperationThreadQueue_removeAllOperations(self)
    def currentOperation(self): return _pyossim.ossimPlanetOperationThreadQueue_currentOperation(self)
    def cancelCurrentOperation(self): return _pyossim.ossimPlanetOperationThreadQueue_cancelCurrentOperation(self)
    def run(self): return _pyossim.ossimPlanetOperationThreadQueue_run(self)
    def setDone(self, *args): return _pyossim.ossimPlanetOperationThreadQueue_setDone(self, *args)
    def done(self): return _pyossim.ossimPlanetOperationThreadQueue_done(self)
    def cancel(self): return _pyossim.ossimPlanetOperationThreadQueue_cancel(self)
    def empty(self): return _pyossim.ossimPlanetOperationThreadQueue_empty(self)
ossimPlanetOperationThreadQueue_swigregister = _pyossim.ossimPlanetOperationThreadQueue_swigregister
ossimPlanetOperationThreadQueue_swigregister(ossimPlanetOperationThreadQueue)

class ossimPlanetOperationMultiThreadQueue(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetOperationMultiThreadQueue, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetOperationMultiThreadQueue, name)
    __repr__ = _swig_repr
    def __init__(self, numberOfThreads = 1): 
        this = _pyossim.new_ossimPlanetOperationMultiThreadQueue(numberOfThreads)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimPlanetOperationMultiThreadQueue
    __del__ = lambda self : None;
    def operationQueue(self, *args): return _pyossim.ossimPlanetOperationMultiThreadQueue_operationQueue(self, *args)
    def add(self, *args): return _pyossim.ossimPlanetOperationMultiThreadQueue_add(self, *args)
    def remove(self, *args): return _pyossim.ossimPlanetOperationMultiThreadQueue_remove(self, *args)
    def removeByName(self, *args): return _pyossim.ossimPlanetOperationMultiThreadQueue_removeByName(self, *args)
    def removeById(self, *args): return _pyossim.ossimPlanetOperationMultiThreadQueue_removeById(self, *args)
    def removeAllOperations(self): return _pyossim.ossimPlanetOperationMultiThreadQueue_removeAllOperations(self)
    def cancelCurrentOperation(self): return _pyossim.ossimPlanetOperationMultiThreadQueue_cancelCurrentOperation(self)
ossimPlanetOperationMultiThreadQueue_swigregister = _pyossim.ossimPlanetOperationMultiThreadQueue_swigregister
ossimPlanetOperationMultiThreadQueue_swigregister(ossimPlanetOperationMultiThreadQueue)

class ossimPlanetImageCache(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetImageCache, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetImageCache, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyossim.delete_ossimPlanetImageCache
    __del__ = lambda self : None;
    def setEnabledFlag(self, *args): return _pyossim.ossimPlanetImageCache_setEnabledFlag(self, *args)
    def enabledFlag(self): return _pyossim.ossimPlanetImageCache_enabledFlag(self)
    def clean(self): return _pyossim.ossimPlanetImageCache_clean(self)
    def shrink(self): return _pyossim.ossimPlanetImageCache_shrink(self)
    def addOrUpdate(self, *args): return _pyossim.ossimPlanetImageCache_addOrUpdate(self, *args)
    def get(self, *args): return _pyossim.ossimPlanetImageCache_get(self, *args)
    def hasImage(self, *args): return _pyossim.ossimPlanetImageCache_hasImage(self, *args)
    def setMinMaxCacheSizeInBytes(self, *args): return _pyossim.ossimPlanetImageCache_setMinMaxCacheSizeInBytes(self, *args)
    def setMinMaxCacheSizeInMegaBytes(self, *args): return _pyossim.ossimPlanetImageCache_setMinMaxCacheSizeInMegaBytes(self, *args)
    def setMinMaxCacheSizeInGigaBytes(self, *args): return _pyossim.ossimPlanetImageCache_setMinMaxCacheSizeInGigaBytes(self, *args)
    def cacheSizeInBytes(self): return _pyossim.ossimPlanetImageCache_cacheSizeInBytes(self)
    def maxCacheSizeInBytes(self): return _pyossim.ossimPlanetImageCache_maxCacheSizeInBytes(self)
    def minCacheSizeInBytes(self): return _pyossim.ossimPlanetImageCache_minCacheSizeInBytes(self)
    def exceedsMaxCacheSize(self): return _pyossim.ossimPlanetImageCache_exceedsMaxCacheSize(self)
    def exceedsMinCacheSize(self): return _pyossim.ossimPlanetImageCache_exceedsMinCacheSize(self)
ossimPlanetImageCache_swigregister = _pyossim.ossimPlanetImageCache_swigregister
ossimPlanetImageCache_swigregister(ossimPlanetImageCache)

class ossimPlanetMemoryImageCache(ossimPlanetImageCache):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetImageCache]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetMemoryImageCache, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetImageCache]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetMemoryImageCache, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimPlanetMemoryImageCache()
        try: self.this.append(this)
        except: self.this = this
    def clean(self): return _pyossim.ossimPlanetMemoryImageCache_clean(self)
    def shrink(self): return _pyossim.ossimPlanetMemoryImageCache_shrink(self)
    def addOrUpdate(self, *args): return _pyossim.ossimPlanetMemoryImageCache_addOrUpdate(self, *args)
    def get(self, *args): return _pyossim.ossimPlanetMemoryImageCache_get(self, *args)
    def hasImage(self, *args): return _pyossim.ossimPlanetMemoryImageCache_hasImage(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimPlanetMemoryImageCache
    __del__ = lambda self : None;
ossimPlanetMemoryImageCache_swigregister = _pyossim.ossimPlanetMemoryImageCache_swigregister
ossimPlanetMemoryImageCache_swigregister(ossimPlanetMemoryImageCache)

class ossimPlanetDiskImageCache(ossimPlanetImageCache):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetImageCache]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetDiskImageCache, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetImageCache]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetDiskImageCache, name)
    __repr__ = _swig_repr
    DISK_CACHE_RAW = _pyossim.ossimPlanetDiskImageCache_DISK_CACHE_RAW
    DISK_CACHE_JPEG = _pyossim.ossimPlanetDiskImageCache_DISK_CACHE_JPEG
    def __init__(self): 
        this = _pyossim.new_ossimPlanetDiskImageCache()
        try: self.this.append(this)
        except: self.this = this
    def openDirectory(self, *args): return _pyossim.ossimPlanetDiskImageCache_openDirectory(self, *args)
    def clean(self): return _pyossim.ossimPlanetDiskImageCache_clean(self)
    def shrink(self): return _pyossim.ossimPlanetDiskImageCache_shrink(self)
    def addOrUpdate(self, *args): return _pyossim.ossimPlanetDiskImageCache_addOrUpdate(self, *args)
    def get(self, *args): return _pyossim.ossimPlanetDiskImageCache_get(self, *args)
    def hasImage(self, *args): return _pyossim.ossimPlanetDiskImageCache_hasImage(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimPlanetDiskImageCache
    __del__ = lambda self : None;
ossimPlanetDiskImageCache_swigregister = _pyossim.ossimPlanetDiskImageCache_swigregister
ossimPlanetDiskImageCache_swigregister(ossimPlanetDiskImageCache)

class ossimPlanetImageCacheShrinkOperation(ossimPlanetOperation):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetImageCacheShrinkOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetImageCacheShrinkOperation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyossim.new_ossimPlanetImageCacheShrinkOperation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyossim.delete_ossimPlanetImageCacheShrinkOperation
    __del__ = lambda self : None;
    def setCache(self, *args): return _pyossim.ossimPlanetImageCacheShrinkOperation_setCache(self, *args)
    def run(self): return _pyossim.ossimPlanetImageCacheShrinkOperation_run(self)
ossimPlanetImageCacheShrinkOperation_swigregister = _pyossim.ossimPlanetImageCacheShrinkOperation_swigregister
ossimPlanetImageCacheShrinkOperation_swigregister(ossimPlanetImageCacheShrinkOperation)

class ossimPlanetBoundingBox(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetBoundingBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetBoundingBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyossim.new_ossimPlanetBoundingBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def extrude(self, *args): return _pyossim.ossimPlanetBoundingBox_extrude(self, *args)
    def __getitem__(self, *args): return _pyossim.ossimPlanetBoundingBox___getitem__(self, *args)
    def intersects(self, *args): return _pyossim.ossimPlanetBoundingBox_intersects(self, *args)
    def isInFront(self, *args): return _pyossim.ossimPlanetBoundingBox_isInFront(self, *args)
    def transform(self, *args): return _pyossim.ossimPlanetBoundingBox_transform(self, *args)
    def setCenter(self, *args): return _pyossim.ossimPlanetBoundingBox_setCenter(self, *args)
    def center(self): return _pyossim.ossimPlanetBoundingBox_center(self)
    def radius(self): return _pyossim.ossimPlanetBoundingBox_radius(self)
    def groundRadius(self): return _pyossim.ossimPlanetBoundingBox_groundRadius(self)
    __swig_destroy__ = _pyossim.delete_ossimPlanetBoundingBox
    __del__ = lambda self : None;
ossimPlanetBoundingBox_swigregister = _pyossim.ossimPlanetBoundingBox_swigregister
ossimPlanetBoundingBox_swigregister(ossimPlanetBoundingBox)

class ossimPlanetBillboardIcon(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetBillboardIcon, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetBillboardIcon, name)
    __repr__ = _swig_repr
    def __init__(self, objectGroundSize = 50000.0/OSSIMPLANET_WGS_84_RADIUS_EQUATOR): 
        this = _pyossim.new_ossimPlanetBillboardIcon(objectGroundSize)
        try: self.this.append(this)
        except: self.this = this
    def setGroundObjectSize(self, *args): return _pyossim.ossimPlanetBillboardIcon_setGroundObjectSize(self, *args)
    def setIcon(self, *args): return _pyossim.ossimPlanetBillboardIcon_setIcon(self, *args)
    def getGeom(self): return _pyossim.ossimPlanetBillboardIcon_getGeom(self)
    def setGeom(self, *args): return _pyossim.ossimPlanetBillboardIcon_setGeom(self, *args)
    def traverse(self, *args): return _pyossim.ossimPlanetBillboardIcon_traverse(self, *args)
    def computeBound(self): return _pyossim.ossimPlanetBillboardIcon_computeBound(self)
    def isCulled(self): return _pyossim.ossimPlanetBillboardIcon_isCulled(self)
    def setMinPixelSize(self, *args): return _pyossim.ossimPlanetBillboardIcon_setMinPixelSize(self, *args)
    def setMaxPixelSize(self, *args): return _pyossim.ossimPlanetBillboardIcon_setMaxPixelSize(self, *args)
    __swig_destroy__ = _pyossim.delete_ossimPlanetBillboardIcon
    __del__ = lambda self : None;
ossimPlanetBillboardIcon_swigregister = _pyossim.ossimPlanetBillboardIcon_swigregister
ossimPlanetBillboardIcon_swigregister(ossimPlanetBillboardIcon)



