# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyplanet', [dirname(__file__)])
        except ImportError:
            import _pyplanet
            return _pyplanet
        if fp is not None:
            try:
                _mod = imp.load_module('_pyplanet', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyplanet = swig_import_helper()
    del swig_import_helper
else:
    import _pyplanet
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


OPENTHREADS_VERSION = _pyplanet.OPENTHREADS_VERSION
OPENTHREADS_MAJOR_VERSION = _pyplanet.OPENTHREADS_MAJOR_VERSION
OPENTHREADS_MINOR_VERSION = _pyplanet.OPENTHREADS_MINOR_VERSION
OPENTHREADS_PATCH_VERSION = _pyplanet.OPENTHREADS_PATCH_VERSION
OPENTHREADS_SOVERSION = _pyplanet.OPENTHREADS_SOVERSION

def OpenThreadsGetVersion():
  return _pyplanet.OpenThreadsGetVersion()
OpenThreadsGetVersion = _pyplanet.OpenThreadsGetVersion

def OpenThreadsGetSOVersion():
  return _pyplanet.OpenThreadsGetSOVersion()
OpenThreadsGetSOVersion = _pyplanet.OpenThreadsGetSOVersion

def OpenThreadsGetLibraryName():
  return _pyplanet.OpenThreadsGetLibraryName()
OpenThreadsGetLibraryName = _pyplanet.OpenThreadsGetLibraryName

def GetNumberOfProcessors():
  return _pyplanet.GetNumberOfProcessors()
GetNumberOfProcessors = _pyplanet.GetNumberOfProcessors

def SetProcessorAffinityOfCurrentThread(*args):
  return _pyplanet.SetProcessorAffinityOfCurrentThread(*args)
SetProcessorAffinityOfCurrentThread = _pyplanet.SetProcessorAffinityOfCurrentThread
class Thread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thread, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["SetConcurrency"] = lambda x: _pyplanet.Thread_SetConcurrency
    if _newclass:SetConcurrency = staticmethod(_pyplanet.Thread_SetConcurrency)
    __swig_getmethods__["GetConcurrency"] = lambda x: _pyplanet.Thread_GetConcurrency
    if _newclass:GetConcurrency = staticmethod(_pyplanet.Thread_GetConcurrency)
    THREAD_PRIORITY_MAX = _pyplanet.Thread_THREAD_PRIORITY_MAX
    THREAD_PRIORITY_HIGH = _pyplanet.Thread_THREAD_PRIORITY_HIGH
    THREAD_PRIORITY_NOMINAL = _pyplanet.Thread_THREAD_PRIORITY_NOMINAL
    THREAD_PRIORITY_LOW = _pyplanet.Thread_THREAD_PRIORITY_LOW
    THREAD_PRIORITY_MIN = _pyplanet.Thread_THREAD_PRIORITY_MIN
    THREAD_PRIORITY_DEFAULT = _pyplanet.Thread_THREAD_PRIORITY_DEFAULT
    THREAD_SCHEDULE_FIFO = _pyplanet.Thread_THREAD_SCHEDULE_FIFO
    THREAD_SCHEDULE_ROUND_ROBIN = _pyplanet.Thread_THREAD_SCHEDULE_ROUND_ROBIN
    THREAD_SCHEDULE_TIME_SHARE = _pyplanet.Thread_THREAD_SCHEDULE_TIME_SHARE
    THREAD_SCHEDULE_DEFAULT = _pyplanet.Thread_THREAD_SCHEDULE_DEFAULT
    __swig_destroy__ = _pyplanet.delete_Thread
    __del__ = lambda self : None;
    __swig_getmethods__["CurrentThread"] = lambda x: _pyplanet.Thread_CurrentThread
    if _newclass:CurrentThread = staticmethod(_pyplanet.Thread_CurrentThread)
    __swig_getmethods__["Init"] = lambda x: _pyplanet.Thread_Init
    if _newclass:Init = staticmethod(_pyplanet.Thread_Init)
    __swig_getmethods__["YieldCurrentThread"] = lambda x: _pyplanet.Thread_YieldCurrentThread
    if _newclass:YieldCurrentThread = staticmethod(_pyplanet.Thread_YieldCurrentThread)
    __swig_getmethods__["GetMasterPriority"] = lambda x: _pyplanet.Thread_GetMasterPriority
    if _newclass:GetMasterPriority = staticmethod(_pyplanet.Thread_GetMasterPriority)
    def getThreadId(self): return _pyplanet.Thread_getThreadId(self)
    def getProcessId(self): return _pyplanet.Thread_getProcessId(self)
    def start(self): return _pyplanet.Thread_start(self)
    def startThread(self): return _pyplanet.Thread_startThread(self)
    def testCancel(self): return _pyplanet.Thread_testCancel(self)
    def cancel(self): return _pyplanet.Thread_cancel(self)
    def setSchedulePriority(self, *args): return _pyplanet.Thread_setSchedulePriority(self, *args)
    def getSchedulePriority(self): return _pyplanet.Thread_getSchedulePriority(self)
    def setSchedulePolicy(self, *args): return _pyplanet.Thread_setSchedulePolicy(self, *args)
    def getSchedulePolicy(self): return _pyplanet.Thread_getSchedulePolicy(self)
    def setStackSize(self, *args): return _pyplanet.Thread_setStackSize(self, *args)
    def getStackSize(self): return _pyplanet.Thread_getStackSize(self)
    def printSchedulingInfo(self): return _pyplanet.Thread_printSchedulingInfo(self)
    def detach(self): return _pyplanet.Thread_detach(self)
    def join(self): return _pyplanet.Thread_join(self)
    def setCancelModeDisable(self): return _pyplanet.Thread_setCancelModeDisable(self)
    def setCancelModeAsynchronous(self): return _pyplanet.Thread_setCancelModeAsynchronous(self)
    def setCancelModeDeferred(self): return _pyplanet.Thread_setCancelModeDeferred(self)
    def isRunning(self): return _pyplanet.Thread_isRunning(self)
    def run(self): return _pyplanet.Thread_run(self)
    def cancelCleanup(self): return _pyplanet.Thread_cancelCleanup(self)
    def getImplementation(self): return _pyplanet.Thread_getImplementation(self)
    def setProcessorAffinity(self, *args): return _pyplanet.Thread_setProcessorAffinity(self, *args)
    __swig_getmethods__["microSleep"] = lambda x: _pyplanet.Thread_microSleep
    if _newclass:microSleep = staticmethod(_pyplanet.Thread_microSleep)
Thread_swigregister = _pyplanet.Thread_swigregister
Thread_swigregister(Thread)

def Thread_SetConcurrency(*args):
  return _pyplanet.Thread_SetConcurrency(*args)
Thread_SetConcurrency = _pyplanet.Thread_SetConcurrency

def Thread_GetConcurrency():
  return _pyplanet.Thread_GetConcurrency()
Thread_GetConcurrency = _pyplanet.Thread_GetConcurrency

def Thread_CurrentThread():
  return _pyplanet.Thread_CurrentThread()
Thread_CurrentThread = _pyplanet.Thread_CurrentThread

def Thread_Init():
  return _pyplanet.Thread_Init()
Thread_Init = _pyplanet.Thread_Init

def Thread_YieldCurrentThread():
  return _pyplanet.Thread_YieldCurrentThread()
Thread_YieldCurrentThread = _pyplanet.Thread_YieldCurrentThread

def Thread_GetMasterPriority():
  return _pyplanet.Thread_GetMasterPriority()
Thread_GetMasterPriority = _pyplanet.Thread_GetMasterPriority

def Thread_microSleep(*args):
  return _pyplanet.Thread_microSleep(*args)
Thread_microSleep = _pyplanet.Thread_microSleep

class Mutex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mutex, name)
    __repr__ = _swig_repr
    MUTEX_NORMAL = _pyplanet.Mutex_MUTEX_NORMAL
    MUTEX_RECURSIVE = _pyplanet.Mutex_MUTEX_RECURSIVE
    def __init__(self, *args): 
        this = _pyplanet.new_Mutex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_Mutex
    __del__ = lambda self : None;
    def getMutexType(self): return _pyplanet.Mutex_getMutexType(self)
    def lock(self): return _pyplanet.Mutex_lock(self)
    def unlock(self): return _pyplanet.Mutex_unlock(self)
    def trylock(self): return _pyplanet.Mutex_trylock(self)
Mutex_swigregister = _pyplanet.Mutex_swigregister
Mutex_swigregister(Mutex)

class Barrier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Barrier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Barrier, name)
    __repr__ = _swig_repr
    def __init__(self, numThreads = 0): 
        this = _pyplanet.new_Barrier(numThreads)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_Barrier
    __del__ = lambda self : None;
    def reset(self): return _pyplanet.Barrier_reset(self)
    def block(self, numThreads = 0): return _pyplanet.Barrier_block(self, numThreads)
    def release(self): return _pyplanet.Barrier_release(self)
    def numThreadsCurrentlyBlocked(self): return _pyplanet.Barrier_numThreadsCurrentlyBlocked(self)
    def invalidate(self): return _pyplanet.Barrier_invalidate(self)
Barrier_swigregister = _pyplanet.Barrier_swigregister
Barrier_swigregister(Barrier)

class Block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Block, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_Block()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_Block
    __del__ = lambda self : None;
    def block(self, *args): return _pyplanet.Block_block(self, *args)
    def release(self): return _pyplanet.Block_release(self)
    def reset(self): return _pyplanet.Block_reset(self)
    def set(self, *args): return _pyplanet.Block_set(self, *args)
Block_swigregister = _pyplanet.Block_swigregister
Block_swigregister(Block)

class BlockCount(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockCount, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockCount, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_BlockCount(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_BlockCount
    __del__ = lambda self : None;
    def completed(self): return _pyplanet.BlockCount_completed(self)
    def block(self): return _pyplanet.BlockCount_block(self)
    def reset(self): return _pyplanet.BlockCount_reset(self)
    def release(self): return _pyplanet.BlockCount_release(self)
    def setBlockCount(self, *args): return _pyplanet.BlockCount_setBlockCount(self, *args)
    def getBlockCount(self): return _pyplanet.BlockCount_getBlockCount(self)
    def getCurrentCount(self): return _pyplanet.BlockCount_getCurrentCount(self)
BlockCount_swigregister = _pyplanet.BlockCount_swigregister
BlockCount_swigregister(BlockCount)

class Condition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Condition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Condition, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_Condition()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_Condition
    __del__ = lambda self : None;
    def wait(self, *args): return _pyplanet.Condition_wait(self, *args)
    def signal(self): return _pyplanet.Condition_signal(self)
    def broadcast(self): return _pyplanet.Condition_broadcast(self)
Condition_swigregister = _pyplanet.Condition_swigregister
Condition_swigregister(Condition)

class ReadWriteMutex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadWriteMutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadWriteMutex, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ReadWriteMutex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ReadWriteMutex
    __del__ = lambda self : None;
    def readLock(self): return _pyplanet.ReadWriteMutex_readLock(self)
    def readUnlock(self): return _pyplanet.ReadWriteMutex_readUnlock(self)
    def writeLock(self): return _pyplanet.ReadWriteMutex_writeLock(self)
    def writeUnlock(self): return _pyplanet.ReadWriteMutex_writeUnlock(self)
ReadWriteMutex_swigregister = _pyplanet.ReadWriteMutex_swigregister
ReadWriteMutex_swigregister(ReadWriteMutex)

class ScopedReadLock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedReadLock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedReadLock, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ScopedReadLock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ScopedReadLock
    __del__ = lambda self : None;
ScopedReadLock_swigregister = _pyplanet.ScopedReadLock_swigregister
ScopedReadLock_swigregister(ScopedReadLock)

class ScopedWriteLock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedWriteLock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedWriteLock, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ScopedWriteLock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ScopedWriteLock
    __del__ = lambda self : None;
ScopedWriteLock_swigregister = _pyplanet.ScopedWriteLock_swigregister
ScopedWriteLock_swigregister(ScopedWriteLock)

class ReentrantMutex(Mutex):
    __swig_setmethods__ = {}
    for _s in [Mutex]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReentrantMutex, name, value)
    __swig_getmethods__ = {}
    for _s in [Mutex]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReentrantMutex, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ReentrantMutex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ReentrantMutex
    __del__ = lambda self : None;
ReentrantMutex_swigregister = _pyplanet.ReentrantMutex_swigregister
ReentrantMutex_swigregister(ReentrantMutex)

OSG_REF_PTR = _pyplanet.OSG_REF_PTR
OSG_REFERENCED = _pyplanet.OSG_REFERENCED
class Referenced(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Referenced, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Referenced, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Referenced(*args)
        try: self.this.append(this)
        except: self.this = this
    def getThreadSafeRefUnref(self): return _pyplanet.Referenced_getThreadSafeRefUnref(self)
    def getRefMutex(self): return _pyplanet.Referenced_getRefMutex(self)
    __swig_getmethods__["getGlobalReferencedMutex"] = lambda x: _pyplanet.Referenced_getGlobalReferencedMutex
    if _newclass:getGlobalReferencedMutex = staticmethod(_pyplanet.Referenced_getGlobalReferencedMutex)
    def ref(self): return _pyplanet.Referenced_ref(self)
    def unref(self): return _pyplanet.Referenced_unref(self)
    def unref_nodelete(self): return _pyplanet.Referenced_unref_nodelete(self)
    def referenceCount(self): return _pyplanet.Referenced_referenceCount(self)
    def getObserverSet(self): return _pyplanet.Referenced_getObserverSet(self)
    def getOrCreateObserverSet(self): return _pyplanet.Referenced_getOrCreateObserverSet(self)
    def addObserver(self, *args): return _pyplanet.Referenced_addObserver(self, *args)
    def removeObserver(self, *args): return _pyplanet.Referenced_removeObserver(self, *args)
    __swig_getmethods__["setThreadSafeReferenceCounting"] = lambda x: _pyplanet.Referenced_setThreadSafeReferenceCounting
    if _newclass:setThreadSafeReferenceCounting = staticmethod(_pyplanet.Referenced_setThreadSafeReferenceCounting)
    __swig_getmethods__["getThreadSafeReferenceCounting"] = lambda x: _pyplanet.Referenced_getThreadSafeReferenceCounting
    if _newclass:getThreadSafeReferenceCounting = staticmethod(_pyplanet.Referenced_getThreadSafeReferenceCounting)
    __swig_getmethods__["setDeleteHandler"] = lambda x: _pyplanet.Referenced_setDeleteHandler
    if _newclass:setDeleteHandler = staticmethod(_pyplanet.Referenced_setDeleteHandler)
    __swig_getmethods__["getDeleteHandler"] = lambda x: _pyplanet.Referenced_getDeleteHandler
    if _newclass:getDeleteHandler = staticmethod(_pyplanet.Referenced_getDeleteHandler)
Referenced_swigregister = _pyplanet.Referenced_swigregister
Referenced_swigregister(Referenced)

def Referenced_getGlobalReferencedMutex():
  return _pyplanet.Referenced_getGlobalReferencedMutex()
Referenced_getGlobalReferencedMutex = _pyplanet.Referenced_getGlobalReferencedMutex

def Referenced_setThreadSafeReferenceCounting(*args):
  return _pyplanet.Referenced_setThreadSafeReferenceCounting(*args)
Referenced_setThreadSafeReferenceCounting = _pyplanet.Referenced_setThreadSafeReferenceCounting

def Referenced_getThreadSafeReferenceCounting():
  return _pyplanet.Referenced_getThreadSafeReferenceCounting()
Referenced_getThreadSafeReferenceCounting = _pyplanet.Referenced_getThreadSafeReferenceCounting

def Referenced_setDeleteHandler(*args):
  return _pyplanet.Referenced_setDeleteHandler(*args)
Referenced_setDeleteHandler = _pyplanet.Referenced_setDeleteHandler

def Referenced_getDeleteHandler():
  return _pyplanet.Referenced_getDeleteHandler()
Referenced_getDeleteHandler = _pyplanet.Referenced_getDeleteHandler


def intrusive_ptr_add_ref(*args):
  return _pyplanet.intrusive_ptr_add_ref(*args)
intrusive_ptr_add_ref = _pyplanet.intrusive_ptr_add_ref

def intrusive_ptr_release(*args):
  return _pyplanet.intrusive_ptr_release(*args)
intrusive_ptr_release = _pyplanet.intrusive_ptr_release
NULL = _pyplanet.NULL
OSG_OBJECT = _pyplanet.OSG_OBJECT
class Object(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self): return _pyplanet.Object_cloneType(self)
    def clone(self, *args): return _pyplanet.Object_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Object_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.Object_libraryName(self)
    def className(self): return _pyplanet.Object_className(self)
    def setName(self, *args): return _pyplanet.Object_setName(self, *args)
    def getName(self): return _pyplanet.Object_getName(self)
    DYNAMIC = _pyplanet.Object_DYNAMIC
    STATIC = _pyplanet.Object_STATIC
    UNSPECIFIED = _pyplanet.Object_UNSPECIFIED
    def setDataVariance(self, *args): return _pyplanet.Object_setDataVariance(self, *args)
    def getDataVariance(self): return _pyplanet.Object_getDataVariance(self)
    def computeDataVariance(self): return _pyplanet.Object_computeDataVariance(self)
    def setUserDataContainer(self, *args): return _pyplanet.Object_setUserDataContainer(self, *args)
    def getUserDataContainer(self, *args): return _pyplanet.Object_getUserDataContainer(self, *args)
    def getOrCreateUserDataContainer(self): return _pyplanet.Object_getOrCreateUserDataContainer(self)
    def setUserData(self, *args): return _pyplanet.Object_setUserData(self, *args)
    def getUserData(self, *args): return _pyplanet.Object_getUserData(self, *args)
    def resizeGLObjectBuffers(self, *args): return _pyplanet.Object_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, arg0 = None): return _pyplanet.Object_releaseGLObjects(self, arg0)
Object_swigregister = _pyplanet.Object_swigregister
Object_swigregister(Object)

OSG_NODE = _pyplanet.OSG_NODE
class Node(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Node(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.Node_cloneType(self)
    def clone(self, *args): return _pyplanet.Node_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Node_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.Node_libraryName(self)
    def className(self): return _pyplanet.Node_className(self)
    def asGroup(self, *args): return _pyplanet.Node_asGroup(self, *args)
    def asTransform(self, *args): return _pyplanet.Node_asTransform(self, *args)
    def asSwitch(self, *args): return _pyplanet.Node_asSwitch(self, *args)
    def asGeode(self, *args): return _pyplanet.Node_asGeode(self, *args)
    def asTerrain(self, *args): return _pyplanet.Node_asTerrain(self, *args)
    def accept(self, *args): return _pyplanet.Node_accept(self, *args)
    def ascend(self, *args): return _pyplanet.Node_ascend(self, *args)
    def traverse(self, *args): return _pyplanet.Node_traverse(self, *args)
    def getParents(self): return _pyplanet.Node_getParents(self)
    def getParent(self, *args): return _pyplanet.Node_getParent(self, *args)
    def getNumParents(self): return _pyplanet.Node_getNumParents(self)
    def getParentalNodePaths(self, haltTraversalAtNode = None): return _pyplanet.Node_getParentalNodePaths(self, haltTraversalAtNode)
    def getWorldMatrices(self, haltTraversalAtNode = None): return _pyplanet.Node_getWorldMatrices(self, haltTraversalAtNode)
    def setUpdateCallback(self, *args): return _pyplanet.Node_setUpdateCallback(self, *args)
    def getUpdateCallback(self, *args): return _pyplanet.Node_getUpdateCallback(self, *args)
    def addUpdateCallback(self, *args): return _pyplanet.Node_addUpdateCallback(self, *args)
    def removeUpdateCallback(self, *args): return _pyplanet.Node_removeUpdateCallback(self, *args)
    def getNumChildrenRequiringUpdateTraversal(self): return _pyplanet.Node_getNumChildrenRequiringUpdateTraversal(self)
    def setEventCallback(self, *args): return _pyplanet.Node_setEventCallback(self, *args)
    def getEventCallback(self, *args): return _pyplanet.Node_getEventCallback(self, *args)
    def addEventCallback(self, *args): return _pyplanet.Node_addEventCallback(self, *args)
    def removeEventCallback(self, *args): return _pyplanet.Node_removeEventCallback(self, *args)
    def getNumChildrenRequiringEventTraversal(self): return _pyplanet.Node_getNumChildrenRequiringEventTraversal(self)
    def setCullCallback(self, *args): return _pyplanet.Node_setCullCallback(self, *args)
    def getCullCallback(self, *args): return _pyplanet.Node_getCullCallback(self, *args)
    def addCullCallback(self, *args): return _pyplanet.Node_addCullCallback(self, *args)
    def removeCullCallback(self, *args): return _pyplanet.Node_removeCullCallback(self, *args)
    def setCullingActive(self, *args): return _pyplanet.Node_setCullingActive(self, *args)
    def getCullingActive(self): return _pyplanet.Node_getCullingActive(self)
    def getNumChildrenWithCullingDisabled(self): return _pyplanet.Node_getNumChildrenWithCullingDisabled(self)
    def isCullingActive(self): return _pyplanet.Node_isCullingActive(self)
    def getNumChildrenWithOccluderNodes(self): return _pyplanet.Node_getNumChildrenWithOccluderNodes(self)
    def containsOccluderNodes(self): return _pyplanet.Node_containsOccluderNodes(self)
    def setNodeMask(self, *args): return _pyplanet.Node_setNodeMask(self, *args)
    def getNodeMask(self): return _pyplanet.Node_getNodeMask(self)
    def setStateSet(self, *args): return _pyplanet.Node_setStateSet(self, *args)
    def getOrCreateStateSet(self): return _pyplanet.Node_getOrCreateStateSet(self)
    def getStateSet(self, *args): return _pyplanet.Node_getStateSet(self, *args)
    def setDescriptions(self, *args): return _pyplanet.Node_setDescriptions(self, *args)
    def getDescriptions(self, *args): return _pyplanet.Node_getDescriptions(self, *args)
    def getDescription(self, *args): return _pyplanet.Node_getDescription(self, *args)
    def getNumDescriptions(self): return _pyplanet.Node_getNumDescriptions(self)
    def addDescription(self, *args): return _pyplanet.Node_addDescription(self, *args)
    def setInitialBound(self, *args): return _pyplanet.Node_setInitialBound(self, *args)
    def getInitialBound(self): return _pyplanet.Node_getInitialBound(self)
    def dirtyBound(self): return _pyplanet.Node_dirtyBound(self)
    def getBound(self): return _pyplanet.Node_getBound(self)
    def computeBound(self): return _pyplanet.Node_computeBound(self)
    def resizeGLObjectBuffers(self, *args): return _pyplanet.Node_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, arg0 = None): return _pyplanet.Node_releaseGLObjects(self, arg0)
Node_swigregister = _pyplanet.Node_swigregister
Node_swigregister(Node)

OSG_GROUP = _pyplanet.OSG_GROUP
class Group(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Group(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.Group_cloneType(self)
    def clone(self, *args): return _pyplanet.Group_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Group_isSameKindAs(self, *args)
    def className(self): return _pyplanet.Group_className(self)
    def libraryName(self): return _pyplanet.Group_libraryName(self)
    def accept(self, *args): return _pyplanet.Group_accept(self, *args)
    def asGroup(self, *args): return _pyplanet.Group_asGroup(self, *args)
    def traverse(self, *args): return _pyplanet.Group_traverse(self, *args)
    def addChild(self, *args): return _pyplanet.Group_addChild(self, *args)
    def insertChild(self, *args): return _pyplanet.Group_insertChild(self, *args)
    def removeChild(self, *args): return _pyplanet.Group_removeChild(self, *args)
    def removeChildren(self, *args): return _pyplanet.Group_removeChildren(self, *args)
    def replaceChild(self, *args): return _pyplanet.Group_replaceChild(self, *args)
    def getNumChildren(self): return _pyplanet.Group_getNumChildren(self)
    def setChild(self, *args): return _pyplanet.Group_setChild(self, *args)
    def getChild(self, *args): return _pyplanet.Group_getChild(self, *args)
    def containsNode(self, *args): return _pyplanet.Group_containsNode(self, *args)
    def getChildIndex(self, *args): return _pyplanet.Group_getChildIndex(self, *args)
    def resizeGLObjectBuffers(self, *args): return _pyplanet.Group_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, arg0 = None): return _pyplanet.Group_releaseGLObjects(self, arg0)
    def computeBound(self): return _pyplanet.Group_computeBound(self)
Group_swigregister = _pyplanet.Group_swigregister
Group_swigregister(Group)

OSG_TRANSFORM = _pyplanet.OSG_TRANSFORM
GL_RESCALE_NORMAL = _pyplanet.GL_RESCALE_NORMAL
GL_NORMALIZE = _pyplanet.GL_NORMALIZE
class Transform(Group):
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transform, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Transform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Transform(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.Transform_cloneType(self)
    def clone(self, *args): return _pyplanet.Transform_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Transform_isSameKindAs(self, *args)
    def className(self): return _pyplanet.Transform_className(self)
    def libraryName(self): return _pyplanet.Transform_libraryName(self)
    def accept(self, *args): return _pyplanet.Transform_accept(self, *args)
    def asTransform(self, *args): return _pyplanet.Transform_asTransform(self, *args)
    def asMatrixTransform(self, *args): return _pyplanet.Transform_asMatrixTransform(self, *args)
    def asPositionAttitudeTransform(self, *args): return _pyplanet.Transform_asPositionAttitudeTransform(self, *args)
    RELATIVE_RF = _pyplanet.Transform_RELATIVE_RF
    ABSOLUTE_RF = _pyplanet.Transform_ABSOLUTE_RF
    ABSOLUTE_RF_INHERIT_VIEWPOINT = _pyplanet.Transform_ABSOLUTE_RF_INHERIT_VIEWPOINT
    def setReferenceFrame(self, *args): return _pyplanet.Transform_setReferenceFrame(self, *args)
    def getReferenceFrame(self): return _pyplanet.Transform_getReferenceFrame(self)
    def computeLocalToWorldMatrix(self, *args): return _pyplanet.Transform_computeLocalToWorldMatrix(self, *args)
    def computeWorldToLocalMatrix(self, *args): return _pyplanet.Transform_computeWorldToLocalMatrix(self, *args)
    def computeBound(self): return _pyplanet.Transform_computeBound(self)
Transform_swigregister = _pyplanet.Transform_swigregister
Transform_swigregister(Transform)

def computeLocalToWorld(*args):
  return _pyplanet.computeLocalToWorld(*args)
computeLocalToWorld = _pyplanet.computeLocalToWorld

def computeWorldToLocal(*args):
  return _pyplanet.computeWorldToLocal(*args)
computeWorldToLocal = _pyplanet.computeWorldToLocal

def computeLocalToEye(*args):
  return _pyplanet.computeLocalToEye(*args)
computeLocalToEye = _pyplanet.computeLocalToEye

def computeEyeToLocal(*args):
  return _pyplanet.computeEyeToLocal(*args)
computeEyeToLocal = _pyplanet.computeEyeToLocal

OSG_MATRIXTRANSFORM = _pyplanet.OSG_MATRIXTRANSFORM
class MatrixTransform(Transform):
    __swig_setmethods__ = {}
    for _s in [Transform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [Transform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_MatrixTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.MatrixTransform_cloneType(self)
    def clone(self, *args): return _pyplanet.MatrixTransform_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.MatrixTransform_isSameKindAs(self, *args)
    def className(self): return _pyplanet.MatrixTransform_className(self)
    def libraryName(self): return _pyplanet.MatrixTransform_libraryName(self)
    def accept(self, *args): return _pyplanet.MatrixTransform_accept(self, *args)
    def asMatrixTransform(self, *args): return _pyplanet.MatrixTransform_asMatrixTransform(self, *args)
    def setMatrix(self, *args): return _pyplanet.MatrixTransform_setMatrix(self, *args)
    def getMatrix(self): return _pyplanet.MatrixTransform_getMatrix(self)
    def preMult(self, *args): return _pyplanet.MatrixTransform_preMult(self, *args)
    def postMult(self, *args): return _pyplanet.MatrixTransform_postMult(self, *args)
    def getInverseMatrix(self): return _pyplanet.MatrixTransform_getInverseMatrix(self)
    def computeLocalToWorldMatrix(self, *args): return _pyplanet.MatrixTransform_computeLocalToWorldMatrix(self, *args)
    def computeWorldToLocalMatrix(self, *args): return _pyplanet.MatrixTransform_computeWorldToLocalMatrix(self, *args)
MatrixTransform_swigregister = _pyplanet.MatrixTransform_swigregister
MatrixTransform_swigregister(MatrixTransform)

class ossimPlanetTerrainTechnique(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetTerrainTechnique, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetTerrainTechnique, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self): return _pyplanet.ossimPlanetTerrainTechnique_cloneType(self)
    def clone(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.ossimPlanetTerrainTechnique_libraryName(self)
    def className(self): return _pyplanet.ossimPlanetTerrainTechnique_className(self)
    def setTerrainTile(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_setTerrainTile(self, *args)
    def terrainTile(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_terrainTile(self, *args)
    def setGrid(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_setGrid(self, *args)
    def setModel(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_setModel(self, *args)
    def grid(self): return _pyplanet.ossimPlanetTerrainTechnique_grid(self)
    def model(self): return _pyplanet.ossimPlanetTerrainTechnique_model(self)
    def isLeaf(self): return _pyplanet.ossimPlanetTerrainTechnique_isLeaf(self)
    def areAllChildrenLeaves(self): return _pyplanet.ossimPlanetTerrainTechnique_areAllChildrenLeaves(self)
    def init(self, optionalParent = None): return _pyplanet.ossimPlanetTerrainTechnique_init(self, optionalParent)
    def update(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_update(self, *args)
    def cull(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_cull(self, *args)
    def traverse(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_traverse(self, *args)
    def childAdded(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_childAdded(self, *args)
    def merge(self): return _pyplanet.ossimPlanetTerrainTechnique_merge(self)
    def texturePriority(self): return _pyplanet.ossimPlanetTerrainTechnique_texturePriority(self)
    def elevationPriority(self): return _pyplanet.ossimPlanetTerrainTechnique_elevationPriority(self)
    def splitPriority(self): return _pyplanet.ossimPlanetTerrainTechnique_splitPriority(self)
    def mergePriority(self): return _pyplanet.ossimPlanetTerrainTechnique_mergePriority(self)
    def solveTextureMatrixMappingToParent(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_solveTextureMatrixMappingToParent(self, *args)
    def computeBound(self): return _pyplanet.ossimPlanetTerrainTechnique_computeBound(self)
    def compileGlObjects(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_compileGlObjects(self, *args)
    def setImageLayerTexture(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_setImageLayerTexture(self, *args)
    def setElevationMeshFrom(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_setElevationMeshFrom(self, *args)
    def newImageLayerTexture(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_newImageLayerTexture(self, *args)
    def childIndex(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_childIndex(self, *args)
    def childTreePosition(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_childTreePosition(self, *args)
    def vacantChildIds(self, *args): return _pyplanet.ossimPlanetTerrainTechnique_vacantChildIds(self, *args)
    def releaseGLObjects(self, arg0 = None): return _pyplanet.ossimPlanetTerrainTechnique_releaseGLObjects(self, arg0)
ossimPlanetTerrainTechnique_swigregister = _pyplanet.ossimPlanetTerrainTechnique_swigregister
ossimPlanetTerrainTechnique_swigregister(ossimPlanetTerrainTechnique)

class ossimPlanetTerrainGeometryTechnique(ossimPlanetTerrainTechnique):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetTerrainTechnique]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetTerrainGeometryTechnique, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetTerrainTechnique]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetTerrainGeometryTechnique, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_cloneType(self)
    def clone(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_libraryName(self)
    def className(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_className(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetTerrainGeometryTechnique
    __del__ = lambda self : None;
    def setTerrainTile(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_setTerrainTile(self, *args)
    def update(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_update(self, *args)
    def cull(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_cull(self, *args)
    def traverse(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_traverse(self, *args)
    def buildMesh(self, optionalParent = None): return _pyplanet.ossimPlanetTerrainGeometryTechnique_buildMesh(self, optionalParent)
    def applyColorLayers(self, optionalParent = None): return _pyplanet.ossimPlanetTerrainGeometryTechnique_applyColorLayers(self, optionalParent)
    def applyTransparency(self, optionalParent = None): return _pyplanet.ossimPlanetTerrainGeometryTechnique_applyTransparency(self, optionalParent)
    def smoothGeometry(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_smoothGeometry(self)
    def init(self, optionalParent = None): return _pyplanet.ossimPlanetTerrainGeometryTechnique_init(self, optionalParent)
    def childAdded(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_childAdded(self, *args)
    def merge(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_merge(self)
    def removeCulledChildren(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_removeCulledChildren(self)
    def hasCulledChildren(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_hasCulledChildren(self)
    def isChildCulled(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_isChildCulled(self, *args)
    def elevationPriority(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_elevationPriority(self)
    def texturePriority(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_texturePriority(self)
    def mergePriority(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_mergePriority(self)
    def splitPriority(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_splitPriority(self)
    def computeBound(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_computeBound(self)
    def updateElevationMesh(self): return _pyplanet.ossimPlanetTerrainGeometryTechnique_updateElevationMesh(self)
    def newImageLayerTexture(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_newImageLayerTexture(self, *args)
    def setChildCullParameters(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_setChildCullParameters(self, *args)
    def compileGlObjects(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_compileGlObjects(self, *args)
    def setImageLayerTexture(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_setImageLayerTexture(self, *args)
    def setElevationMeshFrom(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_setElevationMeshFrom(self, *args)
    def vacantChildIds(self, *args): return _pyplanet.ossimPlanetTerrainGeometryTechnique_vacantChildIds(self, *args)
    def releaseGLObjects(self, state = None): return _pyplanet.ossimPlanetTerrainGeometryTechnique_releaseGLObjects(self, state)
ossimPlanetTerrainGeometryTechnique_swigregister = _pyplanet.ossimPlanetTerrainGeometryTechnique_swigregister
ossimPlanetTerrainGeometryTechnique_swigregister(ossimPlanetTerrainGeometryTechnique)

ossimPlanetTimeUnit_SECONDS = _pyplanet.ossimPlanetTimeUnit_SECONDS
ossimPlanetTimeUnit_MINUTES = _pyplanet.ossimPlanetTimeUnit_MINUTES
ossimPlanetTimeUnit_HOURS = _pyplanet.ossimPlanetTimeUnit_HOURS
ossimPlanetLandRefreshType_NONE = _pyplanet.ossimPlanetLandRefreshType_NONE
ossimPlanetLandRefreshType_TEXTURE = _pyplanet.ossimPlanetLandRefreshType_TEXTURE
ossimPlanetLandRefreshType_GEOM = _pyplanet.ossimPlanetLandRefreshType_GEOM
ossimPlanetLandRefreshType_PRUNE = _pyplanet.ossimPlanetLandRefreshType_PRUNE
ossimPlanetLandType_NONE = _pyplanet.ossimPlanetLandType_NONE
ossimPlanetLandType_FLAT = _pyplanet.ossimPlanetLandType_FLAT
ossimPlanetLandType_NORMALIZED_ELLIPSOID = _pyplanet.ossimPlanetLandType_NORMALIZED_ELLIPSOID
ossimPlanetLandType_ELLIPSOID = _pyplanet.ossimPlanetLandType_ELLIPSOID
ossimPlanetLandType_ORTHOFLAT = _pyplanet.ossimPlanetLandType_ORTHOFLAT
ossimPlanetLandPriorityType_NONE = _pyplanet.ossimPlanetLandPriorityType_NONE
ossimPlanetLandPriorityType_LINE_OF_SITE_INTERSECTION = _pyplanet.ossimPlanetLandPriorityType_LINE_OF_SITE_INTERSECTION
ossimPlanetLandPriorityType_EYE_POSITION = _pyplanet.ossimPlanetLandPriorityType_EYE_POSITION
ossimPlanetAltitudeMode_NONE = _pyplanet.ossimPlanetAltitudeMode_NONE
ossimPlanetAltitudeMode_CLAMP_TO_GROUND = _pyplanet.ossimPlanetAltitudeMode_CLAMP_TO_GROUND
ossimPlanetAltitudeMode_RELATIVE_TO_GROUND = _pyplanet.ossimPlanetAltitudeMode_RELATIVE_TO_GROUND
ossimPlanetAltitudeMode_ABSOLUTE = _pyplanet.ossimPlanetAltitudeMode_ABSOLUTE
ossimPlanetKmlUnits_NONE = _pyplanet.ossimPlanetKmlUnits_NONE
ossimPlanetKmlUnits_FRACTION = _pyplanet.ossimPlanetKmlUnits_FRACTION
ossimPlanetKmlUnits_PIXELS = _pyplanet.ossimPlanetKmlUnits_PIXELS
ossimPlanetKmlUnits_INSET_PIXELS = _pyplanet.ossimPlanetKmlUnits_INSET_PIXELS
ossimPlanetKmlStyleState_NONE = _pyplanet.ossimPlanetKmlStyleState_NONE
ossimPlanetKmlStyleState_NORMAL = _pyplanet.ossimPlanetKmlStyleState_NORMAL
ossimPlanetKmlStyleState_HIGHLIGHT = _pyplanet.ossimPlanetKmlStyleState_HIGHLIGHT
ossimPlanetKmlRefreshMode_NONE = _pyplanet.ossimPlanetKmlRefreshMode_NONE
ossimPlanetKmlRefreshMode_ON_CHANGE = _pyplanet.ossimPlanetKmlRefreshMode_ON_CHANGE
ossimPlanetKmlRefreshMode_ON_INTERVAL = _pyplanet.ossimPlanetKmlRefreshMode_ON_INTERVAL
ossimPlanetKmlRefreshMode_ON_EXPIRE = _pyplanet.ossimPlanetKmlRefreshMode_ON_EXPIRE
ossimPlanetKmlViewRefreshMode_NONE = _pyplanet.ossimPlanetKmlViewRefreshMode_NONE
ossimPlanetKmlViewRefreshMode_NEVER = _pyplanet.ossimPlanetKmlViewRefreshMode_NEVER
ossimPlanetKmlViewRefreshMode_ON_REQUEST = _pyplanet.ossimPlanetKmlViewRefreshMode_ON_REQUEST
ossimPlanetKmlViewRefreshMode_ON_STOP = _pyplanet.ossimPlanetKmlViewRefreshMode_ON_STOP
ossimPlanetKmlViewRefreshMode_ON_REGION = _pyplanet.ossimPlanetKmlViewRefreshMode_ON_REGION
ossimPlanetKmlColorMode_NONE = _pyplanet.ossimPlanetKmlColorMode_NONE
ossimPlanetKmlColorMode_NORMAL = _pyplanet.ossimPlanetKmlColorMode_NORMAL
ossimPlanetKmlColorMode_RANDOM = _pyplanet.ossimPlanetKmlColorMode_RANDOM
ossimPlanetTextureLayer_VALID = _pyplanet.ossimPlanetTextureLayer_VALID
ossimPlanetTextureLayer_NO_SOURCE_DATA = _pyplanet.ossimPlanetTextureLayer_NO_SOURCE_DATA
ossimPlanetTextureLayer_NO_GEOM = _pyplanet.ossimPlanetTextureLayer_NO_GEOM
ossimPlanetTextureLayer_NO_OVERVIEWS = _pyplanet.ossimPlanetTextureLayer_NO_OVERVIEWS
ossimPlanetTextureLayer_NO_HISTOGRAMS = _pyplanet.ossimPlanetTextureLayer_NO_HISTOGRAMS
ossimPlanetTextureLayer_NOT_OPENED = _pyplanet.ossimPlanetTextureLayer_NOT_OPENED
ossimPlanetTextureLayer_ALL = _pyplanet.ossimPlanetTextureLayer_ALL
ossimPlanetIoDirection_NONE = _pyplanet.ossimPlanetIoDirection_NONE
ossimPlanetIoDirection_IN = _pyplanet.ossimPlanetIoDirection_IN
ossimPlanetIoDirection_OUT = _pyplanet.ossimPlanetIoDirection_OUT
ossimPlanetIoDirection_INOUT = _pyplanet.ossimPlanetIoDirection_INOUT

cvar = _pyplanet.cvar
OSSIMPLANET_WGS_84_RADIUS_EQUATOR = cvar.OSSIMPLANET_WGS_84_RADIUS_EQUATOR
OSSIMPLANET_WGS_84_RADIUS_POLAR = cvar.OSSIMPLANET_WGS_84_RADIUS_POLAR

