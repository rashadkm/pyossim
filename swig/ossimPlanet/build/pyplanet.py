# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyplanet', [dirname(__file__)])
        except ImportError:
            import _pyplanet
            return _pyplanet
        if fp is not None:
            try:
                _mod = imp.load_module('_pyplanet', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyplanet = swig_import_helper()
    del swig_import_helper
else:
    import _pyplanet
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


OPENTHREADS_VERSION = _pyplanet.OPENTHREADS_VERSION
OPENTHREADS_MAJOR_VERSION = _pyplanet.OPENTHREADS_MAJOR_VERSION
OPENTHREADS_MINOR_VERSION = _pyplanet.OPENTHREADS_MINOR_VERSION
OPENTHREADS_PATCH_VERSION = _pyplanet.OPENTHREADS_PATCH_VERSION
OPENTHREADS_SOVERSION = _pyplanet.OPENTHREADS_SOVERSION

def OpenThreadsGetVersion():
  return _pyplanet.OpenThreadsGetVersion()
OpenThreadsGetVersion = _pyplanet.OpenThreadsGetVersion

def OpenThreadsGetSOVersion():
  return _pyplanet.OpenThreadsGetSOVersion()
OpenThreadsGetSOVersion = _pyplanet.OpenThreadsGetSOVersion

def OpenThreadsGetLibraryName():
  return _pyplanet.OpenThreadsGetLibraryName()
OpenThreadsGetLibraryName = _pyplanet.OpenThreadsGetLibraryName

def GetNumberOfProcessors():
  return _pyplanet.GetNumberOfProcessors()
GetNumberOfProcessors = _pyplanet.GetNumberOfProcessors

def SetProcessorAffinityOfCurrentThread(*args):
  return _pyplanet.SetProcessorAffinityOfCurrentThread(*args)
SetProcessorAffinityOfCurrentThread = _pyplanet.SetProcessorAffinityOfCurrentThread
class Thread(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Thread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Thread, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["SetConcurrency"] = lambda x: _pyplanet.Thread_SetConcurrency
    if _newclass:SetConcurrency = staticmethod(_pyplanet.Thread_SetConcurrency)
    __swig_getmethods__["GetConcurrency"] = lambda x: _pyplanet.Thread_GetConcurrency
    if _newclass:GetConcurrency = staticmethod(_pyplanet.Thread_GetConcurrency)
    THREAD_PRIORITY_MAX = _pyplanet.Thread_THREAD_PRIORITY_MAX
    THREAD_PRIORITY_HIGH = _pyplanet.Thread_THREAD_PRIORITY_HIGH
    THREAD_PRIORITY_NOMINAL = _pyplanet.Thread_THREAD_PRIORITY_NOMINAL
    THREAD_PRIORITY_LOW = _pyplanet.Thread_THREAD_PRIORITY_LOW
    THREAD_PRIORITY_MIN = _pyplanet.Thread_THREAD_PRIORITY_MIN
    THREAD_PRIORITY_DEFAULT = _pyplanet.Thread_THREAD_PRIORITY_DEFAULT
    THREAD_SCHEDULE_FIFO = _pyplanet.Thread_THREAD_SCHEDULE_FIFO
    THREAD_SCHEDULE_ROUND_ROBIN = _pyplanet.Thread_THREAD_SCHEDULE_ROUND_ROBIN
    THREAD_SCHEDULE_TIME_SHARE = _pyplanet.Thread_THREAD_SCHEDULE_TIME_SHARE
    THREAD_SCHEDULE_DEFAULT = _pyplanet.Thread_THREAD_SCHEDULE_DEFAULT
    __swig_destroy__ = _pyplanet.delete_Thread
    __del__ = lambda self : None;
    __swig_getmethods__["CurrentThread"] = lambda x: _pyplanet.Thread_CurrentThread
    if _newclass:CurrentThread = staticmethod(_pyplanet.Thread_CurrentThread)
    __swig_getmethods__["Init"] = lambda x: _pyplanet.Thread_Init
    if _newclass:Init = staticmethod(_pyplanet.Thread_Init)
    __swig_getmethods__["YieldCurrentThread"] = lambda x: _pyplanet.Thread_YieldCurrentThread
    if _newclass:YieldCurrentThread = staticmethod(_pyplanet.Thread_YieldCurrentThread)
    __swig_getmethods__["GetMasterPriority"] = lambda x: _pyplanet.Thread_GetMasterPriority
    if _newclass:GetMasterPriority = staticmethod(_pyplanet.Thread_GetMasterPriority)
    def getThreadId(self): return _pyplanet.Thread_getThreadId(self)
    def getProcessId(self): return _pyplanet.Thread_getProcessId(self)
    def start(self): return _pyplanet.Thread_start(self)
    def startThread(self): return _pyplanet.Thread_startThread(self)
    def testCancel(self): return _pyplanet.Thread_testCancel(self)
    def cancel(self): return _pyplanet.Thread_cancel(self)
    def setSchedulePriority(self, *args): return _pyplanet.Thread_setSchedulePriority(self, *args)
    def getSchedulePriority(self): return _pyplanet.Thread_getSchedulePriority(self)
    def setSchedulePolicy(self, *args): return _pyplanet.Thread_setSchedulePolicy(self, *args)
    def getSchedulePolicy(self): return _pyplanet.Thread_getSchedulePolicy(self)
    def setStackSize(self, *args): return _pyplanet.Thread_setStackSize(self, *args)
    def getStackSize(self): return _pyplanet.Thread_getStackSize(self)
    def printSchedulingInfo(self): return _pyplanet.Thread_printSchedulingInfo(self)
    def detach(self): return _pyplanet.Thread_detach(self)
    def join(self): return _pyplanet.Thread_join(self)
    def setCancelModeDisable(self): return _pyplanet.Thread_setCancelModeDisable(self)
    def setCancelModeAsynchronous(self): return _pyplanet.Thread_setCancelModeAsynchronous(self)
    def setCancelModeDeferred(self): return _pyplanet.Thread_setCancelModeDeferred(self)
    def isRunning(self): return _pyplanet.Thread_isRunning(self)
    def run(self): return _pyplanet.Thread_run(self)
    def cancelCleanup(self): return _pyplanet.Thread_cancelCleanup(self)
    def getImplementation(self): return _pyplanet.Thread_getImplementation(self)
    def setProcessorAffinity(self, *args): return _pyplanet.Thread_setProcessorAffinity(self, *args)
    __swig_getmethods__["microSleep"] = lambda x: _pyplanet.Thread_microSleep
    if _newclass:microSleep = staticmethod(_pyplanet.Thread_microSleep)
Thread_swigregister = _pyplanet.Thread_swigregister
Thread_swigregister(Thread)

def Thread_SetConcurrency(*args):
  return _pyplanet.Thread_SetConcurrency(*args)
Thread_SetConcurrency = _pyplanet.Thread_SetConcurrency

def Thread_GetConcurrency():
  return _pyplanet.Thread_GetConcurrency()
Thread_GetConcurrency = _pyplanet.Thread_GetConcurrency

def Thread_CurrentThread():
  return _pyplanet.Thread_CurrentThread()
Thread_CurrentThread = _pyplanet.Thread_CurrentThread

def Thread_Init():
  return _pyplanet.Thread_Init()
Thread_Init = _pyplanet.Thread_Init

def Thread_YieldCurrentThread():
  return _pyplanet.Thread_YieldCurrentThread()
Thread_YieldCurrentThread = _pyplanet.Thread_YieldCurrentThread

def Thread_GetMasterPriority():
  return _pyplanet.Thread_GetMasterPriority()
Thread_GetMasterPriority = _pyplanet.Thread_GetMasterPriority

def Thread_microSleep(*args):
  return _pyplanet.Thread_microSleep(*args)
Thread_microSleep = _pyplanet.Thread_microSleep

class Mutex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mutex, name)
    __repr__ = _swig_repr
    MUTEX_NORMAL = _pyplanet.Mutex_MUTEX_NORMAL
    MUTEX_RECURSIVE = _pyplanet.Mutex_MUTEX_RECURSIVE
    def __init__(self, *args): 
        this = _pyplanet.new_Mutex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_Mutex
    __del__ = lambda self : None;
    def getMutexType(self): return _pyplanet.Mutex_getMutexType(self)
    def lock(self): return _pyplanet.Mutex_lock(self)
    def unlock(self): return _pyplanet.Mutex_unlock(self)
    def trylock(self): return _pyplanet.Mutex_trylock(self)
Mutex_swigregister = _pyplanet.Mutex_swigregister
Mutex_swigregister(Mutex)

class Barrier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Barrier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Barrier, name)
    __repr__ = _swig_repr
    def __init__(self, numThreads = 0): 
        this = _pyplanet.new_Barrier(numThreads)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_Barrier
    __del__ = lambda self : None;
    def reset(self): return _pyplanet.Barrier_reset(self)
    def block(self, numThreads = 0): return _pyplanet.Barrier_block(self, numThreads)
    def release(self): return _pyplanet.Barrier_release(self)
    def numThreadsCurrentlyBlocked(self): return _pyplanet.Barrier_numThreadsCurrentlyBlocked(self)
    def invalidate(self): return _pyplanet.Barrier_invalidate(self)
Barrier_swigregister = _pyplanet.Barrier_swigregister
Barrier_swigregister(Barrier)

class Block(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Block, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_Block()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_Block
    __del__ = lambda self : None;
    def block(self, *args): return _pyplanet.Block_block(self, *args)
    def release(self): return _pyplanet.Block_release(self)
    def reset(self): return _pyplanet.Block_reset(self)
    def set(self, *args): return _pyplanet.Block_set(self, *args)
Block_swigregister = _pyplanet.Block_swigregister
Block_swigregister(Block)

class BlockCount(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockCount, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockCount, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_BlockCount(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_BlockCount
    __del__ = lambda self : None;
    def completed(self): return _pyplanet.BlockCount_completed(self)
    def block(self): return _pyplanet.BlockCount_block(self)
    def reset(self): return _pyplanet.BlockCount_reset(self)
    def release(self): return _pyplanet.BlockCount_release(self)
    def setBlockCount(self, *args): return _pyplanet.BlockCount_setBlockCount(self, *args)
    def getBlockCount(self): return _pyplanet.BlockCount_getBlockCount(self)
    def getCurrentCount(self): return _pyplanet.BlockCount_getCurrentCount(self)
BlockCount_swigregister = _pyplanet.BlockCount_swigregister
BlockCount_swigregister(BlockCount)

class Condition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Condition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Condition, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_Condition()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_Condition
    __del__ = lambda self : None;
    def wait(self, *args): return _pyplanet.Condition_wait(self, *args)
    def signal(self): return _pyplanet.Condition_signal(self)
    def broadcast(self): return _pyplanet.Condition_broadcast(self)
Condition_swigregister = _pyplanet.Condition_swigregister
Condition_swigregister(Condition)

class ReadWriteMutex(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadWriteMutex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReadWriteMutex, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ReadWriteMutex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ReadWriteMutex
    __del__ = lambda self : None;
    def readLock(self): return _pyplanet.ReadWriteMutex_readLock(self)
    def readUnlock(self): return _pyplanet.ReadWriteMutex_readUnlock(self)
    def writeLock(self): return _pyplanet.ReadWriteMutex_writeLock(self)
    def writeUnlock(self): return _pyplanet.ReadWriteMutex_writeUnlock(self)
ReadWriteMutex_swigregister = _pyplanet.ReadWriteMutex_swigregister
ReadWriteMutex_swigregister(ReadWriteMutex)

class ScopedReadLock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedReadLock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedReadLock, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ScopedReadLock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ScopedReadLock
    __del__ = lambda self : None;
ScopedReadLock_swigregister = _pyplanet.ScopedReadLock_swigregister
ScopedReadLock_swigregister(ScopedReadLock)

class ScopedWriteLock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedWriteLock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedWriteLock, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ScopedWriteLock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ScopedWriteLock
    __del__ = lambda self : None;
ScopedWriteLock_swigregister = _pyplanet.ScopedWriteLock_swigregister
ScopedWriteLock_swigregister(ScopedWriteLock)

class ReentrantMutex(Mutex):
    __swig_setmethods__ = {}
    for _s in [Mutex]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReentrantMutex, name, value)
    __swig_getmethods__ = {}
    for _s in [Mutex]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReentrantMutex, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ReentrantMutex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ReentrantMutex
    __del__ = lambda self : None;
ReentrantMutex_swigregister = _pyplanet.ReentrantMutex_swigregister
ReentrantMutex_swigregister(ReentrantMutex)

OSG_REF_PTR = _pyplanet.OSG_REF_PTR
OSG_REFERENCED = _pyplanet.OSG_REFERENCED
class Referenced(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Referenced, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Referenced, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Referenced(*args)
        try: self.this.append(this)
        except: self.this = this
    def getThreadSafeRefUnref(self): return _pyplanet.Referenced_getThreadSafeRefUnref(self)
    def getRefMutex(self): return _pyplanet.Referenced_getRefMutex(self)
    __swig_getmethods__["getGlobalReferencedMutex"] = lambda x: _pyplanet.Referenced_getGlobalReferencedMutex
    if _newclass:getGlobalReferencedMutex = staticmethod(_pyplanet.Referenced_getGlobalReferencedMutex)
    def ref(self): return _pyplanet.Referenced_ref(self)
    def unref(self): return _pyplanet.Referenced_unref(self)
    def unref_nodelete(self): return _pyplanet.Referenced_unref_nodelete(self)
    def referenceCount(self): return _pyplanet.Referenced_referenceCount(self)
    def getObserverSet(self): return _pyplanet.Referenced_getObserverSet(self)
    def getOrCreateObserverSet(self): return _pyplanet.Referenced_getOrCreateObserverSet(self)
    def addObserver(self, *args): return _pyplanet.Referenced_addObserver(self, *args)
    def removeObserver(self, *args): return _pyplanet.Referenced_removeObserver(self, *args)
    __swig_getmethods__["setThreadSafeReferenceCounting"] = lambda x: _pyplanet.Referenced_setThreadSafeReferenceCounting
    if _newclass:setThreadSafeReferenceCounting = staticmethod(_pyplanet.Referenced_setThreadSafeReferenceCounting)
    __swig_getmethods__["getThreadSafeReferenceCounting"] = lambda x: _pyplanet.Referenced_getThreadSafeReferenceCounting
    if _newclass:getThreadSafeReferenceCounting = staticmethod(_pyplanet.Referenced_getThreadSafeReferenceCounting)
    __swig_getmethods__["setDeleteHandler"] = lambda x: _pyplanet.Referenced_setDeleteHandler
    if _newclass:setDeleteHandler = staticmethod(_pyplanet.Referenced_setDeleteHandler)
    __swig_getmethods__["getDeleteHandler"] = lambda x: _pyplanet.Referenced_getDeleteHandler
    if _newclass:getDeleteHandler = staticmethod(_pyplanet.Referenced_getDeleteHandler)
Referenced_swigregister = _pyplanet.Referenced_swigregister
Referenced_swigregister(Referenced)

def Referenced_getGlobalReferencedMutex():
  return _pyplanet.Referenced_getGlobalReferencedMutex()
Referenced_getGlobalReferencedMutex = _pyplanet.Referenced_getGlobalReferencedMutex

def Referenced_setThreadSafeReferenceCounting(*args):
  return _pyplanet.Referenced_setThreadSafeReferenceCounting(*args)
Referenced_setThreadSafeReferenceCounting = _pyplanet.Referenced_setThreadSafeReferenceCounting

def Referenced_getThreadSafeReferenceCounting():
  return _pyplanet.Referenced_getThreadSafeReferenceCounting()
Referenced_getThreadSafeReferenceCounting = _pyplanet.Referenced_getThreadSafeReferenceCounting

def Referenced_setDeleteHandler(*args):
  return _pyplanet.Referenced_setDeleteHandler(*args)
Referenced_setDeleteHandler = _pyplanet.Referenced_setDeleteHandler

def Referenced_getDeleteHandler():
  return _pyplanet.Referenced_getDeleteHandler()
Referenced_getDeleteHandler = _pyplanet.Referenced_getDeleteHandler


def intrusive_ptr_add_ref(*args):
  return _pyplanet.intrusive_ptr_add_ref(*args)
intrusive_ptr_add_ref = _pyplanet.intrusive_ptr_add_ref

def intrusive_ptr_release(*args):
  return _pyplanet.intrusive_ptr_release(*args)
intrusive_ptr_release = _pyplanet.intrusive_ptr_release
NULL = _pyplanet.NULL
OSG_OBJECT = _pyplanet.OSG_OBJECT
class Object(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self): return _pyplanet.Object_cloneType(self)
    def clone(self, *args): return _pyplanet.Object_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Object_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.Object_libraryName(self)
    def className(self): return _pyplanet.Object_className(self)
    def setName(self, *args): return _pyplanet.Object_setName(self, *args)
    def getName(self): return _pyplanet.Object_getName(self)
    DYNAMIC = _pyplanet.Object_DYNAMIC
    STATIC = _pyplanet.Object_STATIC
    UNSPECIFIED = _pyplanet.Object_UNSPECIFIED
    def setDataVariance(self, *args): return _pyplanet.Object_setDataVariance(self, *args)
    def getDataVariance(self): return _pyplanet.Object_getDataVariance(self)
    def computeDataVariance(self): return _pyplanet.Object_computeDataVariance(self)
    def setUserDataContainer(self, *args): return _pyplanet.Object_setUserDataContainer(self, *args)
    def getUserDataContainer(self, *args): return _pyplanet.Object_getUserDataContainer(self, *args)
    def getOrCreateUserDataContainer(self): return _pyplanet.Object_getOrCreateUserDataContainer(self)
    def setUserData(self, *args): return _pyplanet.Object_setUserData(self, *args)
    def getUserData(self, *args): return _pyplanet.Object_getUserData(self, *args)
    def resizeGLObjectBuffers(self, *args): return _pyplanet.Object_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, arg0 = None): return _pyplanet.Object_releaseGLObjects(self, arg0)
Object_swigregister = _pyplanet.Object_swigregister
Object_swigregister(Object)

OSG_NODE = _pyplanet.OSG_NODE
class Node(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Node(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.Node_cloneType(self)
    def clone(self, *args): return _pyplanet.Node_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Node_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.Node_libraryName(self)
    def className(self): return _pyplanet.Node_className(self)
    def asGroup(self, *args): return _pyplanet.Node_asGroup(self, *args)
    def asTransform(self, *args): return _pyplanet.Node_asTransform(self, *args)
    def asSwitch(self, *args): return _pyplanet.Node_asSwitch(self, *args)
    def asGeode(self, *args): return _pyplanet.Node_asGeode(self, *args)
    def asTerrain(self, *args): return _pyplanet.Node_asTerrain(self, *args)
    def accept(self, *args): return _pyplanet.Node_accept(self, *args)
    def ascend(self, *args): return _pyplanet.Node_ascend(self, *args)
    def traverse(self, *args): return _pyplanet.Node_traverse(self, *args)
    def getParents(self): return _pyplanet.Node_getParents(self)
    def getParent(self, *args): return _pyplanet.Node_getParent(self, *args)
    def getNumParents(self): return _pyplanet.Node_getNumParents(self)
    def getParentalNodePaths(self, haltTraversalAtNode = None): return _pyplanet.Node_getParentalNodePaths(self, haltTraversalAtNode)
    def getWorldMatrices(self, haltTraversalAtNode = None): return _pyplanet.Node_getWorldMatrices(self, haltTraversalAtNode)
    def setUpdateCallback(self, *args): return _pyplanet.Node_setUpdateCallback(self, *args)
    def getUpdateCallback(self, *args): return _pyplanet.Node_getUpdateCallback(self, *args)
    def addUpdateCallback(self, *args): return _pyplanet.Node_addUpdateCallback(self, *args)
    def removeUpdateCallback(self, *args): return _pyplanet.Node_removeUpdateCallback(self, *args)
    def getNumChildrenRequiringUpdateTraversal(self): return _pyplanet.Node_getNumChildrenRequiringUpdateTraversal(self)
    def setEventCallback(self, *args): return _pyplanet.Node_setEventCallback(self, *args)
    def getEventCallback(self, *args): return _pyplanet.Node_getEventCallback(self, *args)
    def addEventCallback(self, *args): return _pyplanet.Node_addEventCallback(self, *args)
    def removeEventCallback(self, *args): return _pyplanet.Node_removeEventCallback(self, *args)
    def getNumChildrenRequiringEventTraversal(self): return _pyplanet.Node_getNumChildrenRequiringEventTraversal(self)
    def setCullCallback(self, *args): return _pyplanet.Node_setCullCallback(self, *args)
    def getCullCallback(self, *args): return _pyplanet.Node_getCullCallback(self, *args)
    def addCullCallback(self, *args): return _pyplanet.Node_addCullCallback(self, *args)
    def removeCullCallback(self, *args): return _pyplanet.Node_removeCullCallback(self, *args)
    def setCullingActive(self, *args): return _pyplanet.Node_setCullingActive(self, *args)
    def getCullingActive(self): return _pyplanet.Node_getCullingActive(self)
    def getNumChildrenWithCullingDisabled(self): return _pyplanet.Node_getNumChildrenWithCullingDisabled(self)
    def isCullingActive(self): return _pyplanet.Node_isCullingActive(self)
    def getNumChildrenWithOccluderNodes(self): return _pyplanet.Node_getNumChildrenWithOccluderNodes(self)
    def containsOccluderNodes(self): return _pyplanet.Node_containsOccluderNodes(self)
    def setNodeMask(self, *args): return _pyplanet.Node_setNodeMask(self, *args)
    def getNodeMask(self): return _pyplanet.Node_getNodeMask(self)
    def setStateSet(self, *args): return _pyplanet.Node_setStateSet(self, *args)
    def getOrCreateStateSet(self): return _pyplanet.Node_getOrCreateStateSet(self)
    def getStateSet(self, *args): return _pyplanet.Node_getStateSet(self, *args)
    def setDescriptions(self, *args): return _pyplanet.Node_setDescriptions(self, *args)
    def getDescriptions(self, *args): return _pyplanet.Node_getDescriptions(self, *args)
    def getDescription(self, *args): return _pyplanet.Node_getDescription(self, *args)
    def getNumDescriptions(self): return _pyplanet.Node_getNumDescriptions(self)
    def addDescription(self, *args): return _pyplanet.Node_addDescription(self, *args)
    def setInitialBound(self, *args): return _pyplanet.Node_setInitialBound(self, *args)
    def getInitialBound(self): return _pyplanet.Node_getInitialBound(self)
    def dirtyBound(self): return _pyplanet.Node_dirtyBound(self)
    def getBound(self): return _pyplanet.Node_getBound(self)
    def computeBound(self): return _pyplanet.Node_computeBound(self)
    def resizeGLObjectBuffers(self, *args): return _pyplanet.Node_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, arg0 = None): return _pyplanet.Node_releaseGLObjects(self, arg0)
Node_swigregister = _pyplanet.Node_swigregister
Node_swigregister(Node)

OSGTEXT_EXPORT_ = _pyplanet.OSGTEXT_EXPORT_
KERNING_DEFAULT = _pyplanet.KERNING_DEFAULT
KERNING_UNFITTED = _pyplanet.KERNING_UNFITTED
KERNING_NONE = _pyplanet.KERNING_NONE
OSGTEXT_STRING = _pyplanet.OSGTEXT_STRING
class VectorUInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_VectorUInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_VectorUInt
    __del__ = lambda self : None;
VectorUInt_swigregister = _pyplanet.VectorUInt_swigregister
VectorUInt_swigregister(VectorUInt)

class String(VectorUInt):
    __swig_setmethods__ = {}
    for _s in [VectorUInt]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, String, name, value)
    __swig_getmethods__ = {}
    for _s in [VectorUInt]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, String, name)
    __repr__ = _swig_repr
    ENCODING_UNDEFINED = _pyplanet.String_ENCODING_UNDEFINED
    ENCODING_ASCII = _pyplanet.String_ENCODING_ASCII
    ENCODING_UTF8 = _pyplanet.String_ENCODING_UTF8
    ENCODING_UTF16 = _pyplanet.String_ENCODING_UTF16
    ENCODING_UTF16_BE = _pyplanet.String_ENCODING_UTF16_BE
    ENCODING_UTF16_LE = _pyplanet.String_ENCODING_UTF16_LE
    ENCODING_UTF32 = _pyplanet.String_ENCODING_UTF32
    ENCODING_UTF32_BE = _pyplanet.String_ENCODING_UTF32_BE
    ENCODING_UTF32_LE = _pyplanet.String_ENCODING_UTF32_LE
    ENCODING_SIGNATURE = _pyplanet.String_ENCODING_SIGNATURE
    def __init__(self, *args): 
        this = _pyplanet.new_String(*args)
        try: self.this.append(this)
        except: self.this = this
    def __set__(self, *args): return _pyplanet.String___set__(self, *args)
    def set(self, *args): return _pyplanet.String_set(self, *args)
    def createUTF8EncodedString(self): return _pyplanet.String_createUTF8EncodedString(self)
    __swig_destroy__ = _pyplanet.delete_String
    __del__ = lambda self : None;
String_swigregister = _pyplanet.String_swigregister
String_swigregister(String)

OSGTEXT_STYLE = _pyplanet.OSGTEXT_STYLE
class Bevel(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bevel, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Bevel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self): return _pyplanet.Bevel_cloneType(self)
    def clone(self, *args): return _pyplanet.Bevel_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Bevel_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.Bevel_libraryName(self)
    def className(self): return _pyplanet.Bevel_className(self)
    def __eq__(self, *args): return _pyplanet.Bevel___eq__(self, *args)
    def setBevelThickness(self, *args): return _pyplanet.Bevel_setBevelThickness(self, *args)
    def getBevelThickness(self): return _pyplanet.Bevel_getBevelThickness(self)
    def flatBevel(self, width = 0.25): return _pyplanet.Bevel_flatBevel(self, width)
    def roundedBevel(self, width = 0.5, numSteps = 10): return _pyplanet.Bevel_roundedBevel(self, width, numSteps)
    def roundedBevel2(self, width = 0.5, numSteps = 10): return _pyplanet.Bevel_roundedBevel2(self, width, numSteps)
    def setVertices(self, *args): return _pyplanet.Bevel_setVertices(self, *args)
    def getVertices(self, *args): return _pyplanet.Bevel_getVertices(self, *args)
    def _print(self, *args): return _pyplanet.Bevel__print(self, *args)
    __swig_destroy__ = _pyplanet.delete_Bevel
    __del__ = lambda self : None;
Bevel_swigregister = _pyplanet.Bevel_swigregister
Bevel_swigregister(Bevel)

class Style(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Style, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Style, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self): return _pyplanet.Style_cloneType(self)
    def clone(self, *args): return _pyplanet.Style_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Style_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.Style_libraryName(self)
    def className(self): return _pyplanet.Style_className(self)
    __swig_getmethods__["getDefaultStyle"] = lambda x: _pyplanet.Style_getDefaultStyle
    if _newclass:getDefaultStyle = staticmethod(_pyplanet.Style_getDefaultStyle)
    def __eq__(self, *args): return _pyplanet.Style___eq__(self, *args)
    def setBevel(self, *args): return _pyplanet.Style_setBevel(self, *args)
    def getBevel(self): return _pyplanet.Style_getBevel(self)
    def setWidthRatio(self, *args): return _pyplanet.Style_setWidthRatio(self, *args)
    def getWidthRatio(self): return _pyplanet.Style_getWidthRatio(self)
    def setThicknessRatio(self, *args): return _pyplanet.Style_setThicknessRatio(self, *args)
    def getThicknessRatio(self): return _pyplanet.Style_getThicknessRatio(self)
    def setOutlineRatio(self, *args): return _pyplanet.Style_setOutlineRatio(self, *args)
    def getOutlineRatio(self): return _pyplanet.Style_getOutlineRatio(self)
    def setSampleDensity(self, *args): return _pyplanet.Style_setSampleDensity(self, *args)
    def getSampleDensity(self): return _pyplanet.Style_getSampleDensity(self)
    __swig_destroy__ = _pyplanet.delete_Style
    __del__ = lambda self : None;
Style_swigregister = _pyplanet.Style_swigregister
Style_swigregister(Style)

def Style_getDefaultStyle():
  return _pyplanet.Style_getDefaultStyle()
Style_getDefaultStyle = _pyplanet.Style_getDefaultStyle

OSGTEXT_GLYPH = _pyplanet.OSGTEXT_GLYPH
class Glyph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Glyph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Glyph, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Glyph(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFont(self, *args): return _pyplanet.Glyph_getFont(self, *args)
    def getGlyphCode(self): return _pyplanet.Glyph_getGlyphCode(self)
    def setWidth(self, *args): return _pyplanet.Glyph_setWidth(self, *args)
    def getWidth(self): return _pyplanet.Glyph_getWidth(self)
    def setHeight(self, *args): return _pyplanet.Glyph_setHeight(self, *args)
    def getHeight(self): return _pyplanet.Glyph_getHeight(self)
    def setHorizontalBearing(self, *args): return _pyplanet.Glyph_setHorizontalBearing(self, *args)
    def getHorizontalBearing(self): return _pyplanet.Glyph_getHorizontalBearing(self)
    def setHorizontalAdvance(self, *args): return _pyplanet.Glyph_setHorizontalAdvance(self, *args)
    def getHorizontalAdvance(self): return _pyplanet.Glyph_getHorizontalAdvance(self)
    def setVerticalBearing(self, *args): return _pyplanet.Glyph_setVerticalBearing(self, *args)
    def getVerticalBearing(self): return _pyplanet.Glyph_getVerticalBearing(self)
    def setVerticalAdvance(self, *args): return _pyplanet.Glyph_setVerticalAdvance(self, *args)
    def getVerticalAdvance(self): return _pyplanet.Glyph_getVerticalAdvance(self)
    def setTexture(self, *args): return _pyplanet.Glyph_setTexture(self, *args)
    def getTexture(self, *args): return _pyplanet.Glyph_getTexture(self, *args)
    def setTexturePosition(self, *args): return _pyplanet.Glyph_setTexturePosition(self, *args)
    def getTexturePositionX(self): return _pyplanet.Glyph_getTexturePositionX(self)
    def getTexturePositionY(self): return _pyplanet.Glyph_getTexturePositionY(self)
    def setMinTexCoord(self, *args): return _pyplanet.Glyph_setMinTexCoord(self, *args)
    def getMinTexCoord(self): return _pyplanet.Glyph_getMinTexCoord(self)
    def setMaxTexCoord(self, *args): return _pyplanet.Glyph_setMaxTexCoord(self, *args)
    def getMaxTexCoord(self): return _pyplanet.Glyph_getMaxTexCoord(self)
    def subload(self): return _pyplanet.Glyph_subload(self)
Glyph_swigregister = _pyplanet.Glyph_swigregister
Glyph_swigregister(Glyph)

class GlyphGeometry(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlyphGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GlyphGeometry, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_GlyphGeometry()
        try: self.this.append(this)
        except: self.this = this
    def setup(self, *args): return _pyplanet.GlyphGeometry_setup(self, *args)
    def match(self, *args): return _pyplanet.GlyphGeometry_match(self, *args)
    def getGeode(self): return _pyplanet.GlyphGeometry_getGeode(self)
    def getGeometry(self): return _pyplanet.GlyphGeometry_getGeometry(self)
    def setVertexArray(self, *args): return _pyplanet.GlyphGeometry_setVertexArray(self, *args)
    def getVertexArray(self): return _pyplanet.GlyphGeometry_getVertexArray(self)
    def setNormalArray(self, *args): return _pyplanet.GlyphGeometry_setNormalArray(self, *args)
    def getNormalArray(self): return _pyplanet.GlyphGeometry_getNormalArray(self)
    def getFrontPrimitiveSetList(self): return _pyplanet.GlyphGeometry_getFrontPrimitiveSetList(self)
    def getWallPrimitiveSetList(self): return _pyplanet.GlyphGeometry_getWallPrimitiveSetList(self)
    def getBackPrimitiveSetList(self): return _pyplanet.GlyphGeometry_getBackPrimitiveSetList(self)
    __swig_destroy__ = _pyplanet.delete_GlyphGeometry
    __del__ = lambda self : None;
GlyphGeometry_swigregister = _pyplanet.GlyphGeometry_swigregister
GlyphGeometry_swigregister(GlyphGeometry)

class Glyph3D(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Glyph3D, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Glyph3D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Glyph3D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFont(self, *args): return _pyplanet.Glyph3D_getFont(self, *args)
    def getGlyphCode(self): return _pyplanet.Glyph3D_getGlyphCode(self)
    def setWidth(self, *args): return _pyplanet.Glyph3D_setWidth(self, *args)
    def getWidth(self): return _pyplanet.Glyph3D_getWidth(self)
    def setHeight(self, *args): return _pyplanet.Glyph3D_setHeight(self, *args)
    def getHeight(self): return _pyplanet.Glyph3D_getHeight(self)
    def setHorizontalBearing(self, *args): return _pyplanet.Glyph3D_setHorizontalBearing(self, *args)
    def getHorizontalBearing(self): return _pyplanet.Glyph3D_getHorizontalBearing(self)
    def setHorizontalAdvance(self, *args): return _pyplanet.Glyph3D_setHorizontalAdvance(self, *args)
    def getHorizontalAdvance(self): return _pyplanet.Glyph3D_getHorizontalAdvance(self)
    def setVerticalBearing(self, *args): return _pyplanet.Glyph3D_setVerticalBearing(self, *args)
    def getVerticalBearing(self): return _pyplanet.Glyph3D_getVerticalBearing(self)
    def setVerticalAdvance(self, *args): return _pyplanet.Glyph3D_setVerticalAdvance(self, *args)
    def getVerticalAdvance(self): return _pyplanet.Glyph3D_getVerticalAdvance(self)
    def setBoundingBox(self, *args): return _pyplanet.Glyph3D_setBoundingBox(self, *args)
    def getBoundingBox(self): return _pyplanet.Glyph3D_getBoundingBox(self)
    def setRawVertexArray(self, *args): return _pyplanet.Glyph3D_setRawVertexArray(self, *args)
    def getRawVertexArray(self, *args): return _pyplanet.Glyph3D_getRawVertexArray(self, *args)
    def getRawFacePrimitiveSetList(self, *args): return _pyplanet.Glyph3D_getRawFacePrimitiveSetList(self, *args)
    def getGlyphGeometry(self, *args): return _pyplanet.Glyph3D_getGlyphGeometry(self, *args)
Glyph3D_swigregister = _pyplanet.Glyph3D_swigregister
Glyph3D_swigregister(Glyph3D)

class GlyphTexture(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlyphTexture, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GlyphTexture, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_GlyphTexture()
        try: self.this.append(this)
        except: self.this = this
    def className(self): return _pyplanet.GlyphTexture_className(self)
    def compare(self, *args): return _pyplanet.GlyphTexture_compare(self, *args)
    def setGlyphImageMargin(self, *args): return _pyplanet.GlyphTexture_setGlyphImageMargin(self, *args)
    def getGlyphImageMargin(self): return _pyplanet.GlyphTexture_getGlyphImageMargin(self)
    def setGlyphImageMarginRatio(self, *args): return _pyplanet.GlyphTexture_setGlyphImageMarginRatio(self, *args)
    def getGlyphImageMarginRatio(self): return _pyplanet.GlyphTexture_getGlyphImageMarginRatio(self)
    def getSpaceForGlyph(self, *args): return _pyplanet.GlyphTexture_getSpaceForGlyph(self, *args)
    def addGlyph(self, *args): return _pyplanet.GlyphTexture_addGlyph(self, *args)
    def apply(self, *args): return _pyplanet.GlyphTexture_apply(self, *args)
    def setThreadSafeRefUnref(self, *args): return _pyplanet.GlyphTexture_setThreadSafeRefUnref(self, *args)
    def resizeGLObjectBuffers(self, *args): return _pyplanet.GlyphTexture_resizeGLObjectBuffers(self, *args)
    def createImage(self): return _pyplanet.GlyphTexture_createImage(self)
GlyphTexture_swigregister = _pyplanet.GlyphTexture_swigregister
GlyphTexture_swigregister(GlyphTexture)

OSGTEXT_FONT = _pyplanet.OSGTEXT_FONT

def findFontFile(*args):
  return _pyplanet.findFontFile(*args)
findFontFile = _pyplanet.findFontFile
class Font(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Font, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Font, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self): return _pyplanet.Font_cloneType(self)
    def clone(self, *args): return _pyplanet.Font_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Font_isSameKindAs(self, *args)
    def className(self): return _pyplanet.Font_className(self)
    def libraryName(self): return _pyplanet.Font_libraryName(self)
    def getFileName(self): return _pyplanet.Font_getFileName(self)
    __swig_getmethods__["getDefaultFont"] = lambda x: _pyplanet.Font_getDefaultFont
    if _newclass:getDefaultFont = staticmethod(_pyplanet.Font_getDefaultFont)
    def setTexEnv(self, *args): return _pyplanet.Font_setTexEnv(self, *args)
    def getTexEnv(self, *args): return _pyplanet.Font_getTexEnv(self, *args)
    def setStateSet(self, *args): return _pyplanet.Font_setStateSet(self, *args)
    def getStateSet(self, *args): return _pyplanet.Font_getStateSet(self, *args)
    def getGlyph3D(self, *args): return _pyplanet.Font_getGlyph3D(self, *args)
    def hasVertical(self): return _pyplanet.Font_hasVertical(self)
    def setGlyphImageMargin(self, *args): return _pyplanet.Font_setGlyphImageMargin(self, *args)
    def getGlyphImageMargin(self): return _pyplanet.Font_getGlyphImageMargin(self)
    def setGlyphImageMarginRatio(self, *args): return _pyplanet.Font_setGlyphImageMarginRatio(self, *args)
    def getGlyphImageMarginRatio(self): return _pyplanet.Font_getGlyphImageMarginRatio(self)
    def setTextureSizeHint(self, *args): return _pyplanet.Font_setTextureSizeHint(self, *args)
    def getTextureWidthHint(self): return _pyplanet.Font_getTextureWidthHint(self)
    def getTextureHeightHint(self): return _pyplanet.Font_getTextureHeightHint(self)
    def setMinFilterHint(self, *args): return _pyplanet.Font_setMinFilterHint(self, *args)
    def getMinFilterHint(self): return _pyplanet.Font_getMinFilterHint(self)
    def setMagFilterHint(self, *args): return _pyplanet.Font_setMagFilterHint(self, *args)
    def getMagFilterHint(self): return _pyplanet.Font_getMagFilterHint(self)
    def getFontDepth(self): return _pyplanet.Font_getFontDepth(self)
    def setNumberCurveSamples(self, *args): return _pyplanet.Font_setNumberCurveSamples(self, *args)
    def getNumberCurveSamples(self): return _pyplanet.Font_getNumberCurveSamples(self)
    def setImplementation(self, *args): return _pyplanet.Font_setImplementation(self, *args)
    def getImplementation(self, *args): return _pyplanet.Font_getImplementation(self, *args)
    def resizeGLObjectBuffers(self, *args): return _pyplanet.Font_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, state = None): return _pyplanet.Font_releaseGLObjects(self, state)
    def getGlyphTextureList(self): return _pyplanet.Font_getGlyphTextureList(self)
Font_swigregister = _pyplanet.Font_swigregister
Font_swigregister(Font)

def readFontFile(*args):
  return _pyplanet.readFontFile(*args)
readFontFile = _pyplanet.readFontFile

def readFontStream(*args):
  return _pyplanet.readFontStream(*args)
readFontStream = _pyplanet.readFontStream

def readRefFontFile(*args):
  return _pyplanet.readRefFontFile(*args)
readRefFontFile = _pyplanet.readRefFontFile

def readRefFontStream(*args):
  return _pyplanet.readRefFontStream(*args)
readRefFontStream = _pyplanet.readRefFontStream

def Font_getDefaultFont():
  return _pyplanet.Font_getDefaultFont()
Font_getDefaultFont = _pyplanet.Font_getDefaultFont

OSGTEXT_TEXTBASE = _pyplanet.OSGTEXT_TEXTBASE
class TextBase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextBase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def isSameKindAs(self, *args): return _pyplanet.TextBase_isSameKindAs(self, *args)
    def className(self): return _pyplanet.TextBase_className(self)
    def libraryName(self): return _pyplanet.TextBase_libraryName(self)
    def setColor(self, *args): return _pyplanet.TextBase_setColor(self, *args)
    def getColor(self): return _pyplanet.TextBase_getColor(self)
    def setFont(self, *args): return _pyplanet.TextBase_setFont(self, *args)
    def getFont(self): return _pyplanet.TextBase_getFont(self)
    def setStyle(self, *args): return _pyplanet.TextBase_setStyle(self, *args)
    def getStyle(self, *args): return _pyplanet.TextBase_getStyle(self, *args)
    def getOrCreateStyle(self): return _pyplanet.TextBase_getOrCreateStyle(self)
    def setFontResolution(self, *args): return _pyplanet.TextBase_setFontResolution(self, *args)
    def getFontWidth(self): return _pyplanet.TextBase_getFontWidth(self)
    def getFontHeight(self): return _pyplanet.TextBase_getFontHeight(self)
    def setText(self, *args): return _pyplanet.TextBase_setText(self, *args)
    def getText(self, *args): return _pyplanet.TextBase_getText(self, *args)
    def update(self): return _pyplanet.TextBase_update(self)
    def setCharacterSize(self, *args): return _pyplanet.TextBase_setCharacterSize(self, *args)
    def getCharacterHeight(self): return _pyplanet.TextBase_getCharacterHeight(self)
    def getCharacterAspectRatio(self): return _pyplanet.TextBase_getCharacterAspectRatio(self)
    OBJECT_COORDS = _pyplanet.TextBase_OBJECT_COORDS
    SCREEN_COORDS = _pyplanet.TextBase_SCREEN_COORDS
    OBJECT_COORDS_WITH_MAXIMUM_SCREEN_SIZE_CAPPED_BY_FONT_HEIGHT = _pyplanet.TextBase_OBJECT_COORDS_WITH_MAXIMUM_SCREEN_SIZE_CAPPED_BY_FONT_HEIGHT
    def setCharacterSizeMode(self, *args): return _pyplanet.TextBase_setCharacterSizeMode(self, *args)
    def getCharacterSizeMode(self): return _pyplanet.TextBase_getCharacterSizeMode(self)
    def setMaximumWidth(self, *args): return _pyplanet.TextBase_setMaximumWidth(self, *args)
    def getMaximumWidth(self): return _pyplanet.TextBase_getMaximumWidth(self)
    def setMaximumHeight(self, *args): return _pyplanet.TextBase_setMaximumHeight(self, *args)
    def getMaximumHeight(self): return _pyplanet.TextBase_getMaximumHeight(self)
    def setLineSpacing(self, *args): return _pyplanet.TextBase_setLineSpacing(self, *args)
    def getLineSpacing(self): return _pyplanet.TextBase_getLineSpacing(self)
    def setPosition(self, *args): return _pyplanet.TextBase_setPosition(self, *args)
    def getPosition(self): return _pyplanet.TextBase_getPosition(self)
    LEFT_TOP = _pyplanet.TextBase_LEFT_TOP
    LEFT_CENTER = _pyplanet.TextBase_LEFT_CENTER
    LEFT_BOTTOM = _pyplanet.TextBase_LEFT_BOTTOM
    CENTER_TOP = _pyplanet.TextBase_CENTER_TOP
    CENTER_CENTER = _pyplanet.TextBase_CENTER_CENTER
    CENTER_BOTTOM = _pyplanet.TextBase_CENTER_BOTTOM
    RIGHT_TOP = _pyplanet.TextBase_RIGHT_TOP
    RIGHT_CENTER = _pyplanet.TextBase_RIGHT_CENTER
    RIGHT_BOTTOM = _pyplanet.TextBase_RIGHT_BOTTOM
    LEFT_BASE_LINE = _pyplanet.TextBase_LEFT_BASE_LINE
    CENTER_BASE_LINE = _pyplanet.TextBase_CENTER_BASE_LINE
    RIGHT_BASE_LINE = _pyplanet.TextBase_RIGHT_BASE_LINE
    LEFT_BOTTOM_BASE_LINE = _pyplanet.TextBase_LEFT_BOTTOM_BASE_LINE
    CENTER_BOTTOM_BASE_LINE = _pyplanet.TextBase_CENTER_BOTTOM_BASE_LINE
    RIGHT_BOTTOM_BASE_LINE = _pyplanet.TextBase_RIGHT_BOTTOM_BASE_LINE
    BASE_LINE = _pyplanet.TextBase_BASE_LINE
    def setAlignment(self, *args): return _pyplanet.TextBase_setAlignment(self, *args)
    def getAlignment(self): return _pyplanet.TextBase_getAlignment(self)
    XY_PLANE = _pyplanet.TextBase_XY_PLANE
    REVERSED_XY_PLANE = _pyplanet.TextBase_REVERSED_XY_PLANE
    XZ_PLANE = _pyplanet.TextBase_XZ_PLANE
    REVERSED_XZ_PLANE = _pyplanet.TextBase_REVERSED_XZ_PLANE
    YZ_PLANE = _pyplanet.TextBase_YZ_PLANE
    REVERSED_YZ_PLANE = _pyplanet.TextBase_REVERSED_YZ_PLANE
    SCREEN = _pyplanet.TextBase_SCREEN
    USER_DEFINED_ROTATION = _pyplanet.TextBase_USER_DEFINED_ROTATION
    def setAxisAlignment(self, *args): return _pyplanet.TextBase_setAxisAlignment(self, *args)
    def getAxisAlignment(self): return _pyplanet.TextBase_getAxisAlignment(self)
    def setRotation(self, *args): return _pyplanet.TextBase_setRotation(self, *args)
    def getRotation(self): return _pyplanet.TextBase_getRotation(self)
    def setAutoRotateToScreen(self, *args): return _pyplanet.TextBase_setAutoRotateToScreen(self, *args)
    def getAutoRotateToScreen(self): return _pyplanet.TextBase_getAutoRotateToScreen(self)
    LEFT_TO_RIGHT = _pyplanet.TextBase_LEFT_TO_RIGHT
    RIGHT_TO_LEFT = _pyplanet.TextBase_RIGHT_TO_LEFT
    VERTICAL = _pyplanet.TextBase_VERTICAL
    def setLayout(self, *args): return _pyplanet.TextBase_setLayout(self, *args)
    def getLayout(self): return _pyplanet.TextBase_getLayout(self)
    TEXT = _pyplanet.TextBase_TEXT
    BOUNDINGBOX = _pyplanet.TextBase_BOUNDINGBOX
    FILLEDBOUNDINGBOX = _pyplanet.TextBase_FILLEDBOUNDINGBOX
    ALIGNMENT = _pyplanet.TextBase_ALIGNMENT
    def setDrawMode(self, *args): return _pyplanet.TextBase_setDrawMode(self, *args)
    def getDrawMode(self): return _pyplanet.TextBase_getDrawMode(self)
    def setBoundingBoxMargin(self, *args): return _pyplanet.TextBase_setBoundingBoxMargin(self, *args)
    def getBoundingBoxMargin(self): return _pyplanet.TextBase_getBoundingBoxMargin(self)
    def setBoundingBoxColor(self, *args): return _pyplanet.TextBase_setBoundingBoxColor(self, *args)
    def getBoundingBoxColor(self): return _pyplanet.TextBase_getBoundingBoxColor(self)
    def setKerningType(self, *args): return _pyplanet.TextBase_setKerningType(self, *args)
    def getKerningType(self): return _pyplanet.TextBase_getKerningType(self)
    def getLineCount(self): return _pyplanet.TextBase_getLineCount(self)
    def setThreadSafeRefUnref(self, *args): return _pyplanet.TextBase_setThreadSafeRefUnref(self, *args)
    def resizeGLObjectBuffers(self, *args): return _pyplanet.TextBase_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, state = None): return _pyplanet.TextBase_releaseGLObjects(self, state)
    def computeBound(self): return _pyplanet.TextBase_computeBound(self)
TextBase_swigregister = _pyplanet.TextBase_swigregister
TextBase_swigregister(TextBase)

OSGTEXT_TEXT = _pyplanet.OSGTEXT_TEXT
class Text(TextBase):
    __swig_setmethods__ = {}
    for _s in [TextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text, name, value)
    __swig_getmethods__ = {}
    for _s in [TextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Text, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Text(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.Text_cloneType(self)
    def clone(self, *args): return _pyplanet.Text_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Text_isSameKindAs(self, *args)
    def className(self): return _pyplanet.Text_className(self)
    def libraryName(self): return _pyplanet.Text_libraryName(self)
    def setFont(self, *args): return _pyplanet.Text_setFont(self, *args)
    def setEnableDepthWrites(self, *args): return _pyplanet.Text_setEnableDepthWrites(self, *args)
    def getEnableDepthWrites(self): return _pyplanet.Text_getEnableDepthWrites(self)
    DROP_SHADOW_BOTTOM_RIGHT = _pyplanet.Text_DROP_SHADOW_BOTTOM_RIGHT
    DROP_SHADOW_CENTER_RIGHT = _pyplanet.Text_DROP_SHADOW_CENTER_RIGHT
    DROP_SHADOW_TOP_RIGHT = _pyplanet.Text_DROP_SHADOW_TOP_RIGHT
    DROP_SHADOW_BOTTOM_CENTER = _pyplanet.Text_DROP_SHADOW_BOTTOM_CENTER
    DROP_SHADOW_TOP_CENTER = _pyplanet.Text_DROP_SHADOW_TOP_CENTER
    DROP_SHADOW_BOTTOM_LEFT = _pyplanet.Text_DROP_SHADOW_BOTTOM_LEFT
    DROP_SHADOW_CENTER_LEFT = _pyplanet.Text_DROP_SHADOW_CENTER_LEFT
    DROP_SHADOW_TOP_LEFT = _pyplanet.Text_DROP_SHADOW_TOP_LEFT
    OUTLINE = _pyplanet.Text_OUTLINE
    NONE = _pyplanet.Text_NONE
    POLYGON_OFFSET = _pyplanet.Text_POLYGON_OFFSET
    NO_DEPTH_BUFFER = _pyplanet.Text_NO_DEPTH_BUFFER
    DEPTH_RANGE = _pyplanet.Text_DEPTH_RANGE
    STENCIL_BUFFER = _pyplanet.Text_STENCIL_BUFFER
    DELAYED_DEPTH_WRITES = _pyplanet.Text_DELAYED_DEPTH_WRITES
    def setBackdropType(self, *args): return _pyplanet.Text_setBackdropType(self, *args)
    def getBackdropType(self): return _pyplanet.Text_getBackdropType(self)
    def setBackdropOffset(self, *args): return _pyplanet.Text_setBackdropOffset(self, *args)
    def getBackdropHorizontalOffset(self): return _pyplanet.Text_getBackdropHorizontalOffset(self)
    def getBackdropVerticalOffset(self): return _pyplanet.Text_getBackdropVerticalOffset(self)
    def setBackdropColor(self, *args): return _pyplanet.Text_setBackdropColor(self, *args)
    def getBackdropColor(self): return _pyplanet.Text_getBackdropColor(self)
    def setBackdropImplementation(self, *args): return _pyplanet.Text_setBackdropImplementation(self, *args)
    def getBackdropImplementation(self): return _pyplanet.Text_getBackdropImplementation(self)
    SOLID = _pyplanet.Text_SOLID
    PER_CHARACTER = _pyplanet.Text_PER_CHARACTER
    OVERALL = _pyplanet.Text_OVERALL
    def setColorGradientMode(self, *args): return _pyplanet.Text_setColorGradientMode(self, *args)
    def getColorGradientMode(self): return _pyplanet.Text_getColorGradientMode(self)
    def setColorGradientCorners(self, *args): return _pyplanet.Text_setColorGradientCorners(self, *args)
    def getColorGradientTopLeft(self): return _pyplanet.Text_getColorGradientTopLeft(self)
    def getColorGradientBottomLeft(self): return _pyplanet.Text_getColorGradientBottomLeft(self)
    def getColorGradientBottomRight(self): return _pyplanet.Text_getColorGradientBottomRight(self)
    def getColorGradientTopRight(self): return _pyplanet.Text_getColorGradientTopRight(self)
    def drawImplementation(self, *args): return _pyplanet.Text_drawImplementation(self, *args)
    def supports(self, *args): return _pyplanet.Text_supports(self, *args)
    def accept(self, *args): return _pyplanet.Text_accept(self, *args)
    def setThreadSafeRefUnref(self, *args): return _pyplanet.Text_setThreadSafeRefUnref(self, *args)
    def resizeGLObjectBuffers(self, *args): return _pyplanet.Text_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, state = None): return _pyplanet.Text_releaseGLObjects(self, state)
Text_swigregister = _pyplanet.Text_swigregister
Text_swigregister(Text)

OSGTEXT_TEXT3D = _pyplanet.OSGTEXT_TEXT3D
class Text3D(TextBase):
    __swig_setmethods__ = {}
    for _s in [TextBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text3D, name, value)
    __swig_getmethods__ = {}
    for _s in [TextBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Text3D, name)
    __repr__ = _swig_repr
    PER_FACE = _pyplanet.Text3D_PER_FACE
    PER_GLYPH = _pyplanet.Text3D_PER_GLYPH
    def __init__(self, *args): 
        this = _pyplanet.new_Text3D(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.Text3D_cloneType(self)
    def clone(self, *args): return _pyplanet.Text3D_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Text3D_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.Text3D_libraryName(self)
    def className(self): return _pyplanet.Text3D_className(self)
    def getCharacterDepth(self): return _pyplanet.Text3D_getCharacterDepth(self)
    def setCharacterDepth(self, *args): return _pyplanet.Text3D_setCharacterDepth(self, *args)
    def getRenderMode(self): return _pyplanet.Text3D_getRenderMode(self)
    def setRenderMode(self, *args): return _pyplanet.Text3D_setRenderMode(self, *args)
    def getWallStateSet(self, *args): return _pyplanet.Text3D_getWallStateSet(self, *args)
    def getOrCreateWallStateSet(self): return _pyplanet.Text3D_getOrCreateWallStateSet(self)
    def setWallStateSet(self, *args): return _pyplanet.Text3D_setWallStateSet(self, *args)
    def getBackStateSet(self, *args): return _pyplanet.Text3D_getBackStateSet(self, *args)
    def getOrCreateBackStateSet(self): return _pyplanet.Text3D_getOrCreateBackStateSet(self)
    def setBackStateSet(self, *args): return _pyplanet.Text3D_setBackStateSet(self, *args)
    def drawImplementation(self, *args): return _pyplanet.Text3D_drawImplementation(self, *args)
    def supports(self, *args): return _pyplanet.Text3D_supports(self, *args)
    def accept(self, *args): return _pyplanet.Text3D_accept(self, *args)
    def setThreadSafeRefUnref(self, *args): return _pyplanet.Text3D_setThreadSafeRefUnref(self, *args)
    def resizeGLObjectBuffers(self, *args): return _pyplanet.Text3D_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, state = None): return _pyplanet.Text3D_releaseGLObjects(self, state)
    def computeBound(self): return _pyplanet.Text3D_computeBound(self)
Text3D_swigregister = _pyplanet.Text3D_swigregister
Text3D_swigregister(Text3D)

OSGTEXT_FADETEXT = _pyplanet.OSGTEXT_FADETEXT
class FadeText(Text):
    __swig_setmethods__ = {}
    for _s in [Text]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FadeText, name, value)
    __swig_getmethods__ = {}
    for _s in [Text]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FadeText, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_FadeText(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.FadeText_cloneType(self)
    def clone(self, *args): return _pyplanet.FadeText_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.FadeText_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.FadeText_libraryName(self)
    def className(self): return _pyplanet.FadeText_className(self)
    def setFadeSpeed(self, *args): return _pyplanet.FadeText_setFadeSpeed(self, *args)
    def getFadeSpeed(self): return _pyplanet.FadeText_getFadeSpeed(self)
    def drawImplementation(self, *args): return _pyplanet.FadeText_drawImplementation(self, *args)
FadeText_swigregister = _pyplanet.FadeText_swigregister
FadeText_swigregister(FadeText)

OSGTEXT_VERSION = _pyplanet.OSGTEXT_VERSION

def osgTextGetVersion():
  return _pyplanet.osgTextGetVersion()
osgTextGetVersion = _pyplanet.osgTextGetVersion

def osgTextGetLibraryName():
  return _pyplanet.osgTextGetLibraryName()
osgTextGetLibraryName = _pyplanet.osgTextGetLibraryName
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyplanet.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyplanet.SwigPyIterator_value(self)
    def incr(self, n = 1): return _pyplanet.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _pyplanet.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyplanet.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyplanet.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyplanet.SwigPyIterator_copy(self)
    def next(self): return _pyplanet.SwigPyIterator_next(self)
    def __next__(self): return _pyplanet.SwigPyIterator___next__(self)
    def previous(self): return _pyplanet.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyplanet.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyplanet.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyplanet.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyplanet.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyplanet.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyplanet.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyplanet.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyplanet.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class stdFilePathList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stdFilePathList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stdFilePathList, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyplanet.stdFilePathList_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyplanet.stdFilePathList___nonzero__(self)
    def __bool__(self): return _pyplanet.stdFilePathList___bool__(self)
    def __len__(self): return _pyplanet.stdFilePathList___len__(self)
    def pop(self): return _pyplanet.stdFilePathList_pop(self)
    def __getslice__(self, *args): return _pyplanet.stdFilePathList___getslice__(self, *args)
    def __setslice__(self, *args): return _pyplanet.stdFilePathList___setslice__(self, *args)
    def __delslice__(self, *args): return _pyplanet.stdFilePathList___delslice__(self, *args)
    def __delitem__(self, *args): return _pyplanet.stdFilePathList___delitem__(self, *args)
    def __getitem__(self, *args): return _pyplanet.stdFilePathList___getitem__(self, *args)
    def __setitem__(self, *args): return _pyplanet.stdFilePathList___setitem__(self, *args)
    def append(self, *args): return _pyplanet.stdFilePathList_append(self, *args)
    def empty(self): return _pyplanet.stdFilePathList_empty(self)
    def size(self): return _pyplanet.stdFilePathList_size(self)
    def clear(self): return _pyplanet.stdFilePathList_clear(self)
    def swap(self, *args): return _pyplanet.stdFilePathList_swap(self, *args)
    def get_allocator(self): return _pyplanet.stdFilePathList_get_allocator(self)
    def begin(self): return _pyplanet.stdFilePathList_begin(self)
    def end(self): return _pyplanet.stdFilePathList_end(self)
    def rbegin(self): return _pyplanet.stdFilePathList_rbegin(self)
    def rend(self): return _pyplanet.stdFilePathList_rend(self)
    def pop_back(self): return _pyplanet.stdFilePathList_pop_back(self)
    def erase(self, *args): return _pyplanet.stdFilePathList_erase(self, *args)
    def __init__(self, *args): 
        this = _pyplanet.new_stdFilePathList(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyplanet.stdFilePathList_push_back(self, *args)
    def front(self): return _pyplanet.stdFilePathList_front(self)
    def back(self): return _pyplanet.stdFilePathList_back(self)
    def assign(self, *args): return _pyplanet.stdFilePathList_assign(self, *args)
    def resize(self, *args): return _pyplanet.stdFilePathList_resize(self, *args)
    def insert(self, *args): return _pyplanet.stdFilePathList_insert(self, *args)
    def pop_front(self): return _pyplanet.stdFilePathList_pop_front(self)
    def push_front(self, *args): return _pyplanet.stdFilePathList_push_front(self, *args)
    __swig_destroy__ = _pyplanet.delete_stdFilePathList
    __del__ = lambda self : None;
stdFilePathList_swigregister = _pyplanet.stdFilePathList_swigregister
stdFilePathList_swigregister(stdFilePathList)

OSG_VERSION = _pyplanet.OSG_VERSION
OPENSCENEGRAPH_MAJOR_VERSION = _pyplanet.OPENSCENEGRAPH_MAJOR_VERSION
OPENSCENEGRAPH_MINOR_VERSION = _pyplanet.OPENSCENEGRAPH_MINOR_VERSION
OPENSCENEGRAPH_PATCH_VERSION = _pyplanet.OPENSCENEGRAPH_PATCH_VERSION
OPENSCENEGRAPH_SOVERSION = _pyplanet.OPENSCENEGRAPH_SOVERSION

def osgGetVersion():
  return _pyplanet.osgGetVersion()
osgGetVersion = _pyplanet.osgGetVersion

def osgGetSOVersion():
  return _pyplanet.osgGetSOVersion()
osgGetSOVersion = _pyplanet.osgGetSOVersion

def osgGetLibraryName():
  return _pyplanet.osgGetLibraryName()
osgGetLibraryName = _pyplanet.osgGetLibraryName
OSG_VERSION_MAJOR = _pyplanet.OSG_VERSION_MAJOR
OSG_VERSION_MINOR = _pyplanet.OSG_VERSION_MINOR
OSG_VERSION_PATCH = _pyplanet.OSG_VERSION_PATCH
OSG_VERSION_RELEASE = _pyplanet.OSG_VERSION_RELEASE
OSG_VERSION_REVISION = _pyplanet.OSG_VERSION_REVISION
OSGDB_VERSION = _pyplanet.OSGDB_VERSION

def osgDBGetVersion():
  return _pyplanet.osgDBGetVersion()
osgDBGetVersion = _pyplanet.osgDBGetVersion

def osgDBGetLibraryName():
  return _pyplanet.osgDBGetLibraryName()
osgDBGetLibraryName = _pyplanet.osgDBGetLibraryName
OSGDB_EXPORT_ = _pyplanet.OSGDB_EXPORT_
OSGDB_AUTHENTICATIONMAP = _pyplanet.OSGDB_AUTHENTICATIONMAP
class AuthenticationDetails(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthenticationDetails, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuthenticationDetails, name)
    __repr__ = _swig_repr
    BASIC = _pyplanet.AuthenticationDetails_BASIC
    DIGEST = _pyplanet.AuthenticationDetails_DIGEST
    NTLM = _pyplanet.AuthenticationDetails_NTLM
    GSSNegotiate = _pyplanet.AuthenticationDetails_GSSNegotiate
    ANY = _pyplanet.AuthenticationDetails_ANY
    ANYSAFE = _pyplanet.AuthenticationDetails_ANYSAFE
    def __init__(self, *args): 
        this = _pyplanet.new_AuthenticationDetails(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["username"] = _pyplanet.AuthenticationDetails_username_set
    __swig_getmethods__["username"] = _pyplanet.AuthenticationDetails_username_get
    if _newclass:username = _swig_property(_pyplanet.AuthenticationDetails_username_get, _pyplanet.AuthenticationDetails_username_set)
    __swig_setmethods__["password"] = _pyplanet.AuthenticationDetails_password_set
    __swig_getmethods__["password"] = _pyplanet.AuthenticationDetails_password_get
    if _newclass:password = _swig_property(_pyplanet.AuthenticationDetails_password_get, _pyplanet.AuthenticationDetails_password_set)
    __swig_setmethods__["httpAuthentication"] = _pyplanet.AuthenticationDetails_httpAuthentication_set
    __swig_getmethods__["httpAuthentication"] = _pyplanet.AuthenticationDetails_httpAuthentication_get
    if _newclass:httpAuthentication = _swig_property(_pyplanet.AuthenticationDetails_httpAuthentication_get, _pyplanet.AuthenticationDetails_httpAuthentication_set)
AuthenticationDetails_swigregister = _pyplanet.AuthenticationDetails_swigregister
AuthenticationDetails_swigregister(AuthenticationDetails)

class AuthenticationMap(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AuthenticationMap, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AuthenticationMap, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_AuthenticationMap()
        try: self.this.append(this)
        except: self.this = this
    def addAuthenticationDetails(self, *args): return _pyplanet.AuthenticationMap_addAuthenticationDetails(self, *args)
    def getAuthenticationDetails(self, *args): return _pyplanet.AuthenticationMap_getAuthenticationDetails(self, *args)
AuthenticationMap_swigregister = _pyplanet.AuthenticationMap_swigregister
AuthenticationMap_swigregister(AuthenticationMap)

OSGDB_FILECACHE = _pyplanet.OSGDB_FILECACHE
class FileCache(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileCache, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileCache, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_FileCache(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFileCachePath(self): return _pyplanet.FileCache_getFileCachePath(self)
    def isFileAppropriateForFileCache(self, *args): return _pyplanet.FileCache_isFileAppropriateForFileCache(self, *args)
    def createCacheFileName(self, *args): return _pyplanet.FileCache_createCacheFileName(self, *args)
    def existsInCache(self, *args): return _pyplanet.FileCache_existsInCache(self, *args)
    def readImage(self, *args): return _pyplanet.FileCache_readImage(self, *args)
    def writeImage(self, *args): return _pyplanet.FileCache_writeImage(self, *args)
    def readObject(self, *args): return _pyplanet.FileCache_readObject(self, *args)
    def writeObject(self, *args): return _pyplanet.FileCache_writeObject(self, *args)
    def readHeightField(self, *args): return _pyplanet.FileCache_readHeightField(self, *args)
    def writeHeightField(self, *args): return _pyplanet.FileCache_writeHeightField(self, *args)
    def readNode(self, *args): return _pyplanet.FileCache_readNode(self, *args)
    def writeNode(self, *args): return _pyplanet.FileCache_writeNode(self, *args)
    def readShader(self, *args): return _pyplanet.FileCache_readShader(self, *args)
    def writeShader(self, *args): return _pyplanet.FileCache_writeShader(self, *args)
    def loadDatabaseRevisionsForFile(self, *args): return _pyplanet.FileCache_loadDatabaseRevisionsForFile(self, *args)
    def getDatabaseRevisionsList(self): return _pyplanet.FileCache_getDatabaseRevisionsList(self)
    def isCachedFileBlackListed(self, *args): return _pyplanet.FileCache_isCachedFileBlackListed(self, *args)
FileCache_swigregister = _pyplanet.FileCache_swigregister
FileCache_swigregister(FileCache)

OSGDB_READERWRITER = _pyplanet.OSGDB_READERWRITER
OSGDB_WRITEFILE = _pyplanet.OSGDB_WRITEFILE
OSGDB_READFILE = _pyplanet.OSGDB_READFILE
OSGDB_INPUT = _pyplanet.OSGDB_INPUT
class Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr
    MIN_CACHE_SIZE = _pyplanet.Field_MIN_CACHE_SIZE
    def __init__(self, *args): 
        this = _pyplanet.new_Field(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_Field
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyplanet.Field___set__(self, *args)
    def reset(self): return _pyplanet.Field_reset(self)
    def addChar(self, *args): return _pyplanet.Field_addChar(self, *args)
    def getNoCharacters(self): return _pyplanet.Field_getNoCharacters(self)
    def setWithinQuotes(self, withinQuotes = True): return _pyplanet.Field_setWithinQuotes(self, withinQuotes)
    def getWithinQuotes(self): return _pyplanet.Field_getWithinQuotes(self)
    def setNoNestedBrackets(self, *args): return _pyplanet.Field_setNoNestedBrackets(self, *args)
    def getNoNestedBrackets(self): return _pyplanet.Field_getNoNestedBrackets(self)
    OPEN_BRACKET = _pyplanet.Field_OPEN_BRACKET
    CLOSE_BRACKET = _pyplanet.Field_CLOSE_BRACKET
    STRING = _pyplanet.Field_STRING
    WORD = _pyplanet.Field_WORD
    REAL = _pyplanet.Field_REAL
    INTEGER = _pyplanet.Field_INTEGER
    BLANK = _pyplanet.Field_BLANK
    UNINITIALISED = _pyplanet.Field_UNINITIALISED
    def getFieldType(self): return _pyplanet.Field_getFieldType(self)
    def isValid(self): return _pyplanet.Field_isValid(self)
    def isOpenBracket(self): return _pyplanet.Field_isOpenBracket(self)
    def isCloseBracket(self): return _pyplanet.Field_isCloseBracket(self)
    def isWord(self): return _pyplanet.Field_isWord(self)
    def matchWord(self, *args): return _pyplanet.Field_matchWord(self, *args)
    def isString(self): return _pyplanet.Field_isString(self)
    def matchString(self, *args): return _pyplanet.Field_matchString(self, *args)
    def isQuotedString(self): return _pyplanet.Field_isQuotedString(self)
    def getStr(self): return _pyplanet.Field_getStr(self)
    def takeStr(self): return _pyplanet.Field_takeStr(self)
    def isInt(self): return _pyplanet.Field_isInt(self)
    def matchInt(self, *args): return _pyplanet.Field_matchInt(self, *args)
    def getInt(self, *args): return _pyplanet.Field_getInt(self, *args)
    def isUInt(self): return _pyplanet.Field_isUInt(self)
    def matchUInt(self, *args): return _pyplanet.Field_matchUInt(self, *args)
    def getUInt(self, *args): return _pyplanet.Field_getUInt(self, *args)
    def isFloat(self): return _pyplanet.Field_isFloat(self)
    def matchFloat(self, *args): return _pyplanet.Field_matchFloat(self, *args)
    def getFloat(self, *args): return _pyplanet.Field_getFloat(self, *args)
    __swig_getmethods__["calculateFieldType"] = lambda x: _pyplanet.Field_calculateFieldType
    if _newclass:calculateFieldType = staticmethod(_pyplanet.Field_calculateFieldType)
Field_swigregister = _pyplanet.Field_swigregister
Field_swigregister(Field)

def writeObjectFile(*args):
  return _pyplanet.writeObjectFile(*args)
writeObjectFile = _pyplanet.writeObjectFile

def writeImageFile(*args):
  return _pyplanet.writeImageFile(*args)
writeImageFile = _pyplanet.writeImageFile

def writeHeightFieldFile(*args):
  return _pyplanet.writeHeightFieldFile(*args)
writeHeightFieldFile = _pyplanet.writeHeightFieldFile

def writeNodeFile(*args):
  return _pyplanet.writeNodeFile(*args)
writeNodeFile = _pyplanet.writeNodeFile

def writeShaderFile(*args):
  return _pyplanet.writeShaderFile(*args)
writeShaderFile = _pyplanet.writeShaderFile

def readObjectFile(*args):
  return _pyplanet.readObjectFile(*args)
readObjectFile = _pyplanet.readObjectFile

def readImageFile(*args):
  return _pyplanet.readImageFile(*args)
readImageFile = _pyplanet.readImageFile

def readHeightFieldFile(*args):
  return _pyplanet.readHeightFieldFile(*args)
readHeightFieldFile = _pyplanet.readHeightFieldFile

def readNodeFile(*args):
  return _pyplanet.readNodeFile(*args)
readNodeFile = _pyplanet.readNodeFile

def readNodeFiles(*args):
  return _pyplanet.readNodeFiles(*args)
readNodeFiles = _pyplanet.readNodeFiles

def readShaderFile(*args):
  return _pyplanet.readShaderFile(*args)
readShaderFile = _pyplanet.readShaderFile

def readRefObjectFile(*args):
  return _pyplanet.readRefObjectFile(*args)
readRefObjectFile = _pyplanet.readRefObjectFile

def readRefImageFile(*args):
  return _pyplanet.readRefImageFile(*args)
readRefImageFile = _pyplanet.readRefImageFile

def readRefHeightFieldFile(*args):
  return _pyplanet.readRefHeightFieldFile(*args)
readRefHeightFieldFile = _pyplanet.readRefHeightFieldFile

def readRefNodeFile(*args):
  return _pyplanet.readRefNodeFile(*args)
readRefNodeFile = _pyplanet.readRefNodeFile

def readRefShaderFile(*args):
  return _pyplanet.readRefShaderFile(*args)
readRefShaderFile = _pyplanet.readRefShaderFile

def Field_calculateFieldType(*args):
  return _pyplanet.Field_calculateFieldType(*args)
Field_calculateFieldType = _pyplanet.Field_calculateFieldType

class FieldReader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldReader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldReader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_FieldReader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_FieldReader
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyplanet.FieldReader___set__(self, *args)
    def attach(self, *args): return _pyplanet.FieldReader_attach(self, *args)
    def detach(self): return _pyplanet.FieldReader_detach(self)
    def eof(self): return _pyplanet.FieldReader_eof(self)
    def readField(self, *args): return _pyplanet.FieldReader_readField(self, *args)
    def ignoreField(self): return _pyplanet.FieldReader_ignoreField(self)
    def getNoNestedBrackets(self): return _pyplanet.FieldReader_getNoNestedBrackets(self)
FieldReader_swigregister = _pyplanet.FieldReader_swigregister
FieldReader_swigregister(FieldReader)

class FieldReaderIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FieldReaderIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FieldReaderIterator, name)
    __repr__ = _swig_repr
    MINIMUM_FIELD_READER_QUEUE_SIZE = _pyplanet.FieldReaderIterator_MINIMUM_FIELD_READER_QUEUE_SIZE
    def __init__(self, *args): 
        this = _pyplanet.new_FieldReaderIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_FieldReaderIterator
    __del__ = lambda self : None;
    def __set__(self, *args): return _pyplanet.FieldReaderIterator___set__(self, *args)
    def attach(self, *args): return _pyplanet.FieldReaderIterator_attach(self, *args)
    def detach(self): return _pyplanet.FieldReaderIterator_detach(self)
    def eof(self): return _pyplanet.FieldReaderIterator_eof(self)
    def getFieldReader(self): return _pyplanet.FieldReaderIterator_getFieldReader(self)
    def insert(self, *args): return _pyplanet.FieldReaderIterator_insert(self, *args)
    def __getitem__(self, *args): return _pyplanet.FieldReaderIterator___getitem__(self, *args)
    def field(self, *args): return _pyplanet.FieldReaderIterator_field(self, *args)
    def __iadd__(self, *args): return _pyplanet.FieldReaderIterator___iadd__(self, *args)
    def advanceOverCurrentFieldOrBlock(self): return _pyplanet.FieldReaderIterator_advanceOverCurrentFieldOrBlock(self)
    def advanceToEndOfCurrentBlock(self): return _pyplanet.FieldReaderIterator_advanceToEndOfCurrentBlock(self)
    def advanceToEndOfBlock(self, *args): return _pyplanet.FieldReaderIterator_advanceToEndOfBlock(self, *args)
    def matchSequence(self, *args): return _pyplanet.FieldReaderIterator_matchSequence(self, *args)
    def readSequence(self, *args): return _pyplanet.FieldReaderIterator_readSequence(self, *args)
FieldReaderIterator_swigregister = _pyplanet.FieldReaderIterator_swigregister
FieldReaderIterator_swigregister(FieldReaderIterator)

class Input(FieldReaderIterator):
    __swig_setmethods__ = {}
    for _s in [FieldReaderIterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Input, name, value)
    __swig_getmethods__ = {}
    for _s in [FieldReaderIterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Input, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_Input()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_Input
    __del__ = lambda self : None;
    def setOptions(self, *args): return _pyplanet.Input_setOptions(self, *args)
    def getOptions(self): return _pyplanet.Input_getOptions(self)
    def readObjectOfType(self, *args): return _pyplanet.Input_readObjectOfType(self, *args)
    def readDrawable(self): return _pyplanet.Input_readDrawable(self)
    def readStateAttribute(self): return _pyplanet.Input_readStateAttribute(self)
    def readUniform(self): return _pyplanet.Input_readUniform(self)
    def readObject(self, *args): return _pyplanet.Input_readObject(self, *args)
    def readImage(self, *args): return _pyplanet.Input_readImage(self, *args)
    def readNode(self, *args): return _pyplanet.Input_readNode(self, *args)
    def readShader(self, *args): return _pyplanet.Input_readShader(self, *args)
    def getObjectForUniqueID(self, *args): return _pyplanet.Input_getObjectForUniqueID(self, *args)
    def registerUniqueIDForObject(self, *args): return _pyplanet.Input_registerUniqueIDForObject(self, *args)
Input_swigregister = _pyplanet.Input_swigregister
Input_swigregister(Input)

OSGDB_OUTPUT = _pyplanet.OSGDB_OUTPUT
class Output(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Output, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Output(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_Output
    __del__ = lambda self : None;
    def setOptions(self, *args): return _pyplanet.Output_setOptions(self, *args)
    def getOptions(self): return _pyplanet.Output_getOptions(self)
    def setWriteOutDefaultValues(self, *args): return _pyplanet.Output_setWriteOutDefaultValues(self, *args)
    def getWriteOutDefaultValues(self): return _pyplanet.Output_getWriteOutDefaultValues(self)
    def open(self, *args): return _pyplanet.Output_open(self, *args)
    def indent(self): return _pyplanet.Output_indent(self)
    def wrapString(self, *args): return _pyplanet.Output_wrapString(self, *args)
    def setIndentStep(self, *args): return _pyplanet.Output_setIndentStep(self, *args)
    def getIndentStep(self): return _pyplanet.Output_getIndentStep(self)
    def setIndent(self, *args): return _pyplanet.Output_setIndent(self, *args)
    def getIndent(self): return _pyplanet.Output_getIndent(self)
    def setNumIndicesPerLine(self, *args): return _pyplanet.Output_setNumIndicesPerLine(self, *args)
    def getNumIndicesPerLine(self): return _pyplanet.Output_getNumIndicesPerLine(self)
    def moveIn(self): return _pyplanet.Output_moveIn(self)
    def moveOut(self): return _pyplanet.Output_moveOut(self)
    def writeObject(self, *args): return _pyplanet.Output_writeObject(self, *args)
    def writeBeginObject(self, *args): return _pyplanet.Output_writeBeginObject(self, *args)
    def writeEndObject(self): return _pyplanet.Output_writeEndObject(self)
    def writeUseID(self, *args): return _pyplanet.Output_writeUseID(self, *args)
    def writeUniqueID(self, *args): return _pyplanet.Output_writeUniqueID(self, *args)
    def getUniqueIDForObject(self, *args): return _pyplanet.Output_getUniqueIDForObject(self, *args)
    def createUniqueIDForObject(self, *args): return _pyplanet.Output_createUniqueIDForObject(self, *args)
    def registerUniqueIDForObject(self, *args): return _pyplanet.Output_registerUniqueIDForObject(self, *args)
    AS_IS = _pyplanet.Output_AS_IS
    FULL_PATH = _pyplanet.Output_FULL_PATH
    RELATIVE_PATH = _pyplanet.Output_RELATIVE_PATH
    FILENAME_ONLY = _pyplanet.Output_FILENAME_ONLY
    def setPathNameHint(self, *args): return _pyplanet.Output_setPathNameHint(self, *args)
    def getPathNameHint(self): return _pyplanet.Output_getPathNameHint(self)
    def getFileNameForOutput(self, *args): return _pyplanet.Output_getFileNameForOutput(self, *args)
    def getFileName(self): return _pyplanet.Output_getFileName(self)
    def setOutputTextureFiles(self, *args): return _pyplanet.Output_setOutputTextureFiles(self, *args)
    def getOutputTextureFiles(self): return _pyplanet.Output_getOutputTextureFiles(self)
    def getTextureFileNameForOutput(self): return _pyplanet.Output_getTextureFileNameForOutput(self)
    def setOutputShaderFiles(self, *args): return _pyplanet.Output_setOutputShaderFiles(self, *args)
    def getOutputShaderFiles(self): return _pyplanet.Output_getOutputShaderFiles(self)
    def getShaderFileNameForOutput(self): return _pyplanet.Output_getShaderFileNameForOutput(self)
    def setExternalFileWritten(self, *args): return _pyplanet.Output_setExternalFileWritten(self, *args)
    def getExternalFileWritten(self, *args): return _pyplanet.Output_getExternalFileWritten(self, *args)
Output_swigregister = _pyplanet.Output_swigregister
Output_swigregister(Output)

OSGDB_PARAMETEROUTPUT = _pyplanet.OSGDB_PARAMETEROUTPUT
class ParameterOutput(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParameterOutput, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParameterOutput, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ParameterOutput(*args)
        try: self.this.append(this)
        except: self.this = this
    def begin(self): return _pyplanet.ParameterOutput_begin(self)
    def newLine(self): return _pyplanet.ParameterOutput_newLine(self)
    def end(self): return _pyplanet.ParameterOutput_end(self)
    __swig_destroy__ = _pyplanet.delete_ParameterOutput
    __del__ = lambda self : None;
ParameterOutput_swigregister = _pyplanet.ParameterOutput_swigregister
ParameterOutput_swigregister(ParameterOutput)

OSGDB_IMAGEOPTIONS = _pyplanet.OSGDB_IMAGEOPTIONS
class ImageOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageOptions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ImageOptions(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.ImageOptions_cloneType(self)
    def clone(self, *args): return _pyplanet.ImageOptions_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.ImageOptions_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.ImageOptions_libraryName(self)
    def className(self): return _pyplanet.ImageOptions_className(self)
    ALL_IMAGE = _pyplanet.ImageOptions_ALL_IMAGE
    RATIO_WINDOW = _pyplanet.ImageOptions_RATIO_WINDOW
    PIXEL_WINDOW = _pyplanet.ImageOptions_PIXEL_WINDOW
    NEAREST = _pyplanet.ImageOptions_NEAREST
    LINEAR = _pyplanet.ImageOptions_LINEAR
    CUBIC = _pyplanet.ImageOptions_CUBIC
    __swig_setmethods__["_destinationImage"] = _pyplanet.ImageOptions__destinationImage_set
    __swig_getmethods__["_destinationImage"] = _pyplanet.ImageOptions__destinationImage_get
    if _newclass:_destinationImage = _swig_property(_pyplanet.ImageOptions__destinationImage_get, _pyplanet.ImageOptions__destinationImage_set)
    __swig_setmethods__["_destinationDataType"] = _pyplanet.ImageOptions__destinationDataType_set
    __swig_getmethods__["_destinationDataType"] = _pyplanet.ImageOptions__destinationDataType_get
    if _newclass:_destinationDataType = _swig_property(_pyplanet.ImageOptions__destinationDataType_get, _pyplanet.ImageOptions__destinationDataType_set)
    __swig_setmethods__["_destinationPixelFormat"] = _pyplanet.ImageOptions__destinationPixelFormat_set
    __swig_getmethods__["_destinationPixelFormat"] = _pyplanet.ImageOptions__destinationPixelFormat_get
    if _newclass:_destinationPixelFormat = _swig_property(_pyplanet.ImageOptions__destinationPixelFormat_get, _pyplanet.ImageOptions__destinationPixelFormat_set)
    def init(self): return _pyplanet.ImageOptions_init(self)
    __swig_destroy__ = _pyplanet.delete_ImageOptions
    __del__ = lambda self : None;
ImageOptions_swigregister = _pyplanet.ImageOptions_swigregister
ImageOptions_swigregister(ImageOptions)

OSGDB_FILEUTILS = _pyplanet.OSGDB_FILEUTILS

def fopen(*args):
  return _pyplanet.fopen(*args)
fopen = _pyplanet.fopen

def makeDirectory(*args):
  return _pyplanet.makeDirectory(*args)
makeDirectory = _pyplanet.makeDirectory

def makeDirectoryForFile(*args):
  return _pyplanet.makeDirectoryForFile(*args)
makeDirectoryForFile = _pyplanet.makeDirectoryForFile

def getCurrentWorkingDirectory():
  return _pyplanet.getCurrentWorkingDirectory()
getCurrentWorkingDirectory = _pyplanet.getCurrentWorkingDirectory

def setCurrentWorkingDirectory(*args):
  return _pyplanet.setCurrentWorkingDirectory(*args)
setCurrentWorkingDirectory = _pyplanet.setCurrentWorkingDirectory

def fileExists(*args):
  return _pyplanet.fileExists(*args)
fileExists = _pyplanet.fileExists
FILE_NOT_FOUND = _pyplanet.FILE_NOT_FOUND
REGULAR_FILE = _pyplanet.REGULAR_FILE
DIRECTORY = _pyplanet.DIRECTORY

def fileType(*args):
  return _pyplanet.fileType(*args)
fileType = _pyplanet.fileType

def getDirectoryContents(*args):
  return _pyplanet.getDirectoryContents(*args)
getDirectoryContents = _pyplanet.getDirectoryContents

def expandWildcardsInFilename(*args):
  return _pyplanet.expandWildcardsInFilename(*args)
expandWildcardsInFilename = _pyplanet.expandWildcardsInFilename
OK = _pyplanet.OK
SOURCE_EQUALS_DESTINATION = _pyplanet.SOURCE_EQUALS_DESTINATION
BAD_ARGUMENT = _pyplanet.BAD_ARGUMENT
SOURCE_MISSING = _pyplanet.SOURCE_MISSING
SOURCE_NOT_OPENED = _pyplanet.SOURCE_NOT_OPENED
DESTINATION_NOT_OPENED = _pyplanet.DESTINATION_NOT_OPENED
READ_ERROR = _pyplanet.READ_ERROR
WRITE_ERROR = _pyplanet.WRITE_ERROR

def copyFile(*args):
  return _pyplanet.copyFile(*args)
copyFile = _pyplanet.copyFile

def getDataFilePathList():
  return _pyplanet.getDataFilePathList()
getDataFilePathList = _pyplanet.getDataFilePathList

def getLibraryFilePathList():
  return _pyplanet.getLibraryFilePathList()
getLibraryFilePathList = _pyplanet.getLibraryFilePathList

def convertStringPathIntoFilePathList(*args):
  return _pyplanet.convertStringPathIntoFilePathList(*args)
convertStringPathIntoFilePathList = _pyplanet.convertStringPathIntoFilePathList

def appendPlatformSpecificLibraryFilePaths(*args):
  return _pyplanet.appendPlatformSpecificLibraryFilePaths(*args)
appendPlatformSpecificLibraryFilePaths = _pyplanet.appendPlatformSpecificLibraryFilePaths

def appendPlatformSpecificResourceFilePaths(*args):
  return _pyplanet.appendPlatformSpecificResourceFilePaths(*args)
appendPlatformSpecificResourceFilePaths = _pyplanet.appendPlatformSpecificResourceFilePaths
OSGDB_FILENAMEUTILS = _pyplanet.OSGDB_FILENAMEUTILS

def getFilePath(*args):
  return _pyplanet.getFilePath(*args)
getFilePath = _pyplanet.getFilePath

def getFileExtension(*args):
  return _pyplanet.getFileExtension(*args)
getFileExtension = _pyplanet.getFileExtension

def getFileExtensionIncludingDot(*args):
  return _pyplanet.getFileExtensionIncludingDot(*args)
getFileExtensionIncludingDot = _pyplanet.getFileExtensionIncludingDot

def getLowerCaseFileExtension(*args):
  return _pyplanet.getLowerCaseFileExtension(*args)
getLowerCaseFileExtension = _pyplanet.getLowerCaseFileExtension

def getSimpleFileName(*args):
  return _pyplanet.getSimpleFileName(*args)
getSimpleFileName = _pyplanet.getSimpleFileName

def getNameLessExtension(*args):
  return _pyplanet.getNameLessExtension(*args)
getNameLessExtension = _pyplanet.getNameLessExtension

def getNameLessAllExtensions(*args):
  return _pyplanet.getNameLessAllExtensions(*args)
getNameLessAllExtensions = _pyplanet.getNameLessAllExtensions

def getStrippedName(*args):
  return _pyplanet.getStrippedName(*args)
getStrippedName = _pyplanet.getStrippedName

def getPathRelative(*args):
  return _pyplanet.getPathRelative(*args)
getPathRelative = _pyplanet.getPathRelative

def getPathRoot(*args):
  return _pyplanet.getPathRoot(*args)
getPathRoot = _pyplanet.getPathRoot

def isAbsolutePath(*args):
  return _pyplanet.isAbsolutePath(*args)
isAbsolutePath = _pyplanet.isAbsolutePath

def convertFileNameToWindowsStyle(*args):
  return _pyplanet.convertFileNameToWindowsStyle(*args)
convertFileNameToWindowsStyle = _pyplanet.convertFileNameToWindowsStyle

def convertFileNameToUnixStyle(*args):
  return _pyplanet.convertFileNameToUnixStyle(*args)
convertFileNameToUnixStyle = _pyplanet.convertFileNameToUnixStyle

def convertToLowerCase(*args):
  return _pyplanet.convertToLowerCase(*args)
convertToLowerCase = _pyplanet.convertToLowerCase

def getNativePathSeparator():
  return _pyplanet.getNativePathSeparator()
getNativePathSeparator = _pyplanet.getNativePathSeparator

def isFileNameNativeStyle(*args):
  return _pyplanet.isFileNameNativeStyle(*args)
isFileNameNativeStyle = _pyplanet.isFileNameNativeStyle

def convertFileNameToNativeStyle(*args):
  return _pyplanet.convertFileNameToNativeStyle(*args)
convertFileNameToNativeStyle = _pyplanet.convertFileNameToNativeStyle

def containsServerAddress(*args):
  return _pyplanet.containsServerAddress(*args)
containsServerAddress = _pyplanet.containsServerAddress

def getServerProtocol(*args):
  return _pyplanet.getServerProtocol(*args)
getServerProtocol = _pyplanet.getServerProtocol

def getServerAddress(*args):
  return _pyplanet.getServerAddress(*args)
getServerAddress = _pyplanet.getServerAddress

def getServerFileName(*args):
  return _pyplanet.getServerFileName(*args)
getServerFileName = _pyplanet.getServerFileName

def concatPaths(*args):
  return _pyplanet.concatPaths(*args)
concatPaths = _pyplanet.concatPaths

def getRealPath(*args):
  return _pyplanet.getRealPath(*args)
getRealPath = _pyplanet.getRealPath

def getPathElements(*args):
  return _pyplanet.getPathElements(*args)
getPathElements = _pyplanet.getPathElements
OSGDB_DYNAMICLIBRARY = _pyplanet.OSGDB_DYNAMICLIBRARY
class DynamicLibrary(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DynamicLibrary, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DynamicLibrary, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["loadLibrary"] = lambda x: _pyplanet.DynamicLibrary_loadLibrary
    if _newclass:loadLibrary = staticmethod(_pyplanet.DynamicLibrary_loadLibrary)
    def getName(self): return _pyplanet.DynamicLibrary_getName(self)
    def getFullName(self): return _pyplanet.DynamicLibrary_getFullName(self)
    def getHandle(self): return _pyplanet.DynamicLibrary_getHandle(self)
    def getProcAddress(self, *args): return _pyplanet.DynamicLibrary_getProcAddress(self, *args)
DynamicLibrary_swigregister = _pyplanet.DynamicLibrary_swigregister
DynamicLibrary_swigregister(DynamicLibrary)

def findFileInPath(*args):
  return _pyplanet.findFileInPath(*args)
findFileInPath = _pyplanet.findFileInPath

def findFileInDirectory(*args):
  return _pyplanet.findFileInDirectory(*args)
findFileInDirectory = _pyplanet.findFileInDirectory

def setDataFilePathList(*args):
  return _pyplanet.setDataFilePathList(*args)
setDataFilePathList = _pyplanet.setDataFilePathList

def findDataFile(*args):
  return _pyplanet.findDataFile(*args)
findDataFile = _pyplanet.findDataFile

def setLibraryFilePathList(*args):
  return _pyplanet.setLibraryFilePathList(*args)
setLibraryFilePathList = _pyplanet.setLibraryFilePathList

def findLibraryFile(*args):
  return _pyplanet.findLibraryFile(*args)
findLibraryFile = _pyplanet.findLibraryFile
cvar = _pyplanet.cvar
UNIX_PATH_SEPARATOR = cvar.UNIX_PATH_SEPARATOR
WINDOWS_PATH_SEPARATOR = cvar.WINDOWS_PATH_SEPARATOR

def equalCaseInsensitive(*args):
  return _pyplanet.equalCaseInsensitive(*args)
equalCaseInsensitive = _pyplanet.equalCaseInsensitive

def DynamicLibrary_loadLibrary(*args):
  return _pyplanet.DynamicLibrary_loadLibrary(*args)
DynamicLibrary_loadLibrary = _pyplanet.DynamicLibrary_loadLibrary

OSGDB_DATABASEPAGER = _pyplanet.OSGDB_DATABASEPAGER
class DatabasePager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatabasePager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatabasePager, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_DatabasePager(*args)
        try: self.this.append(this)
        except: self.this = this
    def className(self): return _pyplanet.DatabasePager_className(self)
    def clone(self): return _pyplanet.DatabasePager_clone(self)
    __swig_getmethods__["prototype"] = lambda x: _pyplanet.DatabasePager_prototype
    if _newclass:prototype = staticmethod(_pyplanet.DatabasePager_prototype)
    __swig_getmethods__["create"] = lambda x: _pyplanet.DatabasePager_create
    if _newclass:create = staticmethod(_pyplanet.DatabasePager_create)
    def requestNodeFile(self, *args): return _pyplanet.DatabasePager_requestNodeFile(self, *args)
    def setSchedulePriority(self, *args): return _pyplanet.DatabasePager_setSchedulePriority(self, *args)
    def cancel(self): return _pyplanet.DatabasePager_cancel(self)
    def isRunning(self): return _pyplanet.DatabasePager_isRunning(self)
    def clear(self): return _pyplanet.DatabasePager_clear(self)
    def setUpThreads(self, totalNumThreads = 2, numHttpThreads = 1): return _pyplanet.DatabasePager_setUpThreads(self, totalNumThreads, numHttpThreads)
    def setDatabasePagerThreadPause(self, *args): return _pyplanet.DatabasePager_setDatabasePagerThreadPause(self, *args)
    def getDatabasePagerThreadPause(self): return _pyplanet.DatabasePager_getDatabasePagerThreadPause(self)
    def setAcceptNewDatabaseRequests(self, *args): return _pyplanet.DatabasePager_setAcceptNewDatabaseRequests(self, *args)
    def getAcceptNewDatabaseRequests(self): return _pyplanet.DatabasePager_getAcceptNewDatabaseRequests(self)
    def getNumFramesActive(self): return _pyplanet.DatabasePager_getNumFramesActive(self)
    def signalBeginFrame(self, *args): return _pyplanet.DatabasePager_signalBeginFrame(self, *args)
    def signalEndFrame(self): return _pyplanet.DatabasePager_signalEndFrame(self)
    def registerPagedLODs(self, *args): return _pyplanet.DatabasePager_registerPagedLODs(self, *args)
    def setIncrementalCompileOperation(self, *args): return _pyplanet.DatabasePager_setIncrementalCompileOperation(self, *args)
    def getIncrementalCompileOperation(self): return _pyplanet.DatabasePager_getIncrementalCompileOperation(self)
    def setDoPreCompile(self, *args): return _pyplanet.DatabasePager_setDoPreCompile(self, *args)
    def getDoPreCompile(self): return _pyplanet.DatabasePager_getDoPreCompile(self)
    def setTargetMaximumNumberOfPageLOD(self, *args): return _pyplanet.DatabasePager_setTargetMaximumNumberOfPageLOD(self, *args)
    def getTargetMaximumNumberOfPageLOD(self): return _pyplanet.DatabasePager_getTargetMaximumNumberOfPageLOD(self)
    def setDeleteRemovedSubgraphsInDatabaseThread(self, *args): return _pyplanet.DatabasePager_setDeleteRemovedSubgraphsInDatabaseThread(self, *args)
    def getDeleteRemovedSubgraphsInDatabaseThread(self): return _pyplanet.DatabasePager_getDeleteRemovedSubgraphsInDatabaseThread(self)
    DO_NOT_MODIFY_DRAWABLE_SETTINGS = _pyplanet.DatabasePager_DO_NOT_MODIFY_DRAWABLE_SETTINGS
    USE_DISPLAY_LISTS = _pyplanet.DatabasePager_USE_DISPLAY_LISTS
    USE_VERTEX_BUFFER_OBJECTS = _pyplanet.DatabasePager_USE_VERTEX_BUFFER_OBJECTS
    USE_VERTEX_ARRAYS = _pyplanet.DatabasePager_USE_VERTEX_ARRAYS
    def setDrawablePolicy(self, *args): return _pyplanet.DatabasePager_setDrawablePolicy(self, *args)
    def getDrawablePolicy(self): return _pyplanet.DatabasePager_getDrawablePolicy(self)
    def setApplyPBOToImages(self, *args): return _pyplanet.DatabasePager_setApplyPBOToImages(self, *args)
    def getApplyPBOToImages(self): return _pyplanet.DatabasePager_getApplyPBOToImages(self)
    def setUnrefImageDataAfterApplyPolicy(self, *args): return _pyplanet.DatabasePager_setUnrefImageDataAfterApplyPolicy(self, *args)
    def getUnrefImageDataAfterApplyPolicy(self, *args): return _pyplanet.DatabasePager_getUnrefImageDataAfterApplyPolicy(self, *args)
    def setMaxAnisotropyPolicy(self, *args): return _pyplanet.DatabasePager_setMaxAnisotropyPolicy(self, *args)
    def getMaxAnisotropyPolicy(self, *args): return _pyplanet.DatabasePager_getMaxAnisotropyPolicy(self, *args)
    def requiresUpdateSceneGraph(self): return _pyplanet.DatabasePager_requiresUpdateSceneGraph(self)
    def updateSceneGraph(self, *args): return _pyplanet.DatabasePager_updateSceneGraph(self, *args)
    def getFileRequestListSize(self): return _pyplanet.DatabasePager_getFileRequestListSize(self)
    def getDataToCompileListSize(self): return _pyplanet.DatabasePager_getDataToCompileListSize(self)
    def getDataToMergeListSize(self): return _pyplanet.DatabasePager_getDataToMergeListSize(self)
    def getRequestsInProgress(self): return _pyplanet.DatabasePager_getRequestsInProgress(self)
    def getMinimumTimeToMergeTile(self): return _pyplanet.DatabasePager_getMinimumTimeToMergeTile(self)
    def getMaximumTimeToMergeTile(self): return _pyplanet.DatabasePager_getMaximumTimeToMergeTile(self)
    def getAverageTimeToMergeTiles(self): return _pyplanet.DatabasePager_getAverageTimeToMergeTiles(self)
    def resetStats(self): return _pyplanet.DatabasePager_resetStats(self)
DatabasePager_swigregister = _pyplanet.DatabasePager_swigregister
DatabasePager_swigregister(DatabasePager)

def DatabasePager_prototype():
  return _pyplanet.DatabasePager_prototype()
DatabasePager_prototype = _pyplanet.DatabasePager_prototype

def DatabasePager_create():
  return _pyplanet.DatabasePager_create()
DatabasePager_create = _pyplanet.DatabasePager_create

OSGDB_ARCHIVE = _pyplanet.OSGDB_ARCHIVE
class Archive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Archive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Archive, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyplanet.delete_Archive
    __del__ = lambda self : None;
    def libraryName(self): return _pyplanet.Archive_libraryName(self)
    def className(self): return _pyplanet.Archive_className(self)
    def acceptsExtension(self, *args): return _pyplanet.Archive_acceptsExtension(self, *args)
    def close(self): return _pyplanet.Archive_close(self)
    def getArchiveFileName(self): return _pyplanet.Archive_getArchiveFileName(self)
    def getMasterFileName(self): return _pyplanet.Archive_getMasterFileName(self)
    def fileExists(self, *args): return _pyplanet.Archive_fileExists(self, *args)
    def getFileType(self, *args): return _pyplanet.Archive_getFileType(self, *args)
    def getFileNames(self, *args): return _pyplanet.Archive_getFileNames(self, *args)
    def getDirectoryContents(self, *args): return _pyplanet.Archive_getDirectoryContents(self, *args)
    def readShader(self, *args): return _pyplanet.Archive_readShader(self, *args)
    def writeShader(self, *args): return _pyplanet.Archive_writeShader(self, *args)
Archive_swigregister = _pyplanet.Archive_swigregister
Archive_swigregister(Archive)

OSGDB_DOTOSGWRAPPER = _pyplanet.OSGDB_DOTOSGWRAPPER
class DotOsgWrapper(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DotOsgWrapper, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DotOsgWrapper, name)
    __repr__ = _swig_repr
    READ_AND_WRITE = _pyplanet.DotOsgWrapper_READ_AND_WRITE
    READ_ONLY = _pyplanet.DotOsgWrapper_READ_ONLY
    def __init__(self, *args): 
        this = _pyplanet.new_DotOsgWrapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPrototype(self): return _pyplanet.DotOsgWrapper_getPrototype(self)
    def getName(self): return _pyplanet.DotOsgWrapper_getName(self)
    def getAssociates(self): return _pyplanet.DotOsgWrapper_getAssociates(self)
    def getReadFunc(self): return _pyplanet.DotOsgWrapper_getReadFunc(self)
    def getWriteFunc(self): return _pyplanet.DotOsgWrapper_getWriteFunc(self)
    def getReadWriteMode(self): return _pyplanet.DotOsgWrapper_getReadWriteMode(self)
DotOsgWrapper_swigregister = _pyplanet.DotOsgWrapper_swigregister
DotOsgWrapper_swigregister(DotOsgWrapper)

def openArchive(*args):
  return _pyplanet.openArchive(*args)
openArchive = _pyplanet.openArchive

class DeprecatedDotOsgWrapperManager(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeprecatedDotOsgWrapperManager, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeprecatedDotOsgWrapperManager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_DeprecatedDotOsgWrapperManager()
        try: self.this.append(this)
        except: self.this = this
    def addDotOsgWrapper(self, *args): return _pyplanet.DeprecatedDotOsgWrapperManager_addDotOsgWrapper(self, *args)
    def removeDotOsgWrapper(self, *args): return _pyplanet.DeprecatedDotOsgWrapperManager_removeDotOsgWrapper(self, *args)
    def readObjectOfType(self, *args): return _pyplanet.DeprecatedDotOsgWrapperManager_readObjectOfType(self, *args)
    def readObject(self, *args): return _pyplanet.DeprecatedDotOsgWrapperManager_readObject(self, *args)
    def readImage(self, *args): return _pyplanet.DeprecatedDotOsgWrapperManager_readImage(self, *args)
    def readDrawable(self, *args): return _pyplanet.DeprecatedDotOsgWrapperManager_readDrawable(self, *args)
    def readUniform(self, *args): return _pyplanet.DeprecatedDotOsgWrapperManager_readUniform(self, *args)
    def readStateAttribute(self, *args): return _pyplanet.DeprecatedDotOsgWrapperManager_readStateAttribute(self, *args)
    def readNode(self, *args): return _pyplanet.DeprecatedDotOsgWrapperManager_readNode(self, *args)
    def readShader(self, *args): return _pyplanet.DeprecatedDotOsgWrapperManager_readShader(self, *args)
    def writeObject(self, *args): return _pyplanet.DeprecatedDotOsgWrapperManager_writeObject(self, *args)
    def getLibraryFileNamesToTry(self, *args): return _pyplanet.DeprecatedDotOsgWrapperManager_getLibraryFileNamesToTry(self, *args)
DeprecatedDotOsgWrapperManager_swigregister = _pyplanet.DeprecatedDotOsgWrapperManager_swigregister
DeprecatedDotOsgWrapperManager_swigregister(DeprecatedDotOsgWrapperManager)

class RegisterDotOsgWrapperProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegisterDotOsgWrapperProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegisterDotOsgWrapperProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_RegisterDotOsgWrapperProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_RegisterDotOsgWrapperProxy
    __del__ = lambda self : None;
RegisterDotOsgWrapperProxy_swigregister = _pyplanet.RegisterDotOsgWrapperProxy_swigregister
RegisterDotOsgWrapperProxy_swigregister(RegisterDotOsgWrapperProxy)

OSGDB_REGISTRY = _pyplanet.OSGDB_REGISTRY
class basic_type_wrapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, basic_type_wrapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, basic_type_wrapper, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyplanet.delete_basic_type_wrapper
    __del__ = lambda self : None;
    def matches(self, *args): return _pyplanet.basic_type_wrapper_matches(self, *args)
basic_type_wrapper_swigregister = _pyplanet.basic_type_wrapper_swigregister
basic_type_wrapper_swigregister(basic_type_wrapper)

class Registry(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Registry, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Registry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyplanet.Registry_instance
    if _newclass:instance = staticmethod(_pyplanet.Registry_instance)
    def readCommandLine(self, *args): return _pyplanet.Registry_readCommandLine(self, *args)
    def addFileExtensionAlias(self, *args): return _pyplanet.Registry_addFileExtensionAlias(self, *args)
    def readPluginAliasConfigurationFile(self, *args): return _pyplanet.Registry_readPluginAliasConfigurationFile(self, *args)
    def addMimeTypeExtensionMapping(self, *args): return _pyplanet.Registry_addMimeTypeExtensionMapping(self, *args)
    def addReaderWriter(self, *args): return _pyplanet.Registry_addReaderWriter(self, *args)
    def removeReaderWriter(self, *args): return _pyplanet.Registry_removeReaderWriter(self, *args)
    def addImageProcessor(self, *args): return _pyplanet.Registry_addImageProcessor(self, *args)
    def removeImageProcessor(self, *args): return _pyplanet.Registry_removeImageProcessor(self, *args)
    def createLibraryNameForFile(self, *args): return _pyplanet.Registry_createLibraryNameForFile(self, *args)
    def createLibraryNameForExtension(self, *args): return _pyplanet.Registry_createLibraryNameForExtension(self, *args)
    def createLibraryNameForNodeKit(self, *args): return _pyplanet.Registry_createLibraryNameForNodeKit(self, *args)
    NOT_LOADED = _pyplanet.Registry_NOT_LOADED
    PREVIOUSLY_LOADED = _pyplanet.Registry_PREVIOUSLY_LOADED
    LOADED = _pyplanet.Registry_LOADED
    def loadLibrary(self, *args): return _pyplanet.Registry_loadLibrary(self, *args)
    def closeLibrary(self, *args): return _pyplanet.Registry_closeLibrary(self, *args)
    def closeAllLibraries(self): return _pyplanet.Registry_closeAllLibraries(self)
    def getReaderWriterForExtension(self, *args): return _pyplanet.Registry_getReaderWriterForExtension(self, *args)
    def getReaderWriterForMimeType(self, *args): return _pyplanet.Registry_getReaderWriterForMimeType(self, *args)
    def getReaderWriterList(self, *args): return _pyplanet.Registry_getReaderWriterList(self, *args)
    def getImageProcessor(self): return _pyplanet.Registry_getImageProcessor(self)
    def getImageProcessorForExtension(self, *args): return _pyplanet.Registry_getImageProcessorForExtension(self, *args)
    def getImageProcessorList(self, *args): return _pyplanet.Registry_getImageProcessorList(self, *args)
    def setFindFileCallback(self, *args): return _pyplanet.Registry_setFindFileCallback(self, *args)
    def getFindFileCallback(self, *args): return _pyplanet.Registry_getFindFileCallback(self, *args)
    def findDataFile(self, *args): return _pyplanet.Registry_findDataFile(self, *args)
    def findDataFileImplementation(self, *args): return _pyplanet.Registry_findDataFileImplementation(self, *args)
    def findLibraryFile(self, *args): return _pyplanet.Registry_findLibraryFile(self, *args)
    def findLibraryFileImplementation(self, *args): return _pyplanet.Registry_findLibraryFileImplementation(self, *args)
    def openArchive(self, *args): return _pyplanet.Registry_openArchive(self, *args)
    def openArchiveImplementation(self, *args): return _pyplanet.Registry_openArchiveImplementation(self, *args)
    def readObject(self, *args): return _pyplanet.Registry_readObject(self, *args)
    def readObjectImplementation(self, *args): return _pyplanet.Registry_readObjectImplementation(self, *args)
    def readImage(self, *args): return _pyplanet.Registry_readImage(self, *args)
    def readImageImplementation(self, *args): return _pyplanet.Registry_readImageImplementation(self, *args)
    def readHeightField(self, *args): return _pyplanet.Registry_readHeightField(self, *args)
    def readHeightFieldImplementation(self, *args): return _pyplanet.Registry_readHeightFieldImplementation(self, *args)
    def readNode(self, *args): return _pyplanet.Registry_readNode(self, *args)
    def readNodeImplementation(self, *args): return _pyplanet.Registry_readNodeImplementation(self, *args)
    def readShader(self, *args): return _pyplanet.Registry_readShader(self, *args)
    def readShaderImplementation(self, *args): return _pyplanet.Registry_readShaderImplementation(self, *args)
    def writeObject(self, *args): return _pyplanet.Registry_writeObject(self, *args)
    def writeObjectImplementation(self, *args): return _pyplanet.Registry_writeObjectImplementation(self, *args)
    def writeImage(self, *args): return _pyplanet.Registry_writeImage(self, *args)
    def writeImageImplementation(self, *args): return _pyplanet.Registry_writeImageImplementation(self, *args)
    def writeHeightField(self, *args): return _pyplanet.Registry_writeHeightField(self, *args)
    def writeHeightFieldImplementation(self, *args): return _pyplanet.Registry_writeHeightFieldImplementation(self, *args)
    def writeNode(self, *args): return _pyplanet.Registry_writeNode(self, *args)
    def writeNodeImplementation(self, *args): return _pyplanet.Registry_writeNodeImplementation(self, *args)
    def writeShader(self, *args): return _pyplanet.Registry_writeShader(self, *args)
    def writeShaderImplementation(self, *args): return _pyplanet.Registry_writeShaderImplementation(self, *args)
    def _buildKdTreeIfRequired(self, *args): return _pyplanet.Registry__buildKdTreeIfRequired(self, *args)
    def setFileLocationCallback(self, *args): return _pyplanet.Registry_setFileLocationCallback(self, *args)
    def getFileLocationCallback(self): return _pyplanet.Registry_getFileLocationCallback(self)
    def setBuildKdTreesHint(self, *args): return _pyplanet.Registry_setBuildKdTreesHint(self, *args)
    def getBuildKdTreesHint(self): return _pyplanet.Registry_getBuildKdTreesHint(self)
    def setKdTreeBuilder(self, *args): return _pyplanet.Registry_setKdTreeBuilder(self, *args)
    def getKdTreeBuilder(self): return _pyplanet.Registry_getKdTreeBuilder(self)
    def setFileCache(self, *args): return _pyplanet.Registry_setFileCache(self, *args)
    def getFileCache(self, *args): return _pyplanet.Registry_getFileCache(self, *args)
    def setAuthenticationMap(self, *args): return _pyplanet.Registry_setAuthenticationMap(self, *args)
    def getAuthenticationMap(self, *args): return _pyplanet.Registry_getAuthenticationMap(self, *args)
    def setCreateNodeFromImage(self, *args): return _pyplanet.Registry_setCreateNodeFromImage(self, *args)
    def getCreateNodeFromImage(self): return _pyplanet.Registry_getCreateNodeFromImage(self)
    def setOptions(self, *args): return _pyplanet.Registry_setOptions(self, *args)
    def getOptions(self, *args): return _pyplanet.Registry_getOptions(self, *args)
    def initFilePathLists(self): return _pyplanet.Registry_initFilePathLists(self)
    def initDataFilePathList(self): return _pyplanet.Registry_initDataFilePathList(self)
    def setDataFilePathList(self, *args): return _pyplanet.Registry_setDataFilePathList(self, *args)
    def getDataFilePathList(self, *args): return _pyplanet.Registry_getDataFilePathList(self, *args)
    def initLibraryFilePathList(self): return _pyplanet.Registry_initLibraryFilePathList(self)
    def setLibraryFilePathList(self, *args): return _pyplanet.Registry_setLibraryFilePathList(self, *args)
    def getLibraryFilePathList(self, *args): return _pyplanet.Registry_getLibraryFilePathList(self, *args)
    def updateTimeStampOfObjectsInCacheWithExternalReferences(self, *args): return _pyplanet.Registry_updateTimeStampOfObjectsInCacheWithExternalReferences(self, *args)
    def removeExpiredObjectsInCache(self, *args): return _pyplanet.Registry_removeExpiredObjectsInCache(self, *args)
    def setExpiryDelay(self, *args): return _pyplanet.Registry_setExpiryDelay(self, *args)
    def getExpiryDelay(self): return _pyplanet.Registry_getExpiryDelay(self)
    def clearObjectCache(self): return _pyplanet.Registry_clearObjectCache(self)
    def addEntryToObjectCache(self, *args): return _pyplanet.Registry_addEntryToObjectCache(self, *args)
    def getFromObjectCache(self, *args): return _pyplanet.Registry_getFromObjectCache(self, *args)
    def getRefFromObjectCache(self, *args): return _pyplanet.Registry_getRefFromObjectCache(self, *args)
    def addToArchiveCache(self, *args): return _pyplanet.Registry_addToArchiveCache(self, *args)
    def removeFromArchiveCache(self, *args): return _pyplanet.Registry_removeFromArchiveCache(self, *args)
    def getFromArchiveCache(self, *args): return _pyplanet.Registry_getFromArchiveCache(self, *args)
    def getRefFromArchiveCache(self, *args): return _pyplanet.Registry_getRefFromArchiveCache(self, *args)
    def clearArchiveCache(self): return _pyplanet.Registry_clearArchiveCache(self)
    def releaseGLObjects(self, state = None): return _pyplanet.Registry_releaseGLObjects(self, state)
    def getLibrary(self, *args): return _pyplanet.Registry_getLibrary(self, *args)
    def setSharedStateManager(self, *args): return _pyplanet.Registry_setSharedStateManager(self, *args)
    def getOrCreateSharedStateManager(self): return _pyplanet.Registry_getOrCreateSharedStateManager(self)
    def getSharedStateManager(self): return _pyplanet.Registry_getSharedStateManager(self)
    def addArchiveExtension(self, *args): return _pyplanet.Registry_addArchiveExtension(self, *args)
    def registerProtocol(self, *args): return _pyplanet.Registry_registerProtocol(self, *args)
    def isProtocolRegistered(self, *args): return _pyplanet.Registry_isProtocolRegistered(self, *args)
    def getObjectWrapperManager(self): return _pyplanet.Registry_getObjectWrapperManager(self)
    def getDeprecatedDotOsgObjectWrapperManager(self): return _pyplanet.Registry_getDeprecatedDotOsgObjectWrapperManager(self)
    def getArchiveExtensions(self): return _pyplanet.Registry_getArchiveExtensions(self)
Registry_swigregister = _pyplanet.Registry_swigregister
Registry_swigregister(Registry)

def Registry_instance(erase = False):
  return _pyplanet.Registry_instance(erase)
Registry_instance = _pyplanet.Registry_instance


def readCommandLine(*args):
  return _pyplanet.readCommandLine(*args)
readCommandLine = _pyplanet.readCommandLine
class PluginFunctionProxy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PluginFunctionProxy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PluginFunctionProxy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_PluginFunctionProxy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_PluginFunctionProxy
    __del__ = lambda self : None;
PluginFunctionProxy_swigregister = _pyplanet.PluginFunctionProxy_swigregister
PluginFunctionProxy_swigregister(PluginFunctionProxy)

OSG_ANIMATIONPATH = _pyplanet.OSG_ANIMATIONPATH
class AnimationPath(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationPath, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationPath, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self): return _pyplanet.AnimationPath_cloneType(self)
    def clone(self, *args): return _pyplanet.AnimationPath_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.AnimationPath_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.AnimationPath_libraryName(self)
    def className(self): return _pyplanet.AnimationPath_className(self)
    def getMatrix(self, *args): return _pyplanet.AnimationPath_getMatrix(self, *args)
    def getInverse(self, *args): return _pyplanet.AnimationPath_getInverse(self, *args)
    def getInterpolatedControlPoint(self, *args): return _pyplanet.AnimationPath_getInterpolatedControlPoint(self, *args)
    def insert(self, *args): return _pyplanet.AnimationPath_insert(self, *args)
    def getFirstTime(self): return _pyplanet.AnimationPath_getFirstTime(self)
    def getLastTime(self): return _pyplanet.AnimationPath_getLastTime(self)
    def getPeriod(self): return _pyplanet.AnimationPath_getPeriod(self)
    SWING = _pyplanet.AnimationPath_SWING
    LOOP = _pyplanet.AnimationPath_LOOP
    NO_LOOPING = _pyplanet.AnimationPath_NO_LOOPING
    def setLoopMode(self, *args): return _pyplanet.AnimationPath_setLoopMode(self, *args)
    def getLoopMode(self): return _pyplanet.AnimationPath_getLoopMode(self)
    def setTimeControlPointMap(self, *args): return _pyplanet.AnimationPath_setTimeControlPointMap(self, *args)
    def getTimeControlPointMap(self, *args): return _pyplanet.AnimationPath_getTimeControlPointMap(self, *args)
    def empty(self): return _pyplanet.AnimationPath_empty(self)
    def clear(self): return _pyplanet.AnimationPath_clear(self)
    def read(self, *args): return _pyplanet.AnimationPath_read(self, *args)
    def write(self, *args): return _pyplanet.AnimationPath_write(self, *args)
AnimationPath_swigregister = _pyplanet.AnimationPath_swigregister
AnimationPath_swigregister(AnimationPath)

class AnimationPathCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnimationPathCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnimationPathCallback, name)
    __repr__ = _swig_repr
    def cloneType(self): return _pyplanet.AnimationPathCallback_cloneType(self)
    def clone(self, *args): return _pyplanet.AnimationPathCallback_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.AnimationPathCallback_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.AnimationPathCallback_libraryName(self)
    def className(self): return _pyplanet.AnimationPathCallback_className(self)
    def __init__(self, *args): 
        this = _pyplanet.new_AnimationPathCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    def setAnimationPath(self, *args): return _pyplanet.AnimationPathCallback_setAnimationPath(self, *args)
    def getAnimationPath(self, *args): return _pyplanet.AnimationPathCallback_getAnimationPath(self, *args)
    def setPivotPoint(self, *args): return _pyplanet.AnimationPathCallback_setPivotPoint(self, *args)
    def getPivotPoint(self): return _pyplanet.AnimationPathCallback_getPivotPoint(self)
    def setUseInverseMatrix(self, *args): return _pyplanet.AnimationPathCallback_setUseInverseMatrix(self, *args)
    def getUseInverseMatrix(self): return _pyplanet.AnimationPathCallback_getUseInverseMatrix(self)
    def setTimeOffset(self, *args): return _pyplanet.AnimationPathCallback_setTimeOffset(self, *args)
    def getTimeOffset(self): return _pyplanet.AnimationPathCallback_getTimeOffset(self)
    def setTimeMultiplier(self, *args): return _pyplanet.AnimationPathCallback_setTimeMultiplier(self, *args)
    def getTimeMultiplier(self): return _pyplanet.AnimationPathCallback_getTimeMultiplier(self)
    def reset(self): return _pyplanet.AnimationPathCallback_reset(self)
    def setPause(self, *args): return _pyplanet.AnimationPathCallback_setPause(self, *args)
    def getPause(self): return _pyplanet.AnimationPathCallback_getPause(self)
    def getAnimationTime(self): return _pyplanet.AnimationPathCallback_getAnimationTime(self)
    def __call__(self, *args): return _pyplanet.AnimationPathCallback___call__(self, *args)
    def update(self, *args): return _pyplanet.AnimationPathCallback_update(self, *args)
    __swig_setmethods__["_animationPath"] = _pyplanet.AnimationPathCallback__animationPath_set
    __swig_getmethods__["_animationPath"] = _pyplanet.AnimationPathCallback__animationPath_get
    if _newclass:_animationPath = _swig_property(_pyplanet.AnimationPathCallback__animationPath_get, _pyplanet.AnimationPathCallback__animationPath_set)
    __swig_setmethods__["_pivotPoint"] = _pyplanet.AnimationPathCallback__pivotPoint_set
    __swig_getmethods__["_pivotPoint"] = _pyplanet.AnimationPathCallback__pivotPoint_get
    if _newclass:_pivotPoint = _swig_property(_pyplanet.AnimationPathCallback__pivotPoint_get, _pyplanet.AnimationPathCallback__pivotPoint_set)
    __swig_setmethods__["_useInverseMatrix"] = _pyplanet.AnimationPathCallback__useInverseMatrix_set
    __swig_getmethods__["_useInverseMatrix"] = _pyplanet.AnimationPathCallback__useInverseMatrix_get
    if _newclass:_useInverseMatrix = _swig_property(_pyplanet.AnimationPathCallback__useInverseMatrix_get, _pyplanet.AnimationPathCallback__useInverseMatrix_set)
    __swig_setmethods__["_timeOffset"] = _pyplanet.AnimationPathCallback__timeOffset_set
    __swig_getmethods__["_timeOffset"] = _pyplanet.AnimationPathCallback__timeOffset_get
    if _newclass:_timeOffset = _swig_property(_pyplanet.AnimationPathCallback__timeOffset_get, _pyplanet.AnimationPathCallback__timeOffset_set)
    __swig_setmethods__["_timeMultiplier"] = _pyplanet.AnimationPathCallback__timeMultiplier_set
    __swig_getmethods__["_timeMultiplier"] = _pyplanet.AnimationPathCallback__timeMultiplier_get
    if _newclass:_timeMultiplier = _swig_property(_pyplanet.AnimationPathCallback__timeMultiplier_get, _pyplanet.AnimationPathCallback__timeMultiplier_set)
    __swig_setmethods__["_firstTime"] = _pyplanet.AnimationPathCallback__firstTime_set
    __swig_getmethods__["_firstTime"] = _pyplanet.AnimationPathCallback__firstTime_get
    if _newclass:_firstTime = _swig_property(_pyplanet.AnimationPathCallback__firstTime_get, _pyplanet.AnimationPathCallback__firstTime_set)
    __swig_setmethods__["_latestTime"] = _pyplanet.AnimationPathCallback__latestTime_set
    __swig_getmethods__["_latestTime"] = _pyplanet.AnimationPathCallback__latestTime_get
    if _newclass:_latestTime = _swig_property(_pyplanet.AnimationPathCallback__latestTime_get, _pyplanet.AnimationPathCallback__latestTime_set)
    __swig_setmethods__["_pause"] = _pyplanet.AnimationPathCallback__pause_set
    __swig_getmethods__["_pause"] = _pyplanet.AnimationPathCallback__pause_get
    if _newclass:_pause = _swig_property(_pyplanet.AnimationPathCallback__pause_get, _pyplanet.AnimationPathCallback__pause_set)
    __swig_setmethods__["_pauseTime"] = _pyplanet.AnimationPathCallback__pauseTime_set
    __swig_getmethods__["_pauseTime"] = _pyplanet.AnimationPathCallback__pauseTime_get
    if _newclass:_pauseTime = _swig_property(_pyplanet.AnimationPathCallback__pauseTime_get, _pyplanet.AnimationPathCallback__pauseTime_set)
AnimationPathCallback_swigregister = _pyplanet.AnimationPathCallback_swigregister
AnimationPathCallback_swigregister(AnimationPathCallback)

OSG_GEODE = _pyplanet.OSG_GEODE
class Geode(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geode, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Geode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Geode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.Geode_cloneType(self)
    def clone(self, *args): return _pyplanet.Geode_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Geode_isSameKindAs(self, *args)
    def className(self): return _pyplanet.Geode_className(self)
    def libraryName(self): return _pyplanet.Geode_libraryName(self)
    def accept(self, *args): return _pyplanet.Geode_accept(self, *args)
    def asGeode(self, *args): return _pyplanet.Geode_asGeode(self, *args)
    def addDrawable(self, *args): return _pyplanet.Geode_addDrawable(self, *args)
    def removeDrawable(self, *args): return _pyplanet.Geode_removeDrawable(self, *args)
    def removeDrawables(self, *args): return _pyplanet.Geode_removeDrawables(self, *args)
    def replaceDrawable(self, *args): return _pyplanet.Geode_replaceDrawable(self, *args)
    def setDrawable(self, *args): return _pyplanet.Geode_setDrawable(self, *args)
    def getNumDrawables(self): return _pyplanet.Geode_getNumDrawables(self)
    def getDrawable(self, *args): return _pyplanet.Geode_getDrawable(self, *args)
    def containsDrawable(self, *args): return _pyplanet.Geode_containsDrawable(self, *args)
    def getDrawableIndex(self, *args): return _pyplanet.Geode_getDrawableIndex(self, *args)
    def getDrawableList(self): return _pyplanet.Geode_getDrawableList(self)
    def compileDrawables(self, *args): return _pyplanet.Geode_compileDrawables(self, *args)
    def getBoundingBox(self): return _pyplanet.Geode_getBoundingBox(self)
    def computeBound(self): return _pyplanet.Geode_computeBound(self)
    def resizeGLObjectBuffers(self, *args): return _pyplanet.Geode_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, arg0 = None): return _pyplanet.Geode_releaseGLObjects(self, arg0)
Geode_swigregister = _pyplanet.Geode_swigregister
Geode_swigregister(Geode)

OSG_GROUP = _pyplanet.OSG_GROUP
class Group(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Group(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.Group_cloneType(self)
    def clone(self, *args): return _pyplanet.Group_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Group_isSameKindAs(self, *args)
    def className(self): return _pyplanet.Group_className(self)
    def libraryName(self): return _pyplanet.Group_libraryName(self)
    def accept(self, *args): return _pyplanet.Group_accept(self, *args)
    def asGroup(self, *args): return _pyplanet.Group_asGroup(self, *args)
    def traverse(self, *args): return _pyplanet.Group_traverse(self, *args)
    def addChild(self, *args): return _pyplanet.Group_addChild(self, *args)
    def insertChild(self, *args): return _pyplanet.Group_insertChild(self, *args)
    def removeChild(self, *args): return _pyplanet.Group_removeChild(self, *args)
    def removeChildren(self, *args): return _pyplanet.Group_removeChildren(self, *args)
    def replaceChild(self, *args): return _pyplanet.Group_replaceChild(self, *args)
    def getNumChildren(self): return _pyplanet.Group_getNumChildren(self)
    def setChild(self, *args): return _pyplanet.Group_setChild(self, *args)
    def getChild(self, *args): return _pyplanet.Group_getChild(self, *args)
    def containsNode(self, *args): return _pyplanet.Group_containsNode(self, *args)
    def getChildIndex(self, *args): return _pyplanet.Group_getChildIndex(self, *args)
    def resizeGLObjectBuffers(self, *args): return _pyplanet.Group_resizeGLObjectBuffers(self, *args)
    def releaseGLObjects(self, arg0 = None): return _pyplanet.Group_releaseGLObjects(self, arg0)
    def computeBound(self): return _pyplanet.Group_computeBound(self)
Group_swigregister = _pyplanet.Group_swigregister
Group_swigregister(Group)

OSG_TRANSFORM = _pyplanet.OSG_TRANSFORM
GL_RESCALE_NORMAL = _pyplanet.GL_RESCALE_NORMAL
GL_NORMALIZE = _pyplanet.GL_NORMALIZE
class Transform(Group):
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transform, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Transform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Transform(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.Transform_cloneType(self)
    def clone(self, *args): return _pyplanet.Transform_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Transform_isSameKindAs(self, *args)
    def className(self): return _pyplanet.Transform_className(self)
    def libraryName(self): return _pyplanet.Transform_libraryName(self)
    def accept(self, *args): return _pyplanet.Transform_accept(self, *args)
    def asTransform(self, *args): return _pyplanet.Transform_asTransform(self, *args)
    def asMatrixTransform(self, *args): return _pyplanet.Transform_asMatrixTransform(self, *args)
    def asPositionAttitudeTransform(self, *args): return _pyplanet.Transform_asPositionAttitudeTransform(self, *args)
    RELATIVE_RF = _pyplanet.Transform_RELATIVE_RF
    ABSOLUTE_RF = _pyplanet.Transform_ABSOLUTE_RF
    ABSOLUTE_RF_INHERIT_VIEWPOINT = _pyplanet.Transform_ABSOLUTE_RF_INHERIT_VIEWPOINT
    def setReferenceFrame(self, *args): return _pyplanet.Transform_setReferenceFrame(self, *args)
    def getReferenceFrame(self): return _pyplanet.Transform_getReferenceFrame(self)
    def computeLocalToWorldMatrix(self, *args): return _pyplanet.Transform_computeLocalToWorldMatrix(self, *args)
    def computeWorldToLocalMatrix(self, *args): return _pyplanet.Transform_computeWorldToLocalMatrix(self, *args)
    def computeBound(self): return _pyplanet.Transform_computeBound(self)
Transform_swigregister = _pyplanet.Transform_swigregister
Transform_swigregister(Transform)

def computeLocalToWorld(*args):
  return _pyplanet.computeLocalToWorld(*args)
computeLocalToWorld = _pyplanet.computeLocalToWorld

def computeWorldToLocal(*args):
  return _pyplanet.computeWorldToLocal(*args)
computeWorldToLocal = _pyplanet.computeWorldToLocal

def computeLocalToEye(*args):
  return _pyplanet.computeLocalToEye(*args)
computeLocalToEye = _pyplanet.computeLocalToEye

def computeEyeToLocal(*args):
  return _pyplanet.computeEyeToLocal(*args)
computeEyeToLocal = _pyplanet.computeEyeToLocal

OSG_IMAGE = _pyplanet.OSG_IMAGE
GL_BGR = _pyplanet.GL_BGR
GL_BGRA = _pyplanet.GL_BGRA
GL_UNSIGNED_BYTE_3_3_2 = _pyplanet.GL_UNSIGNED_BYTE_3_3_2
GL_UNSIGNED_BYTE_2_3_3_REV = _pyplanet.GL_UNSIGNED_BYTE_2_3_3_REV
GL_UNSIGNED_SHORT_5_6_5 = _pyplanet.GL_UNSIGNED_SHORT_5_6_5
GL_UNSIGNED_SHORT_5_6_5_REV = _pyplanet.GL_UNSIGNED_SHORT_5_6_5_REV
GL_UNSIGNED_SHORT_4_4_4_4 = _pyplanet.GL_UNSIGNED_SHORT_4_4_4_4
GL_UNSIGNED_SHORT_4_4_4_4_REV = _pyplanet.GL_UNSIGNED_SHORT_4_4_4_4_REV
GL_UNSIGNED_SHORT_5_5_5_1 = _pyplanet.GL_UNSIGNED_SHORT_5_5_5_1
GL_UNSIGNED_SHORT_1_5_5_5_REV = _pyplanet.GL_UNSIGNED_SHORT_1_5_5_5_REV
GL_UNSIGNED_INT_8_8_8_8 = _pyplanet.GL_UNSIGNED_INT_8_8_8_8
GL_UNSIGNED_INT_8_8_8_8_REV = _pyplanet.GL_UNSIGNED_INT_8_8_8_8_REV
GL_UNSIGNED_INT_10_10_10_2 = _pyplanet.GL_UNSIGNED_INT_10_10_10_2
GL_UNSIGNED_INT_2_10_10_10_REV = _pyplanet.GL_UNSIGNED_INT_2_10_10_10_REV
GL_COMPRESSED_ALPHA = _pyplanet.GL_COMPRESSED_ALPHA
GL_COMPRESSED_LUMINANCE = _pyplanet.GL_COMPRESSED_LUMINANCE
GL_COMPRESSED_LUMINANCE_ALPHA = _pyplanet.GL_COMPRESSED_LUMINANCE_ALPHA
GL_COMPRESSED_INTENSITY = _pyplanet.GL_COMPRESSED_INTENSITY
GL_COMPRESSED_RGB = _pyplanet.GL_COMPRESSED_RGB
GL_COMPRESSED_RGBA = _pyplanet.GL_COMPRESSED_RGBA
GL_ABGR_EXT = _pyplanet.GL_ABGR_EXT
GL_PACK_SKIP_IMAGES = _pyplanet.GL_PACK_SKIP_IMAGES
GL_PACK_IMAGE_HEIGHT = _pyplanet.GL_PACK_IMAGE_HEIGHT
GL_UNPACK_SKIP_IMAGES = _pyplanet.GL_UNPACK_SKIP_IMAGES
GL_UNPACK_IMAGE_HEIGHT = _pyplanet.GL_UNPACK_IMAGE_HEIGHT
class Image(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_Image(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.Image_cloneType(self)
    def clone(self, *args): return _pyplanet.Image_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.Image_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.Image_libraryName(self)
    def className(self): return _pyplanet.Image_className(self)
    def getDataPointer(self): return _pyplanet.Image_getDataPointer(self)
    def getTotalDataSize(self): return _pyplanet.Image_getTotalDataSize(self)
    def compare(self, *args): return _pyplanet.Image_compare(self, *args)
    def setFileName(self, *args): return _pyplanet.Image_setFileName(self, *args)
    def getFileName(self): return _pyplanet.Image_getFileName(self)
    NO_PREFERENCE = _pyplanet.Image_NO_PREFERENCE
    STORE_INLINE = _pyplanet.Image_STORE_INLINE
    EXTERNAL_FILE = _pyplanet.Image_EXTERNAL_FILE
    def setWriteHint(self, *args): return _pyplanet.Image_setWriteHint(self, *args)
    def getWriteHint(self): return _pyplanet.Image_getWriteHint(self)
    NO_DELETE = _pyplanet.Image_NO_DELETE
    USE_NEW_DELETE = _pyplanet.Image_USE_NEW_DELETE
    USE_MALLOC_FREE = _pyplanet.Image_USE_MALLOC_FREE
    def setAllocationMode(self, *args): return _pyplanet.Image_setAllocationMode(self, *args)
    def getAllocationMode(self): return _pyplanet.Image_getAllocationMode(self)
    def allocateImage(self, *args): return _pyplanet.Image_allocateImage(self, *args)
    def setImage(self, *args): return _pyplanet.Image_setImage(self, *args)
    def readPixels(self, *args): return _pyplanet.Image_readPixels(self, *args)
    def readImageFromCurrentTexture(self, *args): return _pyplanet.Image_readImageFromCurrentTexture(self, *args)
    def scaleImage(self, *args): return _pyplanet.Image_scaleImage(self, *args)
    def copySubImage(self, *args): return _pyplanet.Image_copySubImage(self, *args)
    BOTTOM_LEFT = _pyplanet.Image_BOTTOM_LEFT
    TOP_LEFT = _pyplanet.Image_TOP_LEFT
    def setOrigin(self, *args): return _pyplanet.Image_setOrigin(self, *args)
    def getOrigin(self): return _pyplanet.Image_getOrigin(self)
    def s(self): return _pyplanet.Image_s(self)
    def t(self): return _pyplanet.Image_t(self)
    def r(self): return _pyplanet.Image_r(self)
    def setInternalTextureFormat(self, *args): return _pyplanet.Image_setInternalTextureFormat(self, *args)
    def getInternalTextureFormat(self): return _pyplanet.Image_getInternalTextureFormat(self)
    def setPixelFormat(self, *args): return _pyplanet.Image_setPixelFormat(self, *args)
    def getPixelFormat(self): return _pyplanet.Image_getPixelFormat(self)
    def setDataType(self, *args): return _pyplanet.Image_setDataType(self, *args)
    def getDataType(self): return _pyplanet.Image_getDataType(self)
    def setPacking(self, *args): return _pyplanet.Image_setPacking(self, *args)
    def getPacking(self): return _pyplanet.Image_getPacking(self)
    def isCompressed(self): return _pyplanet.Image_isCompressed(self)
    def setPixelAspectRatio(self, *args): return _pyplanet.Image_setPixelAspectRatio(self, *args)
    def getPixelAspectRatio(self): return _pyplanet.Image_getPixelAspectRatio(self)
    def getPixelSizeInBits(self): return _pyplanet.Image_getPixelSizeInBits(self)
    def getRowSizeInBytes(self): return _pyplanet.Image_getRowSizeInBytes(self)
    def getImageSizeInBytes(self): return _pyplanet.Image_getImageSizeInBytes(self)
    def getTotalSizeInBytes(self): return _pyplanet.Image_getTotalSizeInBytes(self)
    def getTotalSizeInBytesIncludingMipmaps(self): return _pyplanet.Image_getTotalSizeInBytesIncludingMipmaps(self)
    def valid(self): return _pyplanet.Image_valid(self)
    def data(self, *args): return _pyplanet.Image_data(self, *args)
    def getColor(self, *args): return _pyplanet.Image_getColor(self, *args)
    def flipHorizontal(self): return _pyplanet.Image_flipHorizontal(self)
    def flipVertical(self): return _pyplanet.Image_flipVertical(self)
    def ensureValidSizeForTexturing(self, *args): return _pyplanet.Image_ensureValidSizeForTexturing(self, *args)
    __swig_getmethods__["isPackedType"] = lambda x: _pyplanet.Image_isPackedType
    if _newclass:isPackedType = staticmethod(_pyplanet.Image_isPackedType)
    __swig_getmethods__["computePixelFormat"] = lambda x: _pyplanet.Image_computePixelFormat
    if _newclass:computePixelFormat = staticmethod(_pyplanet.Image_computePixelFormat)
    __swig_getmethods__["computeFormatDataType"] = lambda x: _pyplanet.Image_computeFormatDataType
    if _newclass:computeFormatDataType = staticmethod(_pyplanet.Image_computeFormatDataType)
    __swig_getmethods__["computeNumComponents"] = lambda x: _pyplanet.Image_computeNumComponents
    if _newclass:computeNumComponents = staticmethod(_pyplanet.Image_computeNumComponents)
    __swig_getmethods__["computePixelSizeInBits"] = lambda x: _pyplanet.Image_computePixelSizeInBits
    if _newclass:computePixelSizeInBits = staticmethod(_pyplanet.Image_computePixelSizeInBits)
    __swig_getmethods__["computeRowWidthInBytes"] = lambda x: _pyplanet.Image_computeRowWidthInBytes
    if _newclass:computeRowWidthInBytes = staticmethod(_pyplanet.Image_computeRowWidthInBytes)
    __swig_getmethods__["computeNearestPowerOfTwo"] = lambda x: _pyplanet.Image_computeNearestPowerOfTwo
    if _newclass:computeNearestPowerOfTwo = staticmethod(_pyplanet.Image_computeNearestPowerOfTwo)
    __swig_getmethods__["computeNumberOfMipmapLevels"] = lambda x: _pyplanet.Image_computeNumberOfMipmapLevels
    if _newclass:computeNumberOfMipmapLevels = staticmethod(_pyplanet.Image_computeNumberOfMipmapLevels)
    def isMipmap(self): return _pyplanet.Image_isMipmap(self)
    def getNumMipmapLevels(self): return _pyplanet.Image_getNumMipmapLevels(self)
    def setMipmapLevels(self, *args): return _pyplanet.Image_setMipmapLevels(self, *args)
    def getMipmapLevels(self): return _pyplanet.Image_getMipmapLevels(self)
    def getMipmapOffset(self, *args): return _pyplanet.Image_getMipmapOffset(self, *args)
    def getMipmapData(self, *args): return _pyplanet.Image_getMipmapData(self, *args)
    def isImageTranslucent(self): return _pyplanet.Image_isImageTranslucent(self)
    def setPixelBufferObject(self, *args): return _pyplanet.Image_setPixelBufferObject(self, *args)
    def getPixelBufferObject(self, *args): return _pyplanet.Image_getPixelBufferObject(self, *args)
    def requiresUpdateCall(self): return _pyplanet.Image_requiresUpdateCall(self)
    def update(self, *args): return _pyplanet.Image_update(self, *args)
    def sendFocusHint(self, *args): return _pyplanet.Image_sendFocusHint(self, *args)
    def sendPointerEvent(self, *args): return _pyplanet.Image_sendPointerEvent(self, *args)
    def sendKeyEvent(self, *args): return _pyplanet.Image_sendKeyEvent(self, *args)
    def setFrameLastRendered(self, *args): return _pyplanet.Image_setFrameLastRendered(self, *args)
Image_swigregister = _pyplanet.Image_swigregister
Image_swigregister(Image)

def Image_isPackedType(*args):
  return _pyplanet.Image_isPackedType(*args)
Image_isPackedType = _pyplanet.Image_isPackedType

def Image_computePixelFormat(*args):
  return _pyplanet.Image_computePixelFormat(*args)
Image_computePixelFormat = _pyplanet.Image_computePixelFormat

def Image_computeFormatDataType(*args):
  return _pyplanet.Image_computeFormatDataType(*args)
Image_computeFormatDataType = _pyplanet.Image_computeFormatDataType

def Image_computeNumComponents(*args):
  return _pyplanet.Image_computeNumComponents(*args)
Image_computeNumComponents = _pyplanet.Image_computeNumComponents

def Image_computePixelSizeInBits(*args):
  return _pyplanet.Image_computePixelSizeInBits(*args)
Image_computePixelSizeInBits = _pyplanet.Image_computePixelSizeInBits

def Image_computeRowWidthInBytes(*args):
  return _pyplanet.Image_computeRowWidthInBytes(*args)
Image_computeRowWidthInBytes = _pyplanet.Image_computeRowWidthInBytes

def Image_computeNearestPowerOfTwo(*args):
  return _pyplanet.Image_computeNearestPowerOfTwo(*args)
Image_computeNearestPowerOfTwo = _pyplanet.Image_computeNearestPowerOfTwo

def Image_computeNumberOfMipmapLevels(*args):
  return _pyplanet.Image_computeNumberOfMipmapLevels(*args)
Image_computeNumberOfMipmapLevels = _pyplanet.Image_computeNumberOfMipmapLevels

OSG_COORDINATESYSTEMNODE = _pyplanet.OSG_COORDINATESYSTEMNODE
class EllipsoidModel(Object):
    __swig_setmethods__ = {}
    for _s in [Object]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EllipsoidModel, name, value)
    __swig_getmethods__ = {}
    for _s in [Object]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EllipsoidModel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def cloneType(self): return _pyplanet.EllipsoidModel_cloneType(self)
    def clone(self, *args): return _pyplanet.EllipsoidModel_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.EllipsoidModel_isSameKindAs(self, *args)
    def libraryName(self): return _pyplanet.EllipsoidModel_libraryName(self)
    def className(self): return _pyplanet.EllipsoidModel_className(self)
    def setRadiusEquator(self, *args): return _pyplanet.EllipsoidModel_setRadiusEquator(self, *args)
    def getRadiusEquator(self): return _pyplanet.EllipsoidModel_getRadiusEquator(self)
    def setRadiusPolar(self, *args): return _pyplanet.EllipsoidModel_setRadiusPolar(self, *args)
    def getRadiusPolar(self): return _pyplanet.EllipsoidModel_getRadiusPolar(self)
    def convertLatLongHeightToXYZ(self, *args): return _pyplanet.EllipsoidModel_convertLatLongHeightToXYZ(self, *args)
    def convertXYZToLatLongHeight(self, *args): return _pyplanet.EllipsoidModel_convertXYZToLatLongHeight(self, *args)
    def computeLocalToWorldTransformFromLatLongHeight(self, *args): return _pyplanet.EllipsoidModel_computeLocalToWorldTransformFromLatLongHeight(self, *args)
    def computeLocalToWorldTransformFromXYZ(self, *args): return _pyplanet.EllipsoidModel_computeLocalToWorldTransformFromXYZ(self, *args)
    def computeCoordinateFrame(self, *args): return _pyplanet.EllipsoidModel_computeCoordinateFrame(self, *args)
    def computeLocalUpVector(self, *args): return _pyplanet.EllipsoidModel_computeLocalUpVector(self, *args)
    def isWGS84(self): return _pyplanet.EllipsoidModel_isWGS84(self)
    __swig_destroy__ = _pyplanet.delete_EllipsoidModel
    __del__ = lambda self : None;
EllipsoidModel_swigregister = _pyplanet.EllipsoidModel_swigregister
EllipsoidModel_swigregister(EllipsoidModel)

def createGeodeForImage(*args):
  return _pyplanet.createGeodeForImage(*args)
createGeodeForImage = _pyplanet.createGeodeForImage
WGS_84_RADIUS_EQUATOR = cvar.WGS_84_RADIUS_EQUATOR
WGS_84_RADIUS_POLAR = cvar.WGS_84_RADIUS_POLAR

class CoordinateSystemNode(Group):
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CoordinateSystemNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CoordinateSystemNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_CoordinateSystemNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.CoordinateSystemNode_cloneType(self)
    def clone(self, *args): return _pyplanet.CoordinateSystemNode_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.CoordinateSystemNode_isSameKindAs(self, *args)
    def className(self): return _pyplanet.CoordinateSystemNode_className(self)
    def libraryName(self): return _pyplanet.CoordinateSystemNode_libraryName(self)
    def accept(self, *args): return _pyplanet.CoordinateSystemNode_accept(self, *args)
    def set(self, *args): return _pyplanet.CoordinateSystemNode_set(self, *args)
    def setFormat(self, *args): return _pyplanet.CoordinateSystemNode_setFormat(self, *args)
    def getFormat(self): return _pyplanet.CoordinateSystemNode_getFormat(self)
    def setCoordinateSystem(self, *args): return _pyplanet.CoordinateSystemNode_setCoordinateSystem(self, *args)
    def getCoordinateSystem(self): return _pyplanet.CoordinateSystemNode_getCoordinateSystem(self)
    def setEllipsoidModel(self, *args): return _pyplanet.CoordinateSystemNode_setEllipsoidModel(self, *args)
    def getEllipsoidModel(self, *args): return _pyplanet.CoordinateSystemNode_getEllipsoidModel(self, *args)
    def computeLocalCoordinateFrame(self, *args): return _pyplanet.CoordinateSystemNode_computeLocalCoordinateFrame(self, *args)
    def computeLocalUpVector(self, *args): return _pyplanet.CoordinateSystemNode_computeLocalUpVector(self, *args)
CoordinateSystemNode_swigregister = _pyplanet.CoordinateSystemNode_swigregister
CoordinateSystemNode_swigregister(CoordinateSystemNode)

ossimPlanetTimeUnit_SECONDS = _pyplanet.ossimPlanetTimeUnit_SECONDS
ossimPlanetTimeUnit_MINUTES = _pyplanet.ossimPlanetTimeUnit_MINUTES
ossimPlanetTimeUnit_HOURS = _pyplanet.ossimPlanetTimeUnit_HOURS
ossimPlanetLandRefreshType_NONE = _pyplanet.ossimPlanetLandRefreshType_NONE
ossimPlanetLandRefreshType_TEXTURE = _pyplanet.ossimPlanetLandRefreshType_TEXTURE
ossimPlanetLandRefreshType_GEOM = _pyplanet.ossimPlanetLandRefreshType_GEOM
ossimPlanetLandRefreshType_PRUNE = _pyplanet.ossimPlanetLandRefreshType_PRUNE
ossimPlanetLandType_NONE = _pyplanet.ossimPlanetLandType_NONE
ossimPlanetLandType_FLAT = _pyplanet.ossimPlanetLandType_FLAT
ossimPlanetLandType_NORMALIZED_ELLIPSOID = _pyplanet.ossimPlanetLandType_NORMALIZED_ELLIPSOID
ossimPlanetLandType_ELLIPSOID = _pyplanet.ossimPlanetLandType_ELLIPSOID
ossimPlanetLandType_ORTHOFLAT = _pyplanet.ossimPlanetLandType_ORTHOFLAT
ossimPlanetLandPriorityType_NONE = _pyplanet.ossimPlanetLandPriorityType_NONE
ossimPlanetLandPriorityType_LINE_OF_SITE_INTERSECTION = _pyplanet.ossimPlanetLandPriorityType_LINE_OF_SITE_INTERSECTION
ossimPlanetLandPriorityType_EYE_POSITION = _pyplanet.ossimPlanetLandPriorityType_EYE_POSITION
ossimPlanetAltitudeMode_NONE = _pyplanet.ossimPlanetAltitudeMode_NONE
ossimPlanetAltitudeMode_CLAMP_TO_GROUND = _pyplanet.ossimPlanetAltitudeMode_CLAMP_TO_GROUND
ossimPlanetAltitudeMode_RELATIVE_TO_GROUND = _pyplanet.ossimPlanetAltitudeMode_RELATIVE_TO_GROUND
ossimPlanetAltitudeMode_ABSOLUTE = _pyplanet.ossimPlanetAltitudeMode_ABSOLUTE
ossimPlanetKmlUnits_NONE = _pyplanet.ossimPlanetKmlUnits_NONE
ossimPlanetKmlUnits_FRACTION = _pyplanet.ossimPlanetKmlUnits_FRACTION
ossimPlanetKmlUnits_PIXELS = _pyplanet.ossimPlanetKmlUnits_PIXELS
ossimPlanetKmlUnits_INSET_PIXELS = _pyplanet.ossimPlanetKmlUnits_INSET_PIXELS
ossimPlanetKmlStyleState_NONE = _pyplanet.ossimPlanetKmlStyleState_NONE
ossimPlanetKmlStyleState_NORMAL = _pyplanet.ossimPlanetKmlStyleState_NORMAL
ossimPlanetKmlStyleState_HIGHLIGHT = _pyplanet.ossimPlanetKmlStyleState_HIGHLIGHT
ossimPlanetKmlRefreshMode_NONE = _pyplanet.ossimPlanetKmlRefreshMode_NONE
ossimPlanetKmlRefreshMode_ON_CHANGE = _pyplanet.ossimPlanetKmlRefreshMode_ON_CHANGE
ossimPlanetKmlRefreshMode_ON_INTERVAL = _pyplanet.ossimPlanetKmlRefreshMode_ON_INTERVAL
ossimPlanetKmlRefreshMode_ON_EXPIRE = _pyplanet.ossimPlanetKmlRefreshMode_ON_EXPIRE
ossimPlanetKmlViewRefreshMode_NONE = _pyplanet.ossimPlanetKmlViewRefreshMode_NONE
ossimPlanetKmlViewRefreshMode_NEVER = _pyplanet.ossimPlanetKmlViewRefreshMode_NEVER
ossimPlanetKmlViewRefreshMode_ON_REQUEST = _pyplanet.ossimPlanetKmlViewRefreshMode_ON_REQUEST
ossimPlanetKmlViewRefreshMode_ON_STOP = _pyplanet.ossimPlanetKmlViewRefreshMode_ON_STOP
ossimPlanetKmlViewRefreshMode_ON_REGION = _pyplanet.ossimPlanetKmlViewRefreshMode_ON_REGION
ossimPlanetKmlColorMode_NONE = _pyplanet.ossimPlanetKmlColorMode_NONE
ossimPlanetKmlColorMode_NORMAL = _pyplanet.ossimPlanetKmlColorMode_NORMAL
ossimPlanetKmlColorMode_RANDOM = _pyplanet.ossimPlanetKmlColorMode_RANDOM
ossimPlanetTextureLayer_VALID = _pyplanet.ossimPlanetTextureLayer_VALID
ossimPlanetTextureLayer_NO_SOURCE_DATA = _pyplanet.ossimPlanetTextureLayer_NO_SOURCE_DATA
ossimPlanetTextureLayer_NO_GEOM = _pyplanet.ossimPlanetTextureLayer_NO_GEOM
ossimPlanetTextureLayer_NO_OVERVIEWS = _pyplanet.ossimPlanetTextureLayer_NO_OVERVIEWS
ossimPlanetTextureLayer_NO_HISTOGRAMS = _pyplanet.ossimPlanetTextureLayer_NO_HISTOGRAMS
ossimPlanetTextureLayer_NOT_OPENED = _pyplanet.ossimPlanetTextureLayer_NOT_OPENED
ossimPlanetTextureLayer_ALL = _pyplanet.ossimPlanetTextureLayer_ALL
ossimPlanetIoDirection_NONE = _pyplanet.ossimPlanetIoDirection_NONE
ossimPlanetIoDirection_IN = _pyplanet.ossimPlanetIoDirection_IN
ossimPlanetIoDirection_OUT = _pyplanet.ossimPlanetIoDirection_OUT
ossimPlanetIoDirection_INOUT = _pyplanet.ossimPlanetIoDirection_INOUT
class ossimPlanetAction(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAction, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAction, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAction
    __del__ = lambda self : None;
    def toDestinationCommandAction(self, *args): return _pyplanet.ossimPlanetAction_toDestinationCommandAction(self, *args)
    def toXmlAction(self, *args): return _pyplanet.ossimPlanetAction_toXmlAction(self, *args)
    def clone(self): return _pyplanet.ossimPlanetAction_clone(self)
    def cloneType(self): return _pyplanet.ossimPlanetAction_cloneType(self)
    def setSourceCode(self, *args): return _pyplanet.ossimPlanetAction_setSourceCode(self, *args)
    def sourceCode(self, *args): return _pyplanet.ossimPlanetAction_sourceCode(self, *args)
    def target(self, *args): return _pyplanet.ossimPlanetAction_target(self, *args)
    def setTarget(self, *args): return _pyplanet.ossimPlanetAction_setTarget(self, *args)
    def command(self, *args): return _pyplanet.ossimPlanetAction_command(self, *args)
    def setCommand(self, *args): return _pyplanet.ossimPlanetAction_setCommand(self, *args)
    def origin(self): return _pyplanet.ossimPlanetAction_origin(self)
    def setOrigin(self, *args): return _pyplanet.ossimPlanetAction_setOrigin(self, *args)
    def ossimPlanetAction_print(self, *args): return _pyplanet.ossimPlanetAction_ossimPlanetAction_print(self, *args)
    def read(self, *args): return _pyplanet.ossimPlanetAction_read(self, *args)
    def printError(self, *args): return _pyplanet.ossimPlanetAction_printError(self, *args)
    def post(self): return _pyplanet.ossimPlanetAction_post(self)
    def execute(self): return _pyplanet.ossimPlanetAction_execute(self)
    def allExecute(self): return _pyplanet.ossimPlanetAction_allExecute(self)
    def tellExecute(self, *args): return _pyplanet.ossimPlanetAction_tellExecute(self, *args)
ossimPlanetAction_swigregister = _pyplanet.ossimPlanetAction_swigregister
ossimPlanetAction_swigregister(ossimPlanetAction)
OSSIMPLANET_WGS_84_RADIUS_EQUATOR = cvar.OSSIMPLANET_WGS_84_RADIUS_EQUATOR
OSSIMPLANET_WGS_84_RADIUS_POLAR = cvar.OSSIMPLANET_WGS_84_RADIUS_POLAR

def __lshift__(*args):
  return _pyplanet.__lshift__(*args)
__lshift__ = _pyplanet.__lshift__

def __rshift__(*args):
  return _pyplanet.__rshift__(*args)
__rshift__ = _pyplanet.__rshift__

class ossimPlanetActionReceiver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetActionReceiver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetActionReceiver, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyplanet.delete_ossimPlanetActionReceiver
    __del__ = lambda self : None;
    def name(self): return _pyplanet.ossimPlanetActionReceiver_name(self)
    def pathname(self): return _pyplanet.ossimPlanetActionReceiver_pathname(self)
    def setPathname(self, *args): return _pyplanet.ossimPlanetActionReceiver_setPathname(self, *args)
    def setPathnameAndRegister(self, *args): return _pyplanet.ossimPlanetActionReceiver_setPathnameAndRegister(self, *args)
    def execute(self, *args): return _pyplanet.ossimPlanetActionReceiver_execute(self, *args)
ossimPlanetActionReceiver_swigregister = _pyplanet.ossimPlanetActionReceiver_swigregister
ossimPlanetActionReceiver_swigregister(ossimPlanetActionReceiver)

class ossimPlanetArchiveMapping(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetArchiveMapping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetArchiveMapping, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetArchiveMapping(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetArchiveMapping
    __del__ = lambda self : None;
    def getSource(self): return _pyplanet.ossimPlanetArchiveMapping_getSource(self)
    def setSource(self, *args): return _pyplanet.ossimPlanetArchiveMapping_setSource(self, *args)
    def getDestination(self): return _pyplanet.ossimPlanetArchiveMapping_getDestination(self)
    def setDestination(self, *args): return _pyplanet.ossimPlanetArchiveMapping_setDestination(self, *args)
ossimPlanetArchiveMapping_swigregister = _pyplanet.ossimPlanetArchiveMapping_swigregister
ossimPlanetArchiveMapping_swigregister(ossimPlanetArchiveMapping)

class ossimPlanetArchive(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetArchive, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetArchive()
        try: self.this.append(this)
        except: self.this = this
    def addMapping(self, *args): return _pyplanet.ossimPlanetArchive_addMapping(self, *args)
    def removeMapping(self, *args): return _pyplanet.ossimPlanetArchive_removeMapping(self, *args)
    def matchPath(self, *args): return _pyplanet.ossimPlanetArchive_matchPath(self, *args)
    def convertToDirectory(self, *args): return _pyplanet.ossimPlanetArchive_convertToDirectory(self, *args)
    def setArchiveMappingEnabledFlag(self, enabled = False): return _pyplanet.ossimPlanetArchive_setArchiveMappingEnabledFlag(self, enabled)
    def archiveMappingEnabled(self): return _pyplanet.ossimPlanetArchive_archiveMappingEnabled(self)
    def getMappingList(self): return _pyplanet.ossimPlanetArchive_getMappingList(self)
ossimPlanetArchive_swigregister = _pyplanet.ossimPlanetArchive_swigregister
ossimPlanetArchive_swigregister(ossimPlanetArchive)

class ossimPlanetCallback(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetCallback()
        try: self.this.append(this)
        except: self.this = this
    def setEnableFlag(self, *args): return _pyplanet.ossimPlanetCallback_setEnableFlag(self, *args)
    def enableFlag(self): return _pyplanet.ossimPlanetCallback_enableFlag(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetCallback
    __del__ = lambda self : None;
ossimPlanetCallback_swigregister = _pyplanet.ossimPlanetCallback_swigregister
ossimPlanetCallback_swigregister(ossimPlanetCallback)

class ossimPlanetCallbackIface_ossimPlanetOperationCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetCallbackIface_ossimPlanetOperationCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetCallbackIface_ossimPlanetOperationCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetCallbackIface_ossimPlanetOperationCallback()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetCallbackIface_ossimPlanetOperationCallback
    __del__ = lambda self : None;
    def addCallback(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetOperationCallback_addCallback(self, *args)
    def removeCallback(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetOperationCallback_removeCallback(self, *args)
    def blockCallbacks(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetOperationCallback_blockCallbacks(self, *args)
    def hasCallback(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetOperationCallback_hasCallback(self, *args)
ossimPlanetCallbackIface_ossimPlanetOperationCallback_swigregister = _pyplanet.ossimPlanetCallbackIface_ossimPlanetOperationCallback_swigregister
ossimPlanetCallbackIface_ossimPlanetOperationCallback_swigregister(ossimPlanetCallbackIface_ossimPlanetOperationCallback)

class ossimPlanetCallbackIface_ossimPlanetNodeCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetCallbackIface_ossimPlanetNodeCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetCallbackIface_ossimPlanetNodeCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetCallbackIface_ossimPlanetNodeCallback()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetCallbackIface_ossimPlanetNodeCallback
    __del__ = lambda self : None;
    def addCallback(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetNodeCallback_addCallback(self, *args)
    def removeCallback(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetNodeCallback_removeCallback(self, *args)
    def blockCallbacks(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetNodeCallback_blockCallbacks(self, *args)
    def hasCallback(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetNodeCallback_hasCallback(self, *args)
ossimPlanetCallbackIface_ossimPlanetNodeCallback_swigregister = _pyplanet.ossimPlanetCallbackIface_ossimPlanetNodeCallback_swigregister
ossimPlanetCallbackIface_ossimPlanetNodeCallback_swigregister(ossimPlanetCallbackIface_ossimPlanetNodeCallback)

class ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback
    __del__ = lambda self : None;
    def addCallback(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback_addCallback(self, *args)
    def removeCallback(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback_removeCallback(self, *args)
    def blockCallbacks(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback_blockCallbacks(self, *args)
    def hasCallback(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback_hasCallback(self, *args)
ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback_swigregister = _pyplanet.ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback_swigregister
ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback_swigregister(ossimPlanetCallbackIface_ossimPlanetTextureLayerCallback)

class ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback
    __del__ = lambda self : None;
    def addCallback(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback_addCallback(self, *args)
    def removeCallback(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback_removeCallback(self, *args)
    def blockCallbacks(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback_blockCallbacks(self, *args)
    def hasCallback(self, *args): return _pyplanet.ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback_hasCallback(self, *args)
ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback_swigregister = _pyplanet.ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback_swigregister
ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback_swigregister(ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback)

class ossimPlanetOperationCallback(ossimPlanetCallback):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetOperationCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetOperationCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetOperationCallback()
        try: self.this.append(this)
        except: self.this = this
    def ready(self, *args): return _pyplanet.ossimPlanetOperationCallback_ready(self, *args)
    def started(self, *args): return _pyplanet.ossimPlanetOperationCallback_started(self, *args)
    def finished(self, *args): return _pyplanet.ossimPlanetOperationCallback_finished(self, *args)
    def canceled(self, *args): return _pyplanet.ossimPlanetOperationCallback_canceled(self, *args)
    def priorityChanged(self, *args): return _pyplanet.ossimPlanetOperationCallback_priorityChanged(self, *args)
    def propertyChanged(self, *args): return _pyplanet.ossimPlanetOperationCallback_propertyChanged(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetOperationCallback
    __del__ = lambda self : None;
ossimPlanetOperationCallback_swigregister = _pyplanet.ossimPlanetOperationCallback_swigregister
ossimPlanetOperationCallback_swigregister(ossimPlanetOperationCallback)

class ossimPlanetOperation(Referenced,ossimPlanetCallbackIface_ossimPlanetOperationCallback):
    __swig_setmethods__ = {}
    for _s in [Referenced,ossimPlanetCallbackIface_ossimPlanetOperationCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced,ossimPlanetCallbackIface_ossimPlanetOperationCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetOperation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    READY_STATE = _pyplanet.ossimPlanetOperation_READY_STATE
    RUN_STATE = _pyplanet.ossimPlanetOperation_RUN_STATE
    CANCELED_STATE = _pyplanet.ossimPlanetOperation_CANCELED_STATE
    FINISHED_STATE = _pyplanet.ossimPlanetOperation_FINISHED_STATE
    __swig_destroy__ = _pyplanet.delete_ossimPlanetOperation
    __del__ = lambda self : None;
    def setName(self, *args): return _pyplanet.ossimPlanetOperation_setName(self, *args)
    def name(self): return _pyplanet.ossimPlanetOperation_name(self)
    def setId(self, *args): return _pyplanet.ossimPlanetOperation_setId(self, *args)
    def id(self): return _pyplanet.ossimPlanetOperation_id(self)
    def setState(self, *args): return _pyplanet.ossimPlanetOperation_setState(self, *args)
    def isStopped(self): return _pyplanet.ossimPlanetOperation_isStopped(self)
    def state(self): return _pyplanet.ossimPlanetOperation_state(self)
    def release(self): return _pyplanet.ossimPlanetOperation_release(self)
    def addDependency(self, *args): return _pyplanet.ossimPlanetOperation_addDependency(self, *args)
    def removeDependency(self, *args): return _pyplanet.ossimPlanetOperation_removeDependency(self, *args)
    def hasDependency(self): return _pyplanet.ossimPlanetOperation_hasDependency(self)
    def dependencyList(self, *args): return _pyplanet.ossimPlanetOperation_dependencyList(self, *args)
    def setPriority(self, *args): return _pyplanet.ossimPlanetOperation_setPriority(self, *args)
    def priority(self): return _pyplanet.ossimPlanetOperation_priority(self)
    def status(self, *args): return _pyplanet.ossimPlanetOperation_status(self, *args)
    def setStatus(self, *args): return _pyplanet.ossimPlanetOperation_setStatus(self, *args)
    def nextDependency(self, recurseFlag = True): return _pyplanet.ossimPlanetOperation_nextDependency(self, recurseFlag)
    def cancel(self): return _pyplanet.ossimPlanetOperation_cancel(self)
    def runMutex(self): return _pyplanet.ossimPlanetOperation_runMutex(self)
    def reset(self): return _pyplanet.ossimPlanetOperation_reset(self)
    def start(self): return _pyplanet.ossimPlanetOperation_start(self)
ossimPlanetOperation_swigregister = _pyplanet.ossimPlanetOperation_swigregister
ossimPlanetOperation_swigregister(ossimPlanetOperation)
ossimPlanetOperation.PRIORITY_HIGHEST = _pyplanet.cvar.ossimPlanetOperation_PRIORITY_HIGHEST
ossimPlanetOperation.PRIORITY_LOWEST = _pyplanet.cvar.ossimPlanetOperation_PRIORITY_LOWEST

class ossimPlanetOperationQueue(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetOperationQueue, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetOperationQueue, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetOperationQueue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetOperationQueue
    __del__ = lambda self : None;
    def add(self, *args): return _pyplanet.ossimPlanetOperationQueue_add(self, *args)
    def removeByName(self, *args): return _pyplanet.ossimPlanetOperationQueue_removeByName(self, *args)
    def removeById(self, *args): return _pyplanet.ossimPlanetOperationQueue_removeById(self, *args)
    def remove(self, *args): return _pyplanet.ossimPlanetOperationQueue_remove(self, *args)
    def removeStoppedOperations(self): return _pyplanet.ossimPlanetOperationQueue_removeStoppedOperations(self)
    def removeAllOperations(self): return _pyplanet.ossimPlanetOperationQueue_removeAllOperations(self)
    def nextOperation(self, blockIfEmptyFlag = True): return _pyplanet.ossimPlanetOperationQueue_nextOperation(self, blockIfEmptyFlag)
    def releaseOperationsBlock(self): return _pyplanet.ossimPlanetOperationQueue_releaseOperationsBlock(self)
    def empty(self): return _pyplanet.ossimPlanetOperationQueue_empty(self)
    def size(self): return _pyplanet.ossimPlanetOperationQueue_size(self)
ossimPlanetOperationQueue_swigregister = _pyplanet.ossimPlanetOperationQueue_swigregister
ossimPlanetOperationQueue_swigregister(ossimPlanetOperationQueue)

class ossimPlanetOperationPriorityQueue(ossimPlanetOperationQueue):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetOperationQueue]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetOperationPriorityQueue, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetOperationQueue]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetOperationPriorityQueue, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetOperationPriorityQueue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetOperationPriorityQueue
    __del__ = lambda self : None;
    def nextOperation(self, blockIfEmptyFlag = True): return _pyplanet.ossimPlanetOperationPriorityQueue_nextOperation(self, blockIfEmptyFlag)
ossimPlanetOperationPriorityQueue_swigregister = _pyplanet.ossimPlanetOperationPriorityQueue_swigregister
ossimPlanetOperationPriorityQueue_swigregister(ossimPlanetOperationPriorityQueue)

class ossimPlanetOperationThreadQueue(Referenced,Thread):
    __swig_setmethods__ = {}
    for _s in [Referenced,Thread]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetOperationThreadQueue, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced,Thread]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetOperationThreadQueue, name)
    __repr__ = _swig_repr
    def __init__(self, opq = None): 
        this = _pyplanet.new_ossimPlanetOperationThreadQueue(opq)
        try: self.this.append(this)
        except: self.this = this
    def setOperationQueue(self, *args): return _pyplanet.ossimPlanetOperationThreadQueue_setOperationQueue(self, *args)
    def operationQueue(self, *args): return _pyplanet.ossimPlanetOperationThreadQueue_operationQueue(self, *args)
    def add(self, *args): return _pyplanet.ossimPlanetOperationThreadQueue_add(self, *args)
    def remove(self, *args): return _pyplanet.ossimPlanetOperationThreadQueue_remove(self, *args)
    def removeByName(self, *args): return _pyplanet.ossimPlanetOperationThreadQueue_removeByName(self, *args)
    def removeById(self, *args): return _pyplanet.ossimPlanetOperationThreadQueue_removeById(self, *args)
    def removeAllOperations(self): return _pyplanet.ossimPlanetOperationThreadQueue_removeAllOperations(self)
    def currentOperation(self): return _pyplanet.ossimPlanetOperationThreadQueue_currentOperation(self)
    def cancelCurrentOperation(self): return _pyplanet.ossimPlanetOperationThreadQueue_cancelCurrentOperation(self)
    def run(self): return _pyplanet.ossimPlanetOperationThreadQueue_run(self)
    def setDone(self, *args): return _pyplanet.ossimPlanetOperationThreadQueue_setDone(self, *args)
    def done(self): return _pyplanet.ossimPlanetOperationThreadQueue_done(self)
    def cancel(self): return _pyplanet.ossimPlanetOperationThreadQueue_cancel(self)
    def empty(self): return _pyplanet.ossimPlanetOperationThreadQueue_empty(self)
ossimPlanetOperationThreadQueue_swigregister = _pyplanet.ossimPlanetOperationThreadQueue_swigregister
ossimPlanetOperationThreadQueue_swigregister(ossimPlanetOperationThreadQueue)

class ossimPlanetOperationMultiThreadQueue(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetOperationMultiThreadQueue, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetOperationMultiThreadQueue, name)
    __repr__ = _swig_repr
    def __init__(self, numberOfThreads = 1): 
        this = _pyplanet.new_ossimPlanetOperationMultiThreadQueue(numberOfThreads)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetOperationMultiThreadQueue
    __del__ = lambda self : None;
    def operationQueue(self, *args): return _pyplanet.ossimPlanetOperationMultiThreadQueue_operationQueue(self, *args)
    def add(self, *args): return _pyplanet.ossimPlanetOperationMultiThreadQueue_add(self, *args)
    def remove(self, *args): return _pyplanet.ossimPlanetOperationMultiThreadQueue_remove(self, *args)
    def removeByName(self, *args): return _pyplanet.ossimPlanetOperationMultiThreadQueue_removeByName(self, *args)
    def removeById(self, *args): return _pyplanet.ossimPlanetOperationMultiThreadQueue_removeById(self, *args)
    def removeAllOperations(self): return _pyplanet.ossimPlanetOperationMultiThreadQueue_removeAllOperations(self)
    def cancelCurrentOperation(self): return _pyplanet.ossimPlanetOperationMultiThreadQueue_cancelCurrentOperation(self)
ossimPlanetOperationMultiThreadQueue_swigregister = _pyplanet.ossimPlanetOperationMultiThreadQueue_swigregister
ossimPlanetOperationMultiThreadQueue_swigregister(ossimPlanetOperationMultiThreadQueue)

class ossimPlanetImageCache(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetImageCache, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetImageCache, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyplanet.delete_ossimPlanetImageCache
    __del__ = lambda self : None;
    def setEnabledFlag(self, *args): return _pyplanet.ossimPlanetImageCache_setEnabledFlag(self, *args)
    def enabledFlag(self): return _pyplanet.ossimPlanetImageCache_enabledFlag(self)
    def clean(self): return _pyplanet.ossimPlanetImageCache_clean(self)
    def shrink(self): return _pyplanet.ossimPlanetImageCache_shrink(self)
    def addOrUpdate(self, *args): return _pyplanet.ossimPlanetImageCache_addOrUpdate(self, *args)
    def get(self, *args): return _pyplanet.ossimPlanetImageCache_get(self, *args)
    def hasImage(self, *args): return _pyplanet.ossimPlanetImageCache_hasImage(self, *args)
    def setMinMaxCacheSizeInBytes(self, *args): return _pyplanet.ossimPlanetImageCache_setMinMaxCacheSizeInBytes(self, *args)
    def setMinMaxCacheSizeInMegaBytes(self, *args): return _pyplanet.ossimPlanetImageCache_setMinMaxCacheSizeInMegaBytes(self, *args)
    def setMinMaxCacheSizeInGigaBytes(self, *args): return _pyplanet.ossimPlanetImageCache_setMinMaxCacheSizeInGigaBytes(self, *args)
    def cacheSizeInBytes(self): return _pyplanet.ossimPlanetImageCache_cacheSizeInBytes(self)
    def maxCacheSizeInBytes(self): return _pyplanet.ossimPlanetImageCache_maxCacheSizeInBytes(self)
    def minCacheSizeInBytes(self): return _pyplanet.ossimPlanetImageCache_minCacheSizeInBytes(self)
    def exceedsMaxCacheSize(self): return _pyplanet.ossimPlanetImageCache_exceedsMaxCacheSize(self)
    def exceedsMinCacheSize(self): return _pyplanet.ossimPlanetImageCache_exceedsMinCacheSize(self)
ossimPlanetImageCache_swigregister = _pyplanet.ossimPlanetImageCache_swigregister
ossimPlanetImageCache_swigregister(ossimPlanetImageCache)

class ossimPlanetMemoryImageCache(ossimPlanetImageCache):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetImageCache]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetMemoryImageCache, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetImageCache]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetMemoryImageCache, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetMemoryImageCache()
        try: self.this.append(this)
        except: self.this = this
    def clean(self): return _pyplanet.ossimPlanetMemoryImageCache_clean(self)
    def shrink(self): return _pyplanet.ossimPlanetMemoryImageCache_shrink(self)
    def addOrUpdate(self, *args): return _pyplanet.ossimPlanetMemoryImageCache_addOrUpdate(self, *args)
    def get(self, *args): return _pyplanet.ossimPlanetMemoryImageCache_get(self, *args)
    def hasImage(self, *args): return _pyplanet.ossimPlanetMemoryImageCache_hasImage(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetMemoryImageCache
    __del__ = lambda self : None;
ossimPlanetMemoryImageCache_swigregister = _pyplanet.ossimPlanetMemoryImageCache_swigregister
ossimPlanetMemoryImageCache_swigregister(ossimPlanetMemoryImageCache)

class ossimPlanetDiskImageCache(ossimPlanetImageCache):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetImageCache]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetDiskImageCache, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetImageCache]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetDiskImageCache, name)
    __repr__ = _swig_repr
    DISK_CACHE_RAW = _pyplanet.ossimPlanetDiskImageCache_DISK_CACHE_RAW
    DISK_CACHE_JPEG = _pyplanet.ossimPlanetDiskImageCache_DISK_CACHE_JPEG
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetDiskImageCache()
        try: self.this.append(this)
        except: self.this = this
    def openDirectory(self, *args): return _pyplanet.ossimPlanetDiskImageCache_openDirectory(self, *args)
    def clean(self): return _pyplanet.ossimPlanetDiskImageCache_clean(self)
    def shrink(self): return _pyplanet.ossimPlanetDiskImageCache_shrink(self)
    def addOrUpdate(self, *args): return _pyplanet.ossimPlanetDiskImageCache_addOrUpdate(self, *args)
    def get(self, *args): return _pyplanet.ossimPlanetDiskImageCache_get(self, *args)
    def hasImage(self, *args): return _pyplanet.ossimPlanetDiskImageCache_hasImage(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetDiskImageCache
    __del__ = lambda self : None;
ossimPlanetDiskImageCache_swigregister = _pyplanet.ossimPlanetDiskImageCache_swigregister
ossimPlanetDiskImageCache_swigregister(ossimPlanetDiskImageCache)

class ossimPlanetImageCacheShrinkOperation(ossimPlanetOperation):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetOperation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetImageCacheShrinkOperation, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetOperation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetImageCacheShrinkOperation, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetImageCacheShrinkOperation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetImageCacheShrinkOperation
    __del__ = lambda self : None;
    def setCache(self, *args): return _pyplanet.ossimPlanetImageCacheShrinkOperation_setCache(self, *args)
    def run(self): return _pyplanet.ossimPlanetImageCacheShrinkOperation_run(self)
ossimPlanetImageCacheShrinkOperation_swigregister = _pyplanet.ossimPlanetImageCacheShrinkOperation_swigregister
ossimPlanetImageCacheShrinkOperation_swigregister(ossimPlanetImageCacheShrinkOperation)

class ossimPlanetBoundingBox(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetBoundingBox, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetBoundingBox, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetBoundingBox(*args)
        try: self.this.append(this)
        except: self.this = this
    def extrude(self, *args): return _pyplanet.ossimPlanetBoundingBox_extrude(self, *args)
    def __getitem__(self, *args): return _pyplanet.ossimPlanetBoundingBox___getitem__(self, *args)
    def intersects(self, *args): return _pyplanet.ossimPlanetBoundingBox_intersects(self, *args)
    def isInFront(self, *args): return _pyplanet.ossimPlanetBoundingBox_isInFront(self, *args)
    def transform(self, *args): return _pyplanet.ossimPlanetBoundingBox_transform(self, *args)
    def setCenter(self, *args): return _pyplanet.ossimPlanetBoundingBox_setCenter(self, *args)
    def center(self): return _pyplanet.ossimPlanetBoundingBox_center(self)
    def radius(self): return _pyplanet.ossimPlanetBoundingBox_radius(self)
    def groundRadius(self): return _pyplanet.ossimPlanetBoundingBox_groundRadius(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetBoundingBox
    __del__ = lambda self : None;
ossimPlanetBoundingBox_swigregister = _pyplanet.ossimPlanetBoundingBox_swigregister
ossimPlanetBoundingBox_swigregister(ossimPlanetBoundingBox)

class ossimPlanetBillboardIcon(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetBillboardIcon, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetBillboardIcon, name)
    __repr__ = _swig_repr
    def __init__(self, objectGroundSize = 50000.0/OSSIMPLANET_WGS_84_RADIUS_EQUATOR): 
        this = _pyplanet.new_ossimPlanetBillboardIcon(objectGroundSize)
        try: self.this.append(this)
        except: self.this = this
    def setGroundObjectSize(self, *args): return _pyplanet.ossimPlanetBillboardIcon_setGroundObjectSize(self, *args)
    def setIcon(self, *args): return _pyplanet.ossimPlanetBillboardIcon_setIcon(self, *args)
    def getGeom(self): return _pyplanet.ossimPlanetBillboardIcon_getGeom(self)
    def setGeom(self, *args): return _pyplanet.ossimPlanetBillboardIcon_setGeom(self, *args)
    def traverse(self, *args): return _pyplanet.ossimPlanetBillboardIcon_traverse(self, *args)
    def computeBound(self): return _pyplanet.ossimPlanetBillboardIcon_computeBound(self)
    def isCulled(self): return _pyplanet.ossimPlanetBillboardIcon_isCulled(self)
    def setMinPixelSize(self, *args): return _pyplanet.ossimPlanetBillboardIcon_setMinPixelSize(self, *args)
    def setMaxPixelSize(self, *args): return _pyplanet.ossimPlanetBillboardIcon_setMaxPixelSize(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetBillboardIcon
    __del__ = lambda self : None;
ossimPlanetBillboardIcon_swigregister = _pyplanet.ossimPlanetBillboardIcon_swigregister
ossimPlanetBillboardIcon_swigregister(ossimPlanetBillboardIcon)

class ossimPlanetTextureLayerCallback(ossimPlanetCallback):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetTextureLayerCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetTextureLayerCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetTextureLayerCallback()
        try: self.this.append(this)
        except: self.this = this
    def layerAdded(self, *args): return _pyplanet.ossimPlanetTextureLayerCallback_layerAdded(self, *args)
    def layerRemoved(self, *args): return _pyplanet.ossimPlanetTextureLayerCallback_layerRemoved(self, *args)
    def refreshExtent(self, *args): return _pyplanet.ossimPlanetTextureLayerCallback_refreshExtent(self, *args)
    def propertyChanged(self, *args): return _pyplanet.ossimPlanetTextureLayerCallback_propertyChanged(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetTextureLayerCallback
    __del__ = lambda self : None;
ossimPlanetTextureLayerCallback_swigregister = _pyplanet.ossimPlanetTextureLayerCallback_swigregister
ossimPlanetTextureLayerCallback_swigregister(ossimPlanetTextureLayerCallback)

class ossimPlanetTextureLayerRaiseCallback(ossimPlanetTextureLayerCallback):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetTextureLayerCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetTextureLayerRaiseCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetTextureLayerCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetTextureLayerRaiseCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetTextureLayerRaiseCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    def layer(self): return _pyplanet.ossimPlanetTextureLayerRaiseCallback_layer(self)
    def setLayer(self, *args): return _pyplanet.ossimPlanetTextureLayerRaiseCallback_setLayer(self, *args)
    def layerAdded(self, *args): return _pyplanet.ossimPlanetTextureLayerRaiseCallback_layerAdded(self, *args)
    def layerRemoved(self, *args): return _pyplanet.ossimPlanetTextureLayerRaiseCallback_layerRemoved(self, *args)
    def refreshExtent(self, *args): return _pyplanet.ossimPlanetTextureLayerRaiseCallback_refreshExtent(self, *args)
    def propertyChanged(self, *args): return _pyplanet.ossimPlanetTextureLayerRaiseCallback_propertyChanged(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetTextureLayerRaiseCallback
    __del__ = lambda self : None;
ossimPlanetTextureLayerRaiseCallback_swigregister = _pyplanet.ossimPlanetTextureLayerRaiseCallback_swigregister
ossimPlanetTextureLayerRaiseCallback_swigregister(ossimPlanetTextureLayerRaiseCallback)

class ossimPlanetTextureLayerFactory(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetTextureLayerFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetTextureLayerFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def createLayer(self, *args): return _pyplanet.ossimPlanetTextureLayerFactory_createLayer(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetTextureLayerFactory
    __del__ = lambda self : None;
ossimPlanetTextureLayerFactory_swigregister = _pyplanet.ossimPlanetTextureLayerFactory_swigregister
ossimPlanetTextureLayerFactory_swigregister(ossimPlanetTextureLayerFactory)

class ossimPlanetTextureLayerGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetTextureLayerGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetTextureLayerGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetTextureLayerGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetTextureLayerGroup
    __del__ = lambda self : None;
    def dup(self): return _pyplanet.ossimPlanetTextureLayerGroup_dup(self)
    def dupType(self): return _pyplanet.ossimPlanetTextureLayerGroup_dupType(self)
    def getClassName(self): return _pyplanet.ossimPlanetTextureLayerGroup_getClassName(self)
    def updateExtents(self): return _pyplanet.ossimPlanetTextureLayerGroup_updateExtents(self)
    def resetStats(self): return _pyplanet.ossimPlanetTextureLayerGroup_resetStats(self)
    def updateStats(self): return _pyplanet.ossimPlanetTextureLayerGroup_updateStats(self)
    def hasTexture(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_hasTexture(self, *args)
    def getTexture(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_getTexture(self, *args)
    def asGroup(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_asGroup(self, *args)
    def swapLayers(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_swapLayers(self, *args)
    def replaceLayer(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_replaceLayer(self, *args)
    def addTop(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_addTop(self, *args)
    def addBeforeIdx(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_addBeforeIdx(self, *args)
    def addBeforeLayer(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_addBeforeLayer(self, *args)
    def addAfterIdx(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_addAfterIdx(self, *args)
    def addAfterLayer(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_addAfterLayer(self, *args)
    def addBottom(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_addBottom(self, *args)
    def removeLayers(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_removeLayers(self, *args)
    def removeLayer(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_removeLayer(self, *args)
    def findLayerIndex(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_findLayerIndex(self, *args)
    def containsLayer(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_containsLayer(self, *args)
    def numberOfLayers(self): return _pyplanet.ossimPlanetTextureLayerGroup_numberOfLayers(self)
    def layer(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_layer(self, *args)
    def findLayerByName(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_findLayerByName(self, *args)
    def findLayerByNameAndId(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_findLayerByNameAndId(self, *args)
    def findLayerById(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_findLayerById(self, *args)
    def setFillNullOrEmptyTileMaxLevel(self, maxLevel = 0): return _pyplanet.ossimPlanetTextureLayerGroup_setFillNullOrEmptyTileMaxLevel(self, maxLevel)
    def setBackgroundColor(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_setBackgroundColor(self, *args)
    def setFillTranslucentPixelsWithBackground(self, on = True): return _pyplanet.ossimPlanetTextureLayerGroup_setFillTranslucentPixelsWithBackground(self, on)
    def sortByGsd(self): return _pyplanet.ossimPlanetTextureLayerGroup_sortByGsd(self)
    def saveXml(self, recurseFlag = True): return _pyplanet.ossimPlanetTextureLayerGroup_saveXml(self, recurseFlag)
    def loadXml(self, *args): return _pyplanet.ossimPlanetTextureLayerGroup_loadXml(self, *args)
ossimPlanetTextureLayerGroup_swigregister = _pyplanet.ossimPlanetTextureLayerGroup_swigregister
ossimPlanetTextureLayerGroup_swigregister(ossimPlanetTextureLayerGroup)

class ossimPlanetTextureLayerRegistry(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetTextureLayerRegistry, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetTextureLayerRegistry, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetTextureLayerRegistry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetTextureLayerRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyplanet.ossimPlanetTextureLayerRegistry_instance
    if _newclass:instance = staticmethod(_pyplanet.ossimPlanetTextureLayerRegistry_instance)
    def registerFactory(self, *args): return _pyplanet.ossimPlanetTextureLayerRegistry_registerFactory(self, *args)
    def registerFactoryToFront(self, *args): return _pyplanet.ossimPlanetTextureLayerRegistry_registerFactoryToFront(self, *args)
    def unregisterFactory(self, *args): return _pyplanet.ossimPlanetTextureLayerRegistry_unregisterFactory(self, *args)
    def createLayer(self, *args): return _pyplanet.ossimPlanetTextureLayerRegistry_createLayer(self, *args)
ossimPlanetTextureLayerRegistry_swigregister = _pyplanet.ossimPlanetTextureLayerRegistry_swigregister
ossimPlanetTextureLayerRegistry_swigregister(ossimPlanetTextureLayerRegistry)

def ossimPlanetTextureLayerRegistry_instance():
  return _pyplanet.ossimPlanetTextureLayerRegistry_instance()
ossimPlanetTextureLayerRegistry_instance = _pyplanet.ossimPlanetTextureLayerRegistry_instance

class ossimPlanetCacheTextureLayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetCacheTextureLayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetCacheTextureLayer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetCacheTextureLayer(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyplanet.ossimPlanetCacheTextureLayer_dup(self)
    def dupType(self): return _pyplanet.ossimPlanetCacheTextureLayer_dupType(self)
    def getClassName(self): return _pyplanet.ossimPlanetCacheTextureLayer_getClassName(self)
    def updateExtents(self): return _pyplanet.ossimPlanetCacheTextureLayer_updateExtents(self)
    def updateStats(self): return _pyplanet.ossimPlanetCacheTextureLayer_updateStats(self)
    def setTextureLayer(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_setTextureLayer(self, *args)
    def setCache(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_setCache(self, *args)
    def hasTexture(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_hasTexture(self, *args)
    def getTexture(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_getTexture(self, *args)
    def getLookAt(self): return _pyplanet.ossimPlanetCacheTextureLayer_getLookAt(self)
    def setLookAt(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_setLookAt(self, *args)
    def getDateRange(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_getDateRange(self, *args)
    def getApproximateHypotneusLength(self): return _pyplanet.ossimPlanetCacheTextureLayer_getApproximateHypotneusLength(self)
    def getCenterLatLonLength(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_getCenterLatLonLength(self, *args)
    def setEnableFlag(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_setEnableFlag(self, *args)
    def setFilterType(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_setFilterType(self, *args)
    def getMetadata(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_getMetadata(self, *args)
    def saveXml(self, recurseFlag = True): return _pyplanet.ossimPlanetCacheTextureLayer_saveXml(self, recurseFlag)
    def loadXml(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_loadXml(self, *args)
    def resetLookAt(self): return _pyplanet.ossimPlanetCacheTextureLayer_resetLookAt(self)
    def findLayerByName(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_findLayerByName(self, *args)
    def findLayerByNameAndId(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_findLayerByNameAndId(self, *args)
    def findLayerById(self, *args): return _pyplanet.ossimPlanetCacheTextureLayer_findLayerById(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetCacheTextureLayer
    __del__ = lambda self : None;
ossimPlanetCacheTextureLayer_swigregister = _pyplanet.ossimPlanetCacheTextureLayer_swigregister
ossimPlanetCacheTextureLayer_swigregister(ossimPlanetCacheTextureLayer)

class ossimPlanetClientConnection(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetClientConnection, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetClientConnection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetClientConnection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetClientConnection
    __del__ = lambda self : None;
    def getHost(self): return _pyplanet.ossimPlanetClientConnection_getHost(self)
    def getPortString(self): return _pyplanet.ossimPlanetClientConnection_getPortString(self)
    def getPortType(self): return _pyplanet.ossimPlanetClientConnection_getPortType(self)
    def getConnection(self, *args): return _pyplanet.ossimPlanetClientConnection_getConnection(self, *args)
    def setConnection(self, *args): return _pyplanet.ossimPlanetClientConnection_setConnection(self, *args)
    def addMessage(self, *args): return _pyplanet.ossimPlanetClientConnection_addMessage(self, *args)
    def sendNextMessage(self): return _pyplanet.ossimPlanetClientConnection_sendNextMessage(self)
    def hasMessages(self): return _pyplanet.ossimPlanetClientConnection_hasMessages(self)
    def clearQueue(self): return _pyplanet.ossimPlanetClientConnection_clearQueue(self)
    def getSocket(self): return _pyplanet.ossimPlanetClientConnection_getSocket(self)
    def setSocket(self, *args): return _pyplanet.ossimPlanetClientConnection_setSocket(self, *args)
ossimPlanetClientConnection_swigregister = _pyplanet.ossimPlanetClientConnection_swigregister
ossimPlanetClientConnection_swigregister(ossimPlanetClientConnection)

class ossimPlanetClientThread(Referenced,Thread):
    __swig_setmethods__ = {}
    for _s in [Referenced,Thread]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetClientThread, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced,Thread]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetClientThread, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetClientThread()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetClientThread
    __del__ = lambda self : None;
    def run(self): return _pyplanet.ossimPlanetClientThread_run(self)
    def cancel(self): return _pyplanet.ossimPlanetClientThread_cancel(self)
    def newConnection(self, *args): return _pyplanet.ossimPlanetClientThread_newConnection(self, *args)
    def setConnection(self, *args): return _pyplanet.ossimPlanetClientThread_setConnection(self, *args)
    def removeConnection(self, *args): return _pyplanet.ossimPlanetClientThread_removeConnection(self, *args)
    def getConnection(self, *args): return _pyplanet.ossimPlanetClientThread_getConnection(self, *args)
    def sendMessage(self, *args): return _pyplanet.ossimPlanetClientThread_sendMessage(self, *args)
    def broadcastMessage(self, *args): return _pyplanet.ossimPlanetClientThread_broadcastMessage(self, *args)
    def getNumberOfConnections(self): return _pyplanet.ossimPlanetClientThread_getNumberOfConnections(self)
    def updateClientThreadBlock(self): return _pyplanet.ossimPlanetClientThread_updateClientThreadBlock(self)
ossimPlanetClientThread_swigregister = _pyplanet.ossimPlanetClientThread_swigregister
ossimPlanetClientThread_swigregister(ossimPlanetClientThread)

class ossimPlanetNodeFactoryBase(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetNodeFactoryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetNodeFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyplanet.delete_ossimPlanetNodeFactoryBase
    __del__ = lambda self : None;
    def create(self, *args): return _pyplanet.ossimPlanetNodeFactoryBase_create(self, *args)
ossimPlanetNodeFactoryBase_swigregister = _pyplanet.ossimPlanetNodeFactoryBase_swigregister
ossimPlanetNodeFactoryBase_swigregister(ossimPlanetNodeFactoryBase)

class ossimPlanetNodeFactory(ossimPlanetNodeFactoryBase):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetNodeFactoryBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetNodeFactory, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetNodeFactoryBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetNodeFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetNodeFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetNodeFactory
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyplanet.ossimPlanetNodeFactory_instance
    if _newclass:instance = staticmethod(_pyplanet.ossimPlanetNodeFactory_instance)
    def create(self, *args): return _pyplanet.ossimPlanetNodeFactory_create(self, *args)
ossimPlanetNodeFactory_swigregister = _pyplanet.ossimPlanetNodeFactory_swigregister
ossimPlanetNodeFactory_swigregister(ossimPlanetNodeFactory)

def ossimPlanetNodeFactory_instance():
  return _pyplanet.ossimPlanetNodeFactory_instance()
ossimPlanetNodeFactory_instance = _pyplanet.ossimPlanetNodeFactory_instance

class ossimPlanetNodeRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetNodeRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetNodeRegistry, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetNodeRegistry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetNodeRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyplanet.ossimPlanetNodeRegistry_instance
    if _newclass:instance = staticmethod(_pyplanet.ossimPlanetNodeRegistry_instance)
    def finalize(self): return _pyplanet.ossimPlanetNodeRegistry_finalize(self)
    def create(self, *args): return _pyplanet.ossimPlanetNodeRegistry_create(self, *args)
    def registerFactory(self, *args): return _pyplanet.ossimPlanetNodeRegistry_registerFactory(self, *args)
    def unregisterFactory(self, *args): return _pyplanet.ossimPlanetNodeRegistry_unregisterFactory(self, *args)
ossimPlanetNodeRegistry_swigregister = _pyplanet.ossimPlanetNodeRegistry_swigregister
ossimPlanetNodeRegistry_swigregister(ossimPlanetNodeRegistry)

def ossimPlanetNodeRegistry_instance():
  return _pyplanet.ossimPlanetNodeRegistry_instance()
ossimPlanetNodeRegistry_instance = _pyplanet.ossimPlanetNodeRegistry_instance

class ossimPlanetNodeCallback(ossimPlanetCallback):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetNodeCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetNodeCallback, name)
    __repr__ = _swig_repr
    def propertyChanged(self, *args): return _pyplanet.ossimPlanetNodeCallback_propertyChanged(self, *args)
    def destructingNode(self, *args): return _pyplanet.ossimPlanetNodeCallback_destructingNode(self, *args)
    def needsRedraw(self, *args): return _pyplanet.ossimPlanetNodeCallback_needsRedraw(self, *args)
    def nodeAdded(self, *args): return _pyplanet.ossimPlanetNodeCallback_nodeAdded(self, *args)
    def nodeRemoved(self, *args): return _pyplanet.ossimPlanetNodeCallback_nodeRemoved(self, *args)
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetNodeCallback()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetNodeCallback
    __del__ = lambda self : None;
ossimPlanetNodeCallback_swigregister = _pyplanet.ossimPlanetNodeCallback_swigregister
ossimPlanetNodeCallback_swigregister(ossimPlanetNodeCallback)

class ossimPlanetNode(Group,ossimPlanetCallbackIface_ossimPlanetNodeCallback,ossimPlanetActionReceiver):
    __swig_setmethods__ = {}
    for _s in [Group,ossimPlanetCallbackIface_ossimPlanetNodeCallback,ossimPlanetActionReceiver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Group,ossimPlanetCallbackIface_ossimPlanetNodeCallback,ossimPlanetActionReceiver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetNode, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetNode
    __del__ = lambda self : None;
    __swig_getmethods__["remove"] = lambda x: _pyplanet.ossimPlanetNode_remove
    if _newclass:remove = staticmethod(_pyplanet.ossimPlanetNode_remove)
    def setLayer(self, *args): return _pyplanet.ossimPlanetNode_setLayer(self, *args)
    def layer(self, *args): return _pyplanet.ossimPlanetNode_layer(self, *args)
    def addChild(self, *args): return _pyplanet.ossimPlanetNode_addChild(self, *args)
    def insertChild(self, *args): return _pyplanet.ossimPlanetNode_insertChild(self, *args)
    def replaceChild(self, *args): return _pyplanet.ossimPlanetNode_replaceChild(self, *args)
    def removeChildren(self, *args): return _pyplanet.ossimPlanetNode_removeChildren(self, *args)
    def enableFlag(self): return _pyplanet.ossimPlanetNode_enableFlag(self)
    def setEnableFlag(self, *args): return _pyplanet.ossimPlanetNode_setEnableFlag(self, *args)
    def intersectFlag(self): return _pyplanet.ossimPlanetNode_intersectFlag(self)
    def setIntersectFlag(self, *args): return _pyplanet.ossimPlanetNode_setIntersectFlag(self, *args)
    def setRedrawFlag(self, *args): return _pyplanet.ossimPlanetNode_setRedrawFlag(self, *args)
    def redrawFlag(self): return _pyplanet.ossimPlanetNode_redrawFlag(self)
    def id(self): return _pyplanet.ossimPlanetNode_id(self)
    def setId(self, *args): return _pyplanet.ossimPlanetNode_setId(self, *args)
    def setName(self, *args): return _pyplanet.ossimPlanetNode_setName(self, *args)
    def name(self, *args): return _pyplanet.ossimPlanetNode_name(self, *args)
    def setDescription(self, *args): return _pyplanet.ossimPlanetNode_setDescription(self, *args)
    def description(self, *args): return _pyplanet.ossimPlanetNode_description(self, *args)
    def lookAt(self, *args): return _pyplanet.ossimPlanetNode_lookAt(self, *args)
    def setLookAt(self, *args): return _pyplanet.ossimPlanetNode_setLookAt(self, *args)
    def traverse(self, *args): return _pyplanet.ossimPlanetNode_traverse(self, *args)
    def execute(self, *args): return _pyplanet.ossimPlanetNode_execute(self, *args)
    __swig_getmethods__["findNode"] = lambda x: _pyplanet.ossimPlanetNode_findNode
    if _newclass:findNode = staticmethod(_pyplanet.ossimPlanetNode_findNode)
    def notifyPropertyChanged(self, *args): return _pyplanet.ossimPlanetNode_notifyPropertyChanged(self, *args)
    def notifyDestructing(self, *args): return _pyplanet.ossimPlanetNode_notifyDestructing(self, *args)
    def notifyNeedsRedraw(self): return _pyplanet.ossimPlanetNode_notifyNeedsRedraw(self)
    def notifyAddChild(self, *args): return _pyplanet.ossimPlanetNode_notifyAddChild(self, *args)
    def notifyRemoveChild(self, *args): return _pyplanet.ossimPlanetNode_notifyRemoveChild(self, *args)
ossimPlanetNode_swigregister = _pyplanet.ossimPlanetNode_swigregister
ossimPlanetNode_swigregister(ossimPlanetNode)

def ossimPlanetNode_remove(*args):
  return _pyplanet.ossimPlanetNode_remove(*args)
ossimPlanetNode_remove = _pyplanet.ossimPlanetNode_remove

def ossimPlanetNode_findNode(*args):
  return _pyplanet.ossimPlanetNode_findNode(*args)
ossimPlanetNode_findNode = _pyplanet.ossimPlanetNode_findNode

class ossimPlanetNodeReraiseCallback(ossimPlanetNodeCallback):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetNodeCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetNodeReraiseCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetNodeCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetNodeReraiseCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetNodeReraiseCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    def setNode(self, *args): return _pyplanet.ossimPlanetNodeReraiseCallback_setNode(self, *args)
    def node(self, *args): return _pyplanet.ossimPlanetNodeReraiseCallback_node(self, *args)
    def propertyChanged(self, *args): return _pyplanet.ossimPlanetNodeReraiseCallback_propertyChanged(self, *args)
    def destructingNode(self, *args): return _pyplanet.ossimPlanetNodeReraiseCallback_destructingNode(self, *args)
    def needsRedraw(self, *args): return _pyplanet.ossimPlanetNodeReraiseCallback_needsRedraw(self, *args)
    def nodeAdded(self, *args): return _pyplanet.ossimPlanetNodeReraiseCallback_nodeAdded(self, *args)
    def nodeRemoved(self, *args): return _pyplanet.ossimPlanetNodeReraiseCallback_nodeRemoved(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetNodeReraiseCallback
    __del__ = lambda self : None;
ossimPlanetNodeReraiseCallback_swigregister = _pyplanet.ossimPlanetNodeReraiseCallback_swigregister
ossimPlanetNodeReraiseCallback_swigregister(ossimPlanetNodeReraiseCallback)

class ossimPlanetLayer(ossimPlanetNode):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLayer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetLayer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLayer
    __del__ = lambda self : None;
    def execute(self, *args): return _pyplanet.ossimPlanetLayer_execute(self, *args)
    def setModel(self, *args): return _pyplanet.ossimPlanetLayer_setModel(self, *args)
    def model(self, *args): return _pyplanet.ossimPlanetLayer_model(self, *args)
    def setPlanet(self, *args): return _pyplanet.ossimPlanetLayer_setPlanet(self, *args)
    def planet(self, *args): return _pyplanet.ossimPlanetLayer_planet(self, *args)
    def needsRemoving(self, *args): return _pyplanet.ossimPlanetLayer_needsRemoving(self, *args)
    __swig_getmethods__["findLayer"] = lambda x: _pyplanet.ossimPlanetLayer_findLayer
    if _newclass:findLayer = staticmethod(_pyplanet.ossimPlanetLayer_findLayer)
    def traverse(self, *args): return _pyplanet.ossimPlanetLayer_traverse(self, *args)
ossimPlanetLayer_swigregister = _pyplanet.ossimPlanetLayer_swigregister
ossimPlanetLayer_swigregister(ossimPlanetLayer)

def ossimPlanetLayer_findLayer(*args):
  return _pyplanet.ossimPlanetLayer_findLayer(*args)
ossimPlanetLayer_findLayer = _pyplanet.ossimPlanetLayer_findLayer

class ossimPlanetCloudLayer(ossimPlanetLayer):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetLayer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetCloudLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetLayer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetCloudLayer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetCloudLayer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetCloudLayer
    __del__ = lambda self : None;
    def updateTexture(self, *args): return _pyplanet.ossimPlanetCloudLayer_updateTexture(self, *args)
    def computeMesh(self, *args): return _pyplanet.ossimPlanetCloudLayer_computeMesh(self, *args)
    def setAlphaValue(self, *args): return _pyplanet.ossimPlanetCloudLayer_setAlphaValue(self, *args)
    def traverse(self, *args): return _pyplanet.ossimPlanetCloudLayer_traverse(self, *args)
    def setHeading(self, *args): return _pyplanet.ossimPlanetCloudLayer_setHeading(self, *args)
    def setSpeedPerHour(self, *args): return _pyplanet.ossimPlanetCloudLayer_setSpeedPerHour(self, *args)
    def setSpeedPerSecond(self, *args): return _pyplanet.ossimPlanetCloudLayer_setSpeedPerSecond(self, *args)
    def setScale(self, *args): return _pyplanet.ossimPlanetCloudLayer_setScale(self, *args)
    def setGrid(self, *args): return _pyplanet.ossimPlanetCloudLayer_setGrid(self, *args)
    def setAutoUpdateTextureMatrixFlag(self, *args): return _pyplanet.ossimPlanetCloudLayer_setAutoUpdateTextureMatrixFlag(self, *args)
    def autoUpdateTextureMatrixFlag(self): return _pyplanet.ossimPlanetCloudLayer_autoUpdateTextureMatrixFlag(self)
    def moveToLocationLatLonAltitude(self, *args): return _pyplanet.ossimPlanetCloudLayer_moveToLocationLatLonAltitude(self, *args)
    def grid(self): return _pyplanet.ossimPlanetCloudLayer_grid(self)
    def setTextureMatrix(self, *args): return _pyplanet.ossimPlanetCloudLayer_setTextureMatrix(self, *args)
    def textureMatrixAttribute(self): return _pyplanet.ossimPlanetCloudLayer_textureMatrixAttribute(self)
    def textureMatrix(self): return _pyplanet.ossimPlanetCloudLayer_textureMatrix(self)
    def setMaxAltitudeToShowClouds(self, *args): return _pyplanet.ossimPlanetCloudLayer_setMaxAltitudeToShowClouds(self, *args)
    def maxAltitudeToShowClouds(self): return _pyplanet.ossimPlanetCloudLayer_maxAltitudeToShowClouds(self)
ossimPlanetCloudLayer_swigregister = _pyplanet.ossimPlanetCloudLayer_swigregister
ossimPlanetCloudLayer_swigregister(ossimPlanetCloudLayer)

class ossimPlanetCloud(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetCloud, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetCloud, name)
    __repr__ = _swig_repr
    TEXTURE_SIZE_256_256 = _pyplanet.ossimPlanetCloud_TEXTURE_SIZE_256_256
    TEXTURE_SIZE_512_512 = _pyplanet.ossimPlanetCloud_TEXTURE_SIZE_512_512
    TEXTURE_SIZE_1024_1024 = _pyplanet.ossimPlanetCloud_TEXTURE_SIZE_1024_1024
    TEXTURE_SIZE_2048_2048 = _pyplanet.ossimPlanetCloud_TEXTURE_SIZE_2048_2048
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetCloud(*args)
        try: self.this.append(this)
        except: self.this = this
    def makeCloud(self, *args): return _pyplanet.ossimPlanetCloud_makeCloud(self, *args)
    def image(self): return _pyplanet.ossimPlanetCloud_image(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetCloud
    __del__ = lambda self : None;
ossimPlanetCloud_swigregister = _pyplanet.ossimPlanetCloud_swigregister
ossimPlanetCloud_swigregister(ossimPlanetCloud)

class ossimPlanetCompass(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetCompass, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetCompass, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetCompass()
        try: self.this.append(this)
        except: self.this = this
    def setCompassTexture(self, *args): return _pyplanet.ossimPlanetCompass_setCompassTexture(self, *args)
    def traverse(self, *args): return _pyplanet.ossimPlanetCompass_traverse(self, *args)
    def isAnimating(self): return _pyplanet.ossimPlanetCompass_isAnimating(self)
    def setAnimation(self, *args): return _pyplanet.ossimPlanetCompass_setAnimation(self, *args)
    def heading(self): return _pyplanet.ossimPlanetCompass_heading(self)
    def setHeading(self, *args): return _pyplanet.ossimPlanetCompass_setHeading(self, *args)
    def setHeadingRelativeToNorth(self, *args): return _pyplanet.ossimPlanetCompass_setHeadingRelativeToNorth(self, *args)
    def pitch(self): return _pyplanet.ossimPlanetCompass_pitch(self)
    def setPitch(self, *args): return _pyplanet.ossimPlanetCompass_setPitch(self, *args)
    def roll(self): return _pyplanet.ossimPlanetCompass_roll(self)
    def setRoll(self, *args): return _pyplanet.ossimPlanetCompass_setRoll(self, *args)
    def setRotateByViewMatrix(self, *args): return _pyplanet.ossimPlanetCompass_setRotateByViewMatrix(self, *args)
    def position(self): return _pyplanet.ossimPlanetCompass_position(self)
    def setPosition(self, *args): return _pyplanet.ossimPlanetCompass_setPosition(self, *args)
    def setPositionByPercentage(self, *args): return _pyplanet.ossimPlanetCompass_setPositionByPercentage(self, *args)
    def scale(self): return _pyplanet.ossimPlanetCompass_scale(self)
    def setScale(self, *args): return _pyplanet.ossimPlanetCompass_setScale(self, *args)
    def isVisible(self): return _pyplanet.ossimPlanetCompass_isVisible(self)
    def buildCompass(self): return _pyplanet.ossimPlanetCompass_buildCompass(self)
    def updateCompass(self): return _pyplanet.ossimPlanetCompass_updateCompass(self)
ossimPlanetCompass_swigregister = _pyplanet.ossimPlanetCompass_swigregister
ossimPlanetCompass_swigregister(ossimPlanetCompass)

class ossimPlanetGrid(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetGrid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    LAT_IDX = _pyplanet.ossimPlanetGrid_LAT_IDX
    LON_IDX = _pyplanet.ossimPlanetGrid_LON_IDX
    HGT_IDX = _pyplanet.ossimPlanetGrid_HGT_IDX
    X_IDX = _pyplanet.ossimPlanetGrid_X_IDX
    Y_IDX = _pyplanet.ossimPlanetGrid_Y_IDX
    Z_IDX = _pyplanet.ossimPlanetGrid_Z_IDX
    UNKNOWN = _pyplanet.ossimPlanetGrid_UNKNOWN
    GEODETIC_MODEL = _pyplanet.ossimPlanetGrid_GEODETIC_MODEL
    def modelType(self): return _pyplanet.ossimPlanetGrid_modelType(self)
    def getRootIds(self, *args): return _pyplanet.ossimPlanetGrid_getRootIds(self, *args)
    def getInternationalDateLineCrossings(self, *args): return _pyplanet.ossimPlanetGrid_getInternationalDateLineCrossings(self, *args)
    def crossesInternationalDateLine(self, *args): return _pyplanet.ossimPlanetGrid_crossesInternationalDateLine(self, *args)
    def createModelPoints(self, *args): return _pyplanet.ossimPlanetGrid_createModelPoints(self, *args)
    def globalGridToModel(self, *args): return _pyplanet.ossimPlanetGrid_globalGridToModel(self, *args)
    def modelToGlobalGrid(self, *args): return _pyplanet.ossimPlanetGrid_modelToGlobalGrid(self, *args)
    def modelBound(self, *args): return _pyplanet.ossimPlanetGrid_modelBound(self, *args)
    def localNdcToGlobalGrid(self, *args): return _pyplanet.ossimPlanetGrid_localNdcToGlobalGrid(self, *args)
    def localNdcToModel(self, *args): return _pyplanet.ossimPlanetGrid_localNdcToModel(self, *args)
    def numberOfTilesPerFace(self, *args): return _pyplanet.ossimPlanetGrid_numberOfTilesPerFace(self, *args)
    def bounds(self, *args): return _pyplanet.ossimPlanetGrid_bounds(self, *args)
    def boundsToModel(self, *args): return _pyplanet.ossimPlanetGrid_boundsToModel(self, *args)
    def centerGrid(self, *args): return _pyplanet.ossimPlanetGrid_centerGrid(self, *args)
    def centerModel(self, *args): return _pyplanet.ossimPlanetGrid_centerModel(self, *args)
    def widthHeight(self, *args): return _pyplanet.ossimPlanetGrid_widthHeight(self, *args)
    def origin(self, *args): return _pyplanet.ossimPlanetGrid_origin(self, *args)
    def getUnitsPerPixel(self, *args): return _pyplanet.ossimPlanetGrid_getUnitsPerPixel(self, *args)
    def convertToGeographicExtents(self, *args): return _pyplanet.ossimPlanetGrid_convertToGeographicExtents(self, *args)
    def widthHeightInModelSpace(self, *args): return _pyplanet.ossimPlanetGrid_widthHeightInModelSpace(self, *args)
    def numberOfFaces(self): return _pyplanet.ossimPlanetGrid_numberOfFaces(self)
    def findGridBound(self, *args): return _pyplanet.ossimPlanetGrid_findGridBound(self, *args)
    def isPolar(self, *args): return _pyplanet.ossimPlanetGrid_isPolar(self, *args)
    def newBackwardCompatableGrid(self, *args): return _pyplanet.ossimPlanetGrid_newBackwardCompatableGrid(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetGrid
    __del__ = lambda self : None;
ossimPlanetGrid_swigregister = _pyplanet.ossimPlanetGrid_swigregister
ossimPlanetGrid_swigregister(ossimPlanetGrid)

class ossimPlanetCubeGrid2(ossimPlanetGrid):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetCubeGrid2, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetCubeGrid2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetCubeGrid2()
        try: self.this.append(this)
        except: self.this = this
    def getRootIds(self, *args): return _pyplanet.ossimPlanetCubeGrid2_getRootIds(self, *args)
    def globalGridToModel(self, *args): return _pyplanet.ossimPlanetCubeGrid2_globalGridToModel(self, *args)
    def modelToGlobalGrid(self, *args): return _pyplanet.ossimPlanetCubeGrid2_modelToGlobalGrid(self, *args)
    def widthHeightInModelSpace(self, *args): return _pyplanet.ossimPlanetCubeGrid2_widthHeightInModelSpace(self, *args)
    def findGridBound(self, *args): return _pyplanet.ossimPlanetCubeGrid2_findGridBound(self, *args)
    def numberOfFaces(self): return _pyplanet.ossimPlanetCubeGrid2_numberOfFaces(self)
    def newBackwardCompatableGrid(self, *args): return _pyplanet.ossimPlanetCubeGrid2_newBackwardCompatableGrid(self, *args)
    def isPolar(self, *args): return _pyplanet.ossimPlanetCubeGrid2_isPolar(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetCubeGrid2
    __del__ = lambda self : None;
ossimPlanetCubeGrid2_swigregister = _pyplanet.ossimPlanetCubeGrid2_swigregister
ossimPlanetCubeGrid2_swigregister(ossimPlanetCubeGrid2)

class ossimPlanetPlaneGrid2(ossimPlanetGrid):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetGrid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetPlaneGrid2, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetGrid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetPlaneGrid2, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetPlaneGrid2()
        try: self.this.append(this)
        except: self.this = this
    def getRootIds(self, *args): return _pyplanet.ossimPlanetPlaneGrid2_getRootIds(self, *args)
    def globalGridToModel(self, *args): return _pyplanet.ossimPlanetPlaneGrid2_globalGridToModel(self, *args)
    def modelToGlobalGrid(self, *args): return _pyplanet.ossimPlanetPlaneGrid2_modelToGlobalGrid(self, *args)
    def widthHeightInModelSpace(self, *args): return _pyplanet.ossimPlanetPlaneGrid2_widthHeightInModelSpace(self, *args)
    def findGridBound(self, *args): return _pyplanet.ossimPlanetPlaneGrid2_findGridBound(self, *args)
    def numberOfFaces(self): return _pyplanet.ossimPlanetPlaneGrid2_numberOfFaces(self)
    def newBackwardCompatableGrid(self, *args): return _pyplanet.ossimPlanetPlaneGrid2_newBackwardCompatableGrid(self, *args)
    def isPolar(self, *args): return _pyplanet.ossimPlanetPlaneGrid2_isPolar(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetPlaneGrid2
    __del__ = lambda self : None;
ossimPlanetPlaneGrid2_swigregister = _pyplanet.ossimPlanetPlaneGrid2_swigregister
ossimPlanetPlaneGrid2_swigregister(ossimPlanetPlaneGrid2)

class ossimPlanetAdjustableCubeGrid(ossimPlanetCubeGrid2):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetCubeGrid2]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAdjustableCubeGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetCubeGrid2]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAdjustableCubeGrid, name)
    __repr__ = _swig_repr
    LOW_CAP = _pyplanet.ossimPlanetAdjustableCubeGrid_LOW_CAP
    MEDIUM_LOW_CAP = _pyplanet.ossimPlanetAdjustableCubeGrid_MEDIUM_LOW_CAP
    MEDIUM_CAP = _pyplanet.ossimPlanetAdjustableCubeGrid_MEDIUM_CAP
    MEDIUM_HIGH_CAP = _pyplanet.ossimPlanetAdjustableCubeGrid_MEDIUM_HIGH_CAP
    HIGH_CAP = _pyplanet.ossimPlanetAdjustableCubeGrid_HIGH_CAP
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetAdjustableCubeGrid(*args)
        try: self.this.append(this)
        except: self.this = this
    def setCapLocation(self, *args): return _pyplanet.ossimPlanetAdjustableCubeGrid_setCapLocation(self, *args)
    def getRootIds(self, *args): return _pyplanet.ossimPlanetAdjustableCubeGrid_getRootIds(self, *args)
    def globalGridToModel(self, *args): return _pyplanet.ossimPlanetAdjustableCubeGrid_globalGridToModel(self, *args)
    def modelToGlobalGrid(self, *args): return _pyplanet.ossimPlanetAdjustableCubeGrid_modelToGlobalGrid(self, *args)
    def widthHeightInModelSpace(self, *args): return _pyplanet.ossimPlanetAdjustableCubeGrid_widthHeightInModelSpace(self, *args)
    def findGridBound(self, *args): return _pyplanet.ossimPlanetAdjustableCubeGrid_findGridBound(self, *args)
    def numberOfFaces(self): return _pyplanet.ossimPlanetAdjustableCubeGrid_numberOfFaces(self)
    def isPolar(self, *args): return _pyplanet.ossimPlanetAdjustableCubeGrid_isPolar(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAdjustableCubeGrid
    __del__ = lambda self : None;
ossimPlanetAdjustableCubeGrid_swigregister = _pyplanet.ossimPlanetAdjustableCubeGrid_swigregister
ossimPlanetAdjustableCubeGrid_swigregister(ossimPlanetAdjustableCubeGrid)

class ossimPlanetGridUtility(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetGridUtility, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetGridUtility, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    LAT = _pyplanet.ossimPlanetGridUtility_LAT
    LON = _pyplanet.ossimPlanetGridUtility_LON
    HGT = _pyplanet.ossimPlanetGridUtility_HGT
    GRIDX = _pyplanet.ossimPlanetGridUtility_GRIDX
    GRIDY = _pyplanet.ossimPlanetGridUtility_GRIDY
    GRIDZ = _pyplanet.ossimPlanetGridUtility_GRIDZ
    def getGeographicLonCrossings(self, *args): return _pyplanet.ossimPlanetGridUtility_getGeographicLonCrossings(self, *args)
    def crossesGeographicBounds(self, *args): return _pyplanet.ossimPlanetGridUtility_crossesGeographicBounds(self, *args)
    def getWidthHeightInDegrees(self, *args): return _pyplanet.ossimPlanetGridUtility_getWidthHeightInDegrees(self, *args)
    def getGridSpacing(self, *args): return _pyplanet.ossimPlanetGridUtility_getGridSpacing(self, *args)
    def getPixelScaleAsDegrees(self, *args): return _pyplanet.ossimPlanetGridUtility_getPixelScaleAsDegrees(self, *args)
    def getPixelScaleAsMeters(self, *args): return _pyplanet.ossimPlanetGridUtility_getPixelScaleAsMeters(self, *args)
    def getPixelScale(self, *args): return _pyplanet.ossimPlanetGridUtility_getPixelScale(self, *args)
    def getLocalRowColumn(self, *args): return _pyplanet.ossimPlanetGridUtility_getLocalRowColumn(self, *args)
    def mapToRowCol(self, *args): return _pyplanet.ossimPlanetGridUtility_mapToRowCol(self, *args)
    def getFace(self, *args): return _pyplanet.ossimPlanetGridUtility_getFace(self, *args)
    def getNumberOfTilesWideHighPerFace(self, *args): return _pyplanet.ossimPlanetGridUtility_getNumberOfTilesWideHighPerFace(self, *args)
    def getNumberOfFaces(self): return _pyplanet.ossimPlanetGridUtility_getNumberOfFaces(self)
    def getCenterGridPoint(self, *args): return _pyplanet.ossimPlanetGridUtility_getCenterGridPoint(self, *args)
    def createGridPoints(self, *args): return _pyplanet.ossimPlanetGridUtility_createGridPoints(self, *args)
    def getLatLon(self, *args): return _pyplanet.ossimPlanetGridUtility_getLatLon(self, *args)
    def getGridPoint(self, *args): return _pyplanet.ossimPlanetGridUtility_getGridPoint(self, *args)
    def getLatLonCorners(self, *args): return _pyplanet.ossimPlanetGridUtility_getLatLonCorners(self, *args)
    def getCenterLatLon(self, *args): return _pyplanet.ossimPlanetGridUtility_getCenterLatLon(self, *args)
    def getLatLonBounds(self, *args): return _pyplanet.ossimPlanetGridUtility_getLatLonBounds(self, *args)
    def getNumberOfTilesWideHigh(self, *args): return _pyplanet.ossimPlanetGridUtility_getNumberOfTilesWideHigh(self, *args)
    def getNumberOfTiles(self, *args): return _pyplanet.ossimPlanetGridUtility_getNumberOfTiles(self, *args)
    def getTotalNumberOfTiles(self, *args): return _pyplanet.ossimPlanetGridUtility_getTotalNumberOfTiles(self, *args)
    def getId(self, *args): return _pyplanet.ossimPlanetGridUtility_getId(self, *args)
    def getTileWidth(self): return _pyplanet.ossimPlanetGridUtility_getTileWidth(self)
    def getTileHeight(self): return _pyplanet.ossimPlanetGridUtility_getTileHeight(self)
    def setTileWidthHeight(self, *args): return _pyplanet.ossimPlanetGridUtility_setTileWidthHeight(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetGridUtility
    __del__ = lambda self : None;
ossimPlanetGridUtility_swigregister = _pyplanet.ossimPlanetGridUtility_swigregister
ossimPlanetGridUtility_swigregister(ossimPlanetGridUtility)

class ossimPlanetCubeGrid(ossimPlanetGridUtility):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetGridUtility]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetCubeGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetGridUtility]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetCubeGrid, name)
    __repr__ = _swig_repr
    def __init__(self, tileWidth = 256, tileHeight = 256): 
        this = _pyplanet.new_ossimPlanetCubeGrid(tileWidth, tileHeight)
        try: self.this.append(this)
        except: self.this = this
    def getPixelScale(self, *args): return _pyplanet.ossimPlanetCubeGrid_getPixelScale(self, *args)
    def getWidthHeightInDegrees(self, *args): return _pyplanet.ossimPlanetCubeGrid_getWidthHeightInDegrees(self, *args)
    def getLatLon(self, *args): return _pyplanet.ossimPlanetCubeGrid_getLatLon(self, *args)
    def getGridPoint(self, *args): return _pyplanet.ossimPlanetCubeGrid_getGridPoint(self, *args)
    def getNumberOfFaces(self): return _pyplanet.ossimPlanetCubeGrid_getNumberOfFaces(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetCubeGrid
    __del__ = lambda self : None;
ossimPlanetCubeGrid_swigregister = _pyplanet.ossimPlanetCubeGrid_swigregister
ossimPlanetCubeGrid_swigregister(ossimPlanetCubeGrid)

class ossimPlanetDatabasePager(DatabasePager):
    __swig_setmethods__ = {}
    for _s in [DatabasePager]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetDatabasePager, name, value)
    __swig_getmethods__ = {}
    for _s in [DatabasePager]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetDatabasePager, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetDatabasePager()
        try: self.this.append(this)
        except: self.this = this
    def clone(self): return _pyplanet.ossimPlanetDatabasePager_clone(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetDatabasePager
    __del__ = lambda self : None;
ossimPlanetDatabasePager_swigregister = _pyplanet.ossimPlanetDatabasePager_swigregister
ossimPlanetDatabasePager_swigregister(ossimPlanetDatabasePager)

class ossimPlanetDepthPartitionNode(Group):
    __swig_setmethods__ = {}
    for _s in [Group]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetDepthPartitionNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Group]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetDepthPartitionNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetDepthPartitionNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.ossimPlanetDepthPartitionNode_cloneType(self)
    def clone(self, *args): return _pyplanet.ossimPlanetDepthPartitionNode_clone(self, *args)
    def isSameKindAs(self, *args): return _pyplanet.ossimPlanetDepthPartitionNode_isSameKindAs(self, *args)
    def className(self): return _pyplanet.ossimPlanetDepthPartitionNode_className(self)
    def libraryName(self): return _pyplanet.ossimPlanetDepthPartitionNode_libraryName(self)
    def accept(self, *args): return _pyplanet.ossimPlanetDepthPartitionNode_accept(self, *args)
    def setActive(self, *args): return _pyplanet.ossimPlanetDepthPartitionNode_setActive(self, *args)
    def getActive(self): return _pyplanet.ossimPlanetDepthPartitionNode_getActive(self)
    def setClearColorBuffer(self, *args): return _pyplanet.ossimPlanetDepthPartitionNode_setClearColorBuffer(self, *args)
    def getClearColorBuffer(self): return _pyplanet.ossimPlanetDepthPartitionNode_getClearColorBuffer(self)
    def setRenderOrder(self, *args): return _pyplanet.ossimPlanetDepthPartitionNode_setRenderOrder(self, *args)
    def getRenderOrder(self): return _pyplanet.ossimPlanetDepthPartitionNode_getRenderOrder(self)
    def setMaxTraversalDepth(self, *args): return _pyplanet.ossimPlanetDepthPartitionNode_setMaxTraversalDepth(self, *args)
    def getMaxTraversalDepth(self): return _pyplanet.ossimPlanetDepthPartitionNode_getMaxTraversalDepth(self)
    def traverse(self, *args): return _pyplanet.ossimPlanetDepthPartitionNode_traverse(self, *args)
    def addChild(self, *args): return _pyplanet.ossimPlanetDepthPartitionNode_addChild(self, *args)
    def insertChild(self, *args): return _pyplanet.ossimPlanetDepthPartitionNode_insertChild(self, *args)
    def removeChildren(self, *args): return _pyplanet.ossimPlanetDepthPartitionNode_removeChildren(self, *args)
    def setChild(self, *args): return _pyplanet.ossimPlanetDepthPartitionNode_setChild(self, *args)
ossimPlanetDepthPartitionNode_swigregister = _pyplanet.ossimPlanetDepthPartitionNode_swigregister
ossimPlanetDepthPartitionNode_swigregister(ossimPlanetDepthPartitionNode)

class ossimPlanetDistanceAccumulator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetDistanceAccumulator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetDistanceAccumulator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetDistanceAccumulator()
        try: self.this.append(this)
        except: self.this = this
    def apply(self, *args): return _pyplanet.ossimPlanetDistanceAccumulator_apply(self, *args)
    def setMatrices(self, *args): return _pyplanet.ossimPlanetDistanceAccumulator_setMatrices(self, *args)
    def reset(self): return _pyplanet.ossimPlanetDistanceAccumulator_reset(self)
    def computeCameraPairs(self): return _pyplanet.ossimPlanetDistanceAccumulator_computeCameraPairs(self)
    def getCameraPairs(self): return _pyplanet.ossimPlanetDistanceAccumulator_getCameraPairs(self)
    def getDistancePairs(self): return _pyplanet.ossimPlanetDistanceAccumulator_getDistancePairs(self)
    def getLimits(self): return _pyplanet.ossimPlanetDistanceAccumulator_getLimits(self)
    def setNearFarRatio(self, *args): return _pyplanet.ossimPlanetDistanceAccumulator_setNearFarRatio(self, *args)
    def getNearFarRatio(self): return _pyplanet.ossimPlanetDistanceAccumulator_getNearFarRatio(self)
    def setMaxDepth(self, *args): return _pyplanet.ossimPlanetDistanceAccumulator_setMaxDepth(self, *args)
    def getMaxDepth(self): return _pyplanet.ossimPlanetDistanceAccumulator_getMaxDepth(self)
ossimPlanetDistanceAccumulator_swigregister = _pyplanet.ossimPlanetDistanceAccumulator_swigregister
ossimPlanetDistanceAccumulator_swigregister(ossimPlanetDistanceAccumulator)

class ossimPlanetElevationRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetElevationRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetElevationRegistry, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetElevationRegistry()
        try: self.this.append(this)
        except: self.this = this
    def registerFactory(self, *args): return _pyplanet.ossimPlanetElevationRegistry_registerFactory(self, *args)
    def unregisterFactory(self, *args): return _pyplanet.ossimPlanetElevationRegistry_unregisterFactory(self, *args)
    def openDatabase(self, *args): return _pyplanet.ossimPlanetElevationRegistry_openDatabase(self, *args)
    __swig_getmethods__["instance"] = lambda x: _pyplanet.ossimPlanetElevationRegistry_instance
    if _newclass:instance = staticmethod(_pyplanet.ossimPlanetElevationRegistry_instance)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetElevationRegistry
    __del__ = lambda self : None;
ossimPlanetElevationRegistry_swigregister = _pyplanet.ossimPlanetElevationRegistry_swigregister
ossimPlanetElevationRegistry_swigregister(ossimPlanetElevationRegistry)

def ossimPlanetElevationRegistry_instance():
  return _pyplanet.ossimPlanetElevationRegistry_instance()
ossimPlanetElevationRegistry_instance = _pyplanet.ossimPlanetElevationRegistry_instance

class ossimPlanetElevationFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetElevationFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetElevationFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetElevationFactory()
        try: self.this.append(this)
        except: self.this = this
    def openDatabase(self, *args): return _pyplanet.ossimPlanetElevationFactory_openDatabase(self, *args)
    __swig_getmethods__["instance"] = lambda x: _pyplanet.ossimPlanetElevationFactory_instance
    if _newclass:instance = staticmethod(_pyplanet.ossimPlanetElevationFactory_instance)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetElevationFactory
    __del__ = lambda self : None;
ossimPlanetElevationFactory_swigregister = _pyplanet.ossimPlanetElevationFactory_swigregister
ossimPlanetElevationFactory_swigregister(ossimPlanetElevationFactory)

def ossimPlanetElevationFactory_instance():
  return _pyplanet.ossimPlanetElevationFactory_instance()
ossimPlanetElevationFactory_instance = _pyplanet.ossimPlanetElevationFactory_instance

class ossimPlanetElevationGrid(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetElevationGrid, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetElevationGrid, name)
    __repr__ = _swig_repr
    def __init__(self, w = 1, h = 1): 
        this = _pyplanet.new_ossimPlanetElevationGrid(w, h)
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _pyplanet.ossimPlanetElevationGrid___getitem__(self, *args)
    def row(self, *args): return _pyplanet.ossimPlanetElevationGrid_row(self, *args)
    def getWidth(self): return _pyplanet.ossimPlanetElevationGrid_getWidth(self)
    def getHeight(self): return _pyplanet.ossimPlanetElevationGrid_getHeight(self)
    def resize(self, *args): return _pyplanet.ossimPlanetElevationGrid_resize(self, *args)
    def data(self, *args): return _pyplanet.ossimPlanetElevationGrid_data(self, *args)
    def scaleBy2Nearest(self): return _pyplanet.ossimPlanetElevationGrid_scaleBy2Nearest(self)
    def scaleBy2Bilinear(self): return _pyplanet.ossimPlanetElevationGrid_scaleBy2Bilinear(self)
    def copyGrid(self, *args): return _pyplanet.ossimPlanetElevationGrid_copyGrid(self, *args)
    def isEqualTo(self, *args): return _pyplanet.ossimPlanetElevationGrid_isEqualTo(self, *args)
ossimPlanetElevationGrid_swigregister = _pyplanet.ossimPlanetElevationGrid_swigregister
ossimPlanetElevationGrid_swigregister(ossimPlanetElevationGrid)

class ossimPlanetElevationDatabase(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetElevationDatabase, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetElevationDatabase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getTexture(self, *args): return _pyplanet.ossimPlanetElevationDatabase_getTexture(self, *args)
    def open(self, *args): return _pyplanet.ossimPlanetElevationDatabase_open(self, *args)
    def getLocation(self): return _pyplanet.ossimPlanetElevationDatabase_getLocation(self)
    def fillNullWithGeoidOffsetFlag(self): return _pyplanet.ossimPlanetElevationDatabase_fillNullWithGeoidOffsetFlag(self)
    def setFillNullWithGeoidOffsetFlag(self, *args): return _pyplanet.ossimPlanetElevationDatabase_setFillNullWithGeoidOffsetFlag(self, *args)
    def setGeoRefModel(self, *args): return _pyplanet.ossimPlanetElevationDatabase_setGeoRefModel(self, *args)
    def geoRefModel(self): return _pyplanet.ossimPlanetElevationDatabase_geoRefModel(self)
    def sortByGsd(self): return _pyplanet.ossimPlanetElevationDatabase_sortByGsd(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetElevationDatabase
    __del__ = lambda self : None;
ossimPlanetElevationDatabase_swigregister = _pyplanet.ossimPlanetElevationDatabase_swigregister
ossimPlanetElevationDatabase_swigregister(ossimPlanetElevationDatabase)

class ossimPlanetElevationDatabaseGroup(ossimPlanetTextureLayerGroup):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetTextureLayerGroup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetElevationDatabaseGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetTextureLayerGroup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetElevationDatabaseGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetElevationDatabaseGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def dup(self): return _pyplanet.ossimPlanetElevationDatabaseGroup_dup(self)
    def dupType(self): return _pyplanet.ossimPlanetElevationDatabaseGroup_dupType(self)
    def getTexture(self, *args): return _pyplanet.ossimPlanetElevationDatabaseGroup_getTexture(self, *args)
    def replaceLayer(self, *args): return _pyplanet.ossimPlanetElevationDatabaseGroup_replaceLayer(self, *args)
    def addTop(self, *args): return _pyplanet.ossimPlanetElevationDatabaseGroup_addTop(self, *args)
    def addBeforeIdx(self, *args): return _pyplanet.ossimPlanetElevationDatabaseGroup_addBeforeIdx(self, *args)
    def addBeforeLayer(self, *args): return _pyplanet.ossimPlanetElevationDatabaseGroup_addBeforeLayer(self, *args)
    def addAfterIdx(self, *args): return _pyplanet.ossimPlanetElevationDatabaseGroup_addAfterIdx(self, *args)
    def addAfterLayer(self, *args): return _pyplanet.ossimPlanetElevationDatabaseGroup_addAfterLayer(self, *args)
    def addBottom(self, *args): return _pyplanet.ossimPlanetElevationDatabaseGroup_addBottom(self, *args)
    def setGeoRefModel(self, *args): return _pyplanet.ossimPlanetElevationDatabaseGroup_setGeoRefModel(self, *args)
    def setFillNullWithGeoidOffsetFlag(self, *args): return _pyplanet.ossimPlanetElevationDatabaseGroup_setFillNullWithGeoidOffsetFlag(self, *args)
    def fillNullWithGeoidOffsetFlag(self): return _pyplanet.ossimPlanetElevationDatabaseGroup_fillNullWithGeoidOffsetFlag(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetElevationDatabaseGroup
    __del__ = lambda self : None;
ossimPlanetElevationDatabaseGroup_swigregister = _pyplanet.ossimPlanetElevationDatabaseGroup_swigregister
ossimPlanetElevationDatabaseGroup_swigregister(ossimPlanetElevationDatabaseGroup)

class ossimPlanetDtedElevationDatabase(ossimPlanetElevationDatabase):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetElevationDatabase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetDtedElevationDatabase, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetElevationDatabase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetDtedElevationDatabase, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetDtedElevationDatabase(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetDtedElevationDatabase
    __del__ = lambda self : None;
    def dup(self): return _pyplanet.ossimPlanetDtedElevationDatabase_dup(self)
    def dupType(self): return _pyplanet.ossimPlanetDtedElevationDatabase_dupType(self)
    def updateExtents(self): return _pyplanet.ossimPlanetDtedElevationDatabase_updateExtents(self)
    def updateStats(self): return _pyplanet.ossimPlanetDtedElevationDatabase_updateStats(self)
    def resetStats(self): return _pyplanet.ossimPlanetDtedElevationDatabase_resetStats(self)
    def open(self, *args): return _pyplanet.ossimPlanetDtedElevationDatabase_open(self, *args)
    def hasTexture(self, *args): return _pyplanet.ossimPlanetDtedElevationDatabase_hasTexture(self, *args)
    def getTexture(self, *args): return _pyplanet.ossimPlanetDtedElevationDatabase_getTexture(self, *args)
ossimPlanetDtedElevationDatabase_swigregister = _pyplanet.ossimPlanetDtedElevationDatabase_swigregister
ossimPlanetDtedElevationDatabase_swigregister(ossimPlanetDtedElevationDatabase)

class ossimPlanetExtents(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetExtents, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetExtents, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetExtents(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self): return _pyplanet.ossimPlanetExtents_clone(self)
    def setMinLatLon(self, *args): return _pyplanet.ossimPlanetExtents_setMinLatLon(self, *args)
    def setMaxLatLon(self, *args): return _pyplanet.ossimPlanetExtents_setMaxLatLon(self, *args)
    def setMinMaxLatLon(self, *args): return _pyplanet.ossimPlanetExtents_setMinMaxLatLon(self, *args)
    def setMinMaxHeight(self, *args): return _pyplanet.ossimPlanetExtents_setMinMaxHeight(self, *args)
    def setMinMaxScale(self, *args): return _pyplanet.ossimPlanetExtents_setMinMaxScale(self, *args)
    def intersectsLatLon(self, *args): return _pyplanet.ossimPlanetExtents_intersectsLatLon(self, *args)
    def intersectsHeight(self, *args): return _pyplanet.ossimPlanetExtents_intersectsHeight(self, *args)
    def intersectsScale(self, *args): return _pyplanet.ossimPlanetExtents_intersectsScale(self, *args)
    def intersectsModifiedJulianDate(self, *args): return _pyplanet.ossimPlanetExtents_intersectsModifiedJulianDate(self, *args)
    def intersectsDate(self, *args): return _pyplanet.ossimPlanetExtents_intersectsDate(self, *args)
    def equal(self, *args): return _pyplanet.ossimPlanetExtents_equal(self, *args)
    def intersects(self, *args): return _pyplanet.ossimPlanetExtents_intersects(self, *args)
    def getMinLat(self): return _pyplanet.ossimPlanetExtents_getMinLat(self)
    def getMinLon(self): return _pyplanet.ossimPlanetExtents_getMinLon(self)
    def getMaxLat(self): return _pyplanet.ossimPlanetExtents_getMaxLat(self)
    def getMaxLon(self): return _pyplanet.ossimPlanetExtents_getMaxLon(self)
    def getMinScale(self): return _pyplanet.ossimPlanetExtents_getMinScale(self)
    def getMaxScale(self): return _pyplanet.ossimPlanetExtents_getMaxScale(self)
    def getMinHeight(self): return _pyplanet.ossimPlanetExtents_getMinHeight(self)
    def getMaxHeight(self): return _pyplanet.ossimPlanetExtents_getMaxHeight(self)
    def getMinDate(self): return _pyplanet.ossimPlanetExtents_getMinDate(self)
    def getMaxDate(self): return _pyplanet.ossimPlanetExtents_getMaxDate(self)
    def combineMinMaxLatLon(self, *args): return _pyplanet.ossimPlanetExtents_combineMinMaxLatLon(self, *args)
    def combineHeights(self, *args): return _pyplanet.ossimPlanetExtents_combineHeights(self, *args)
    def combineScale(self, *args): return _pyplanet.ossimPlanetExtents_combineScale(self, *args)
    def combineDate(self, *args): return _pyplanet.ossimPlanetExtents_combineDate(self, *args)
    def combine(self, *args): return _pyplanet.ossimPlanetExtents_combine(self, *args)
    def saveXml(self): return _pyplanet.ossimPlanetExtents_saveXml(self)
    def loadXml(self, *args): return _pyplanet.ossimPlanetExtents_loadXml(self, *args)
    def toString(self): return _pyplanet.ossimPlanetExtents_toString(self)
ossimPlanetExtents_swigregister = _pyplanet.ossimPlanetExtents_swigregister
ossimPlanetExtents_swigregister(ossimPlanetExtents)

class ossimPlanetIconGeom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetIconGeom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetIconGeom, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetIconGeom(*args)
        try: self.this.append(this)
        except: self.this = this
    def setTexture(self, *args): return _pyplanet.ossimPlanetIconGeom_setTexture(self, *args)
    def resetToUnitGeometry(self): return _pyplanet.ossimPlanetIconGeom_resetToUnitGeometry(self)
    def setGeometry(self, *args): return _pyplanet.ossimPlanetIconGeom_setGeometry(self, *args)
    def setTextureCoordinatesGivenPixels(self, *args): return _pyplanet.ossimPlanetIconGeom_setTextureCoordinatesGivenPixels(self, *args)
    def drawImplementation(self, *args): return _pyplanet.ossimPlanetIconGeom_drawImplementation(self, *args)
    def width(self): return _pyplanet.ossimPlanetIconGeom_width(self)
    def height(self): return _pyplanet.ossimPlanetIconGeom_height(self)
    def texture(self, *args): return _pyplanet.ossimPlanetIconGeom_texture(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetIconGeom
    __del__ = lambda self : None;
ossimPlanetIconGeom_swigregister = _pyplanet.ossimPlanetIconGeom_swigregister
ossimPlanetIconGeom_swigregister(ossimPlanetIconGeom)

class ossimPlanetId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetId, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetId(*args)
        try: self.this.append(this)
        except: self.this = this
    def id(self): return _pyplanet.ossimPlanetId_id(self)
    def __call__(self): return _pyplanet.ossimPlanetId___call__(self)
    def __lt__(self, *args): return _pyplanet.ossimPlanetId___lt__(self, *args)
    def __gt__(self, *args): return _pyplanet.ossimPlanetId___gt__(self, *args)
    def __le__(self, *args): return _pyplanet.ossimPlanetId___le__(self, *args)
    def __ge__(self, *args): return _pyplanet.ossimPlanetId___ge__(self, *args)
    def __eq__(self, *args): return _pyplanet.ossimPlanetId___eq__(self, *args)
    __swig_getmethods__["invalidId"] = lambda x: _pyplanet.ossimPlanetId_invalidId
    if _newclass:invalidId = staticmethod(_pyplanet.ossimPlanetId_invalidId)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetId
    __del__ = lambda self : None;
ossimPlanetId_swigregister = _pyplanet.ossimPlanetId_swigregister
ossimPlanetId_swigregister(ossimPlanetId)

def ossimPlanetId_invalidId():
  return _pyplanet.ossimPlanetId_invalidId()
ossimPlanetId_invalidId = _pyplanet.ossimPlanetId_invalidId

class ossimPlanetIdManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetIdManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetIdManager, name)
    __repr__ = _swig_repr
    __swig_getmethods__["nextId"] = lambda x: _pyplanet.ossimPlanetIdManager_nextId
    if _newclass:nextId = staticmethod(_pyplanet.ossimPlanetIdManager_nextId)
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetIdManager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetIdManager
    __del__ = lambda self : None;
ossimPlanetIdManager_swigregister = _pyplanet.ossimPlanetIdManager_swigregister
ossimPlanetIdManager_swigregister(ossimPlanetIdManager)

def ossimPlanetIdManager_nextId():
  return _pyplanet.ossimPlanetIdManager_nextId()
ossimPlanetIdManager_nextId = _pyplanet.ossimPlanetIdManager_nextId

class ossimPlanetImage(Image):
    __swig_setmethods__ = {}
    for _s in [Image]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetImage, name, value)
    __swig_getmethods__ = {}
    for _s in [Image]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetImage, name)
    __repr__ = _swig_repr
    ossimPlanetImageStateType_NONE = _pyplanet.ossimPlanetImage_ossimPlanetImageStateType_NONE
    ossimPlanetImageStateType_LOADED = _pyplanet.ossimPlanetImage_ossimPlanetImageStateType_LOADED
    ossimPlanetImageStateType_NEEDS_LOADING = _pyplanet.ossimPlanetImage_ossimPlanetImageStateType_NEEDS_LOADING
    ossimPlanetImagePixelStatus_EMPTY = _pyplanet.ossimPlanetImage_ossimPlanetImagePixelStatus_EMPTY
    ossimPlanetImagePixelStatus_FULL = _pyplanet.ossimPlanetImage_ossimPlanetImagePixelStatus_FULL
    ossimPlanetImagePixelStatus_PARTIAL = _pyplanet.ossimPlanetImage_ossimPlanetImagePixelStatus_PARTIAL
    def cloneType(self): return _pyplanet.ossimPlanetImage_cloneType(self)
    def clone(self, *args): return _pyplanet.ossimPlanetImage_clone(self, *args)
    def className(self): return _pyplanet.ossimPlanetImage_className(self)
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetImage
    __del__ = lambda self : None;
    def stripPadding(self): return _pyplanet.ossimPlanetImage_stripPadding(self)
    def getNumberOfComponents(self): return _pyplanet.ossimPlanetImage_getNumberOfComponents(self)
    def getHeight(self): return _pyplanet.ossimPlanetImage_getHeight(self)
    def getWidth(self): return _pyplanet.ossimPlanetImage_getWidth(self)
    def getState(self): return _pyplanet.ossimPlanetImage_getState(self)
    def setId(self, *args): return _pyplanet.ossimPlanetImage_setId(self, *args)
    def tileId(self): return _pyplanet.ossimPlanetImage_tileId(self)
    def setState(self, *args): return _pyplanet.ossimPlanetImage_setState(self, *args)
    def setPixelStatus(self, *args): return _pyplanet.ossimPlanetImage_setPixelStatus(self, *args)
    def getPixelStatus(self): return _pyplanet.ossimPlanetImage_getPixelStatus(self)
    def toOssimImage(self): return _pyplanet.ossimPlanetImage_toOssimImage(self)
    def fromOssimImage(self, *args): return _pyplanet.ossimPlanetImage_fromOssimImage(self, *args)
    def fromOssimImageNoAlpha(self, *args): return _pyplanet.ossimPlanetImage_fromOssimImageNoAlpha(self, *args)
    def mutex(self): return _pyplanet.ossimPlanetImage_mutex(self)
    def hasMinMax(self): return _pyplanet.ossimPlanetImage_hasMinMax(self)
    def setMin(self, *args): return _pyplanet.ossimPlanetImage_setMin(self, *args)
    def setMax(self, *args): return _pyplanet.ossimPlanetImage_setMax(self, *args)
    def setMinMax(self, *args): return _pyplanet.ossimPlanetImage_setMinMax(self, *args)
    def minValue(self): return _pyplanet.ossimPlanetImage_minValue(self)
    def maxValue(self): return _pyplanet.ossimPlanetImage_maxValue(self)
    __swig_getmethods__["readNewOsgImage"] = lambda x: _pyplanet.ossimPlanetImage_readNewOsgImage
    if _newclass:readNewOsgImage = staticmethod(_pyplanet.ossimPlanetImage_readNewOsgImage)
    __swig_getmethods__["readNewOsgImageNoAlpha"] = lambda x: _pyplanet.ossimPlanetImage_readNewOsgImageNoAlpha
    if _newclass:readNewOsgImageNoAlpha = staticmethod(_pyplanet.ossimPlanetImage_readNewOsgImageNoAlpha)
    def scaleImagePowerOf2(self): return _pyplanet.ossimPlanetImage_scaleImagePowerOf2(self)
    def copyTo(self, *args): return _pyplanet.ossimPlanetImage_copyTo(self, *args)
    def copySubImageAndInsertPointsPowerOf2(self, *args): return _pyplanet.ossimPlanetImage_copySubImageAndInsertPointsPowerOf2(self, *args)
    def sizeInBytes(self): return _pyplanet.ossimPlanetImage_sizeInBytes(self)
    def deltas(self, *args): return _pyplanet.ossimPlanetImage_deltas(self, *args)
    def widthWithoutPadding(self): return _pyplanet.ossimPlanetImage_widthWithoutPadding(self)
    def heightWithoutPadding(self): return _pyplanet.ossimPlanetImage_heightWithoutPadding(self)
    def width(self): return _pyplanet.ossimPlanetImage_width(self)
    def height(self): return _pyplanet.ossimPlanetImage_height(self)
    def padding(self): return _pyplanet.ossimPlanetImage_padding(self)
    def setPadding(self, *args): return _pyplanet.ossimPlanetImage_setPadding(self, *args)
    def elevationValue(self, *args): return _pyplanet.ossimPlanetImage_elevationValue(self, *args)
    def elevationValueNoPaddingOffset(self, *args): return _pyplanet.ossimPlanetImage_elevationValueNoPaddingOffset(self, *args)
    def applyBrightnessContrast(self, *args): return _pyplanet.ossimPlanetImage_applyBrightnessContrast(self, *args)
ossimPlanetImage_swigregister = _pyplanet.ossimPlanetImage_swigregister
ossimPlanetImage_swigregister(ossimPlanetImage)

def ossimPlanetImage_readNewOsgImage(*args):
  return _pyplanet.ossimPlanetImage_readNewOsgImage(*args)
ossimPlanetImage_readNewOsgImage = _pyplanet.ossimPlanetImage_readNewOsgImage

def ossimPlanetImage_readNewOsgImageNoAlpha(*args):
  return _pyplanet.ossimPlanetImage_readNewOsgImageNoAlpha(*args)
ossimPlanetImage_readNewOsgImageNoAlpha = _pyplanet.ossimPlanetImage_readNewOsgImageNoAlpha

class ossimPlanetInputDevice(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetInputDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetInputDevice, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyplanet.delete_ossimPlanetInputDevice
    __del__ = lambda self : None;
    def processInput(self): return _pyplanet.ossimPlanetInputDevice_processInput(self)
ossimPlanetInputDevice_swigregister = _pyplanet.ossimPlanetInputDevice_swigregister
ossimPlanetInputDevice_swigregister(ossimPlanetInputDevice)

class ossimPlanetInteractionController(ossimPlanetActionReceiver):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetActionReceiver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetInteractionController, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetActionReceiver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetInteractionController, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyplanet.ossimPlanetInteractionController_instance
    if _newclass:instance = staticmethod(_pyplanet.ossimPlanetInteractionController_instance)
    __swig_getmethods__["shutdown"] = lambda x: _pyplanet.ossimPlanetInteractionController_shutdown
    if _newclass:shutdown = staticmethod(_pyplanet.ossimPlanetInteractionController_shutdown)
    def registerDevice(self, *args): return _pyplanet.ossimPlanetInteractionController_registerDevice(self, *args)
    def unregisterDevice(self, *args): return _pyplanet.ossimPlanetInteractionController_unregisterDevice(self, *args)
    def processPendingInputs(self): return _pyplanet.ossimPlanetInteractionController_processPendingInputs(self)
    def defineInteractionValuator(self, *args): return _pyplanet.ossimPlanetInteractionController_defineInteractionValuator(self, *args)
    def interactionValuatorValue(self, *args): return _pyplanet.ossimPlanetInteractionController_interactionValuatorValue(self, *args)
    def bind(self, *args): return _pyplanet.ossimPlanetInteractionController_bind(self, *args)
    def unbind(self, *args): return _pyplanet.ossimPlanetInteractionController_unbind(self, *args)
    def unbindAll(self): return _pyplanet.ossimPlanetInteractionController_unbindAll(self)
    def tie(self, *args): return _pyplanet.ossimPlanetInteractionController_tie(self, *args)
    def untie(self, *args): return _pyplanet.ossimPlanetInteractionController_untie(self, *args)
    def untieAll(self): return _pyplanet.ossimPlanetInteractionController_untieAll(self)
    def writeConfiguration(self, *args): return _pyplanet.ossimPlanetInteractionController_writeConfiguration(self, *args)
    def executeBoundAction(self, *args): return _pyplanet.ossimPlanetInteractionController_executeBoundAction(self, *args)
    def updateInteractionValuators(self, *args): return _pyplanet.ossimPlanetInteractionController_updateInteractionValuators(self, *args)
    def execute(self, *args): return _pyplanet.ossimPlanetInteractionController_execute(self, *args)
ossimPlanetInteractionController_swigregister = _pyplanet.ossimPlanetInteractionController_swigregister
ossimPlanetInteractionController_swigregister(ossimPlanetInteractionController)

def ossimPlanetInteractionController_instance():
  return _pyplanet.ossimPlanetInteractionController_instance()
ossimPlanetInteractionController_instance = _pyplanet.ossimPlanetInteractionController_instance

def ossimPlanetInteractionController_shutdown():
  return _pyplanet.ossimPlanetInteractionController_shutdown()
ossimPlanetInteractionController_shutdown = _pyplanet.ossimPlanetInteractionController_shutdown

class ossimPlanetIntersectUserData(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetIntersectUserData, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetIntersectUserData, name)
    __repr__ = _swig_repr
    def __init__(self, maxLevel = 9999999): 
        this = _pyplanet.new_ossimPlanetIntersectUserData(maxLevel)
        try: self.this.append(this)
        except: self.this = this
    def setMaxLevelToIntersect(self, *args): return _pyplanet.ossimPlanetIntersectUserData_setMaxLevelToIntersect(self, *args)
    def getMaxLevelToIntersect(self): return _pyplanet.ossimPlanetIntersectUserData_getMaxLevelToIntersect(self)
ossimPlanetIntersectUserData_swigregister = _pyplanet.ossimPlanetIntersectUserData_swigregister
ossimPlanetIntersectUserData_swigregister(ossimPlanetIntersectUserData)

class ossimPlanetIo(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetIo, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetIo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    IO_SUCCESS = _pyplanet.ossimPlanetIo_IO_SUCCESS
    IO_NO_DATA = _pyplanet.ossimPlanetIo_IO_NO_DATA
    IO_FAIL = _pyplanet.ossimPlanetIo_IO_FAIL
    __swig_destroy__ = _pyplanet.delete_ossimPlanetIo
    __del__ = lambda self : None;
    def performIo(self): return _pyplanet.ossimPlanetIo_performIo(self)
    def read(self, *args): return _pyplanet.ossimPlanetIo_read(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetIo_write(self, *args)
    def pushMessage(self, *args): return _pyplanet.ossimPlanetIo_pushMessage(self, *args)
    def popMessage(self): return _pyplanet.ossimPlanetIo_popMessage(self)
    def setConnectionHeader(self, *args): return _pyplanet.ossimPlanetIo_setConnectionHeader(self, *args)
    def setFinishedFlag(self, *args): return _pyplanet.ossimPlanetIo_setFinishedFlag(self, *args)
    def finishedFlag(self): return _pyplanet.ossimPlanetIo_finishedFlag(self)
    def name(self): return _pyplanet.ossimPlanetIo_name(self)
    def setName(self, *args): return _pyplanet.ossimPlanetIo_setName(self, *args)
    def searchName(self, *args): return _pyplanet.ossimPlanetIo_searchName(self, *args)
    def terminator(self): return _pyplanet.ossimPlanetIo_terminator(self)
    def setTerminator(self, *args): return _pyplanet.ossimPlanetIo_setTerminator(self, *args)
    def setEnableFlag(self, *args): return _pyplanet.ossimPlanetIo_setEnableFlag(self, *args)
    def enableFlag(self): return _pyplanet.ossimPlanetIo_enableFlag(self)
    def setIoDirection(self, *args): return _pyplanet.ossimPlanetIo_setIoDirection(self, *args)
    def ioDirection(self): return _pyplanet.ossimPlanetIo_ioDirection(self)
    def pushConnectionHeader(self): return _pyplanet.ossimPlanetIo_pushConnectionHeader(self)
    def closeIo(self): return _pyplanet.ossimPlanetIo_closeIo(self)
    def openIo(self): return _pyplanet.ossimPlanetIo_openIo(self)
ossimPlanetIo_swigregister = _pyplanet.ossimPlanetIo_swigregister
ossimPlanetIo_swigregister(ossimPlanetIo)

class ossimPlanetIoMessageHandler(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetIoMessageHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetIoMessageHandler, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def handleMessage(self, *args): return _pyplanet.ossimPlanetIoMessageHandler_handleMessage(self, *args)
    def setEnableFlag(self, *args): return _pyplanet.ossimPlanetIoMessageHandler_setEnableFlag(self, *args)
    def enableFlag(self): return _pyplanet.ossimPlanetIoMessageHandler_enableFlag(self)
    def setName(self, *args): return _pyplanet.ossimPlanetIoMessageHandler_setName(self, *args)
    def name(self): return _pyplanet.ossimPlanetIoMessageHandler_name(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetIoMessageHandler
    __del__ = lambda self : None;
ossimPlanetIoMessageHandler_swigregister = _pyplanet.ossimPlanetIoMessageHandler_swigregister
ossimPlanetIoMessageHandler_swigregister(ossimPlanetIoMessageHandler)

class ossimPlanetIoRoutableMessageHandler(ossimPlanetIoMessageHandler):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetIoMessageHandler]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetIoRoutableMessageHandler, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetIoMessageHandler]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetIoRoutableMessageHandler, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetIoRoutableMessageHandler()
        try: self.this.append(this)
        except: self.this = this
    def handleMessage(self, *args): return _pyplanet.ossimPlanetIoRoutableMessageHandler_handleMessage(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetIoRoutableMessageHandler
    __del__ = lambda self : None;
ossimPlanetIoRoutableMessageHandler_swigregister = _pyplanet.ossimPlanetIoRoutableMessageHandler_swigregister
ossimPlanetIoRoutableMessageHandler_swigregister(ossimPlanetIoRoutableMessageHandler)

class ossimPlanetIoSocket(ossimPlanetIo):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetIo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetIoSocket, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetIo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetIoSocket, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetIoSocket()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetIoSocket
    __del__ = lambda self : None;
    def setHandle(self, *args): return _pyplanet.ossimPlanetIoSocket_setHandle(self, *args)
    def setSocketInfo(self, *args): return _pyplanet.ossimPlanetIoSocket_setSocketInfo(self, *args)
    def searchName(self, *args): return _pyplanet.ossimPlanetIoSocket_searchName(self, *args)
    def setSocket(self, *args): return _pyplanet.ossimPlanetIoSocket_setSocket(self, *args)
    def handle(self): return _pyplanet.ossimPlanetIoSocket_handle(self)
    def read(self, *args): return _pyplanet.ossimPlanetIoSocket_read(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetIoSocket_write(self, *args)
    def nonblock(self): return _pyplanet.ossimPlanetIoSocket_nonblock(self)
    def setBlockingFlag(self, *args): return _pyplanet.ossimPlanetIoSocket_setBlockingFlag(self, *args)
    def setEnableFlag(self, *args): return _pyplanet.ossimPlanetIoSocket_setEnableFlag(self, *args)
    def host(self): return _pyplanet.ossimPlanetIoSocket_host(self)
    def port(self): return _pyplanet.ossimPlanetIoSocket_port(self)
    def ioType(self): return _pyplanet.ossimPlanetIoSocket_ioType(self)
    def performIo(self): return _pyplanet.ossimPlanetIoSocket_performIo(self)
    def pushMessage(self, *args): return _pyplanet.ossimPlanetIoSocket_pushMessage(self, *args)
    def popMessage(self): return _pyplanet.ossimPlanetIoSocket_popMessage(self)
    def clearAllBuffers(self): return _pyplanet.ossimPlanetIoSocket_clearAllBuffers(self)
    def setAutoReconnectFlag(self, *args): return _pyplanet.ossimPlanetIoSocket_setAutoReconnectFlag(self, *args)
    def autoReconnectFlag(self): return _pyplanet.ossimPlanetIoSocket_autoReconnectFlag(self)
    def setAutoReconnectInterval(self, *args): return _pyplanet.ossimPlanetIoSocket_setAutoReconnectInterval(self, *args)
    def autoReconnectInterval(self): return _pyplanet.ossimPlanetIoSocket_autoReconnectInterval(self)
    def setMaxOutputBacklogInBytes(self, *args): return _pyplanet.ossimPlanetIoSocket_setMaxOutputBacklogInBytes(self, *args)
    def maxOutputBacklogInBytes(self): return _pyplanet.ossimPlanetIoSocket_maxOutputBacklogInBytes(self)
    def closeIo(self): return _pyplanet.ossimPlanetIoSocket_closeIo(self)
    def openIo(self): return _pyplanet.ossimPlanetIoSocket_openIo(self)
    def setMaxBytesToSendPerIo(self, *args): return _pyplanet.ossimPlanetIoSocket_setMaxBytesToSendPerIo(self, *args)
    def maxBytesToSendPerIo(self): return _pyplanet.ossimPlanetIoSocket_maxBytesToSendPerIo(self)
ossimPlanetIoSocket_swigregister = _pyplanet.ossimPlanetIoSocket_swigregister
ossimPlanetIoSocket_swigregister(ossimPlanetIoSocket)

class ossimPlanetIoSocketServerChannel(ossimPlanetIo):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetIo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetIoSocketServerChannel, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetIo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetIoSocketServerChannel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetIoSocketServerChannel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetIoSocketServerChannel
    __del__ = lambda self : None;
    def searchName(self, *args): return _pyplanet.ossimPlanetIoSocketServerChannel_searchName(self, *args)
    def setSocket(self, *args): return _pyplanet.ossimPlanetIoSocketServerChannel_setSocket(self, *args)
    def setEnableFlag(self, *args): return _pyplanet.ossimPlanetIoSocketServerChannel_setEnableFlag(self, *args)
    def clearAllBuffers(self): return _pyplanet.ossimPlanetIoSocketServerChannel_clearAllBuffers(self)
    def host(self): return _pyplanet.ossimPlanetIoSocketServerChannel_host(self)
    def ioType(self): return _pyplanet.ossimPlanetIoSocketServerChannel_ioType(self)
    def port(self): return _pyplanet.ossimPlanetIoSocketServerChannel_port(self)
    def isTcp(self): return _pyplanet.ossimPlanetIoSocketServerChannel_isTcp(self)
    def read(self, *args): return _pyplanet.ossimPlanetIoSocketServerChannel_read(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetIoSocketServerChannel_write(self, *args)
    def performIo(self): return _pyplanet.ossimPlanetIoSocketServerChannel_performIo(self)
    def popMessage(self): return _pyplanet.ossimPlanetIoSocketServerChannel_popMessage(self)
    def handle(self): return _pyplanet.ossimPlanetIoSocketServerChannel_handle(self)
    def closeIo(self): return _pyplanet.ossimPlanetIoSocketServerChannel_closeIo(self)
    def openIo(self): return _pyplanet.ossimPlanetIoSocketServerChannel_openIo(self)
    def setAutoReconnectFlag(self, *args): return _pyplanet.ossimPlanetIoSocketServerChannel_setAutoReconnectFlag(self, *args)
    def autoReconnectFlag(self): return _pyplanet.ossimPlanetIoSocketServerChannel_autoReconnectFlag(self)
    def setAutoReconnectInterval(self, *args): return _pyplanet.ossimPlanetIoSocketServerChannel_setAutoReconnectInterval(self, *args)
    def autoReconnectInterval(self): return _pyplanet.ossimPlanetIoSocketServerChannel_autoReconnectInterval(self)
    def handleClose(self): return _pyplanet.ossimPlanetIoSocketServerChannel_handleClose(self)
    def handleRead(self): return _pyplanet.ossimPlanetIoSocketServerChannel_handleRead(self)
    def handleWrite(self): return _pyplanet.ossimPlanetIoSocketServerChannel_handleWrite(self)
    def handleAccept(self): return _pyplanet.ossimPlanetIoSocketServerChannel_handleAccept(self)
    def handleError(self, *args): return _pyplanet.ossimPlanetIoSocketServerChannel_handleError(self, *args)
ossimPlanetIoSocketServerChannel_swigregister = _pyplanet.ossimPlanetIoSocketServerChannel_swigregister
ossimPlanetIoSocketServerChannel_swigregister(ossimPlanetIoSocketServerChannel)

class ossimPlanetIoThread(Thread,Referenced,ossimPlanetActionReceiver):
    __swig_setmethods__ = {}
    for _s in [Thread,Referenced,ossimPlanetActionReceiver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetIoThread, name, value)
    __swig_getmethods__ = {}
    for _s in [Thread,Referenced,ossimPlanetActionReceiver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetIoThread, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetIoThread()
        try: self.this.append(this)
        except: self.this = this
    def addIo(self, *args): return _pyplanet.ossimPlanetIoThread_addIo(self, *args)
    def execute(self, *args): return _pyplanet.ossimPlanetIoThread_execute(self, *args)
    def findIo(self, *args): return _pyplanet.ossimPlanetIoThread_findIo(self, *args)
    def sendMessage(self, *args): return _pyplanet.ossimPlanetIoThread_sendMessage(self, *args)
    def removeIoGivenSearchString(self, *args): return _pyplanet.ossimPlanetIoThread_removeIoGivenSearchString(self, *args)
    def ioGivenSearchName(self, *args): return _pyplanet.ossimPlanetIoThread_ioGivenSearchName(self, *args)
    def removeIo(self, *args): return _pyplanet.ossimPlanetIoThread_removeIo(self, *args)
    def run(self): return _pyplanet.ossimPlanetIoThread_run(self)
    def cancel(self): return _pyplanet.ossimPlanetIoThread_cancel(self)
    def addMessageHandler(self, *args): return _pyplanet.ossimPlanetIoThread_addMessageHandler(self, *args)
    def removeMessageHandler(self, *args): return _pyplanet.ossimPlanetIoThread_removeMessageHandler(self, *args)
    def ioCount(self): return _pyplanet.ossimPlanetIoThread_ioCount(self)
    def clearIo(self): return _pyplanet.ossimPlanetIoThread_clearIo(self)
    def startedFlag(self): return _pyplanet.ossimPlanetIoThread_startedFlag(self)
    def setStartedFlag(self, *args): return _pyplanet.ossimPlanetIoThread_setStartedFlag(self, *args)
    def doneFlag(self): return _pyplanet.ossimPlanetIoThread_doneFlag(self)
    def setDoneFlag(self, *args): return _pyplanet.ossimPlanetIoThread_setDoneFlag(self, *args)
    def setPauseFlag(self, *args): return _pyplanet.ossimPlanetIoThread_setPauseFlag(self, *args)
    def pauseFlag(self): return _pyplanet.ossimPlanetIoThread_pauseFlag(self)
    def startCalledFlag(self): return _pyplanet.ossimPlanetIoThread_startCalledFlag(self)
    def setStartCalledFlag(self, *args): return _pyplanet.ossimPlanetIoThread_setStartCalledFlag(self, *args)
    def start(self): return _pyplanet.ossimPlanetIoThread_start(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetIoThread
    __del__ = lambda self : None;
ossimPlanetIoThread_swigregister = _pyplanet.ossimPlanetIoThread_swigregister
ossimPlanetIoThread_swigregister(ossimPlanetIoThread)

class ossimPlanetJpegImage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetJpegImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetJpegImage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetJpegImage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetJpegImage
    __del__ = lambda self : None;
    def loadFile(self, *args): return _pyplanet.ossimPlanetJpegImage_loadFile(self, *args)
    def saveFile(self, *args): return _pyplanet.ossimPlanetJpegImage_saveFile(self, *args)
ossimPlanetJpegImage_swigregister = _pyplanet.ossimPlanetJpegImage_swigregister
ossimPlanetJpegImage_swigregister(ossimPlanetJpegImage)


def ossimPlanetKmlConvertColorMode(*args):
  return _pyplanet.ossimPlanetKmlConvertColorMode(*args)
ossimPlanetKmlConvertColorMode = _pyplanet.ossimPlanetKmlConvertColorMode

def ossimPlanetKmlColorToRGBA(*args):
  return _pyplanet.ossimPlanetKmlColorToRGBA(*args)
ossimPlanetKmlColorToRGBA = _pyplanet.ossimPlanetKmlColorToRGBA
class ossimPlanetKmlObject(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlObject, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def parse(self, *args): return _pyplanet.ossimPlanetKmlObject_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlObject_write(self, *args)
    def setId(self, *args): return _pyplanet.ossimPlanetKmlObject_setId(self, *args)
    def id(self): return _pyplanet.ossimPlanetKmlObject_id(self)
    def setTargetId(self, *args): return _pyplanet.ossimPlanetKmlObject_setTargetId(self, *args)
    def targetId(self): return _pyplanet.ossimPlanetKmlObject_targetId(self)
    def getObjectList(self, *args): return _pyplanet.ossimPlanetKmlObject_getObjectList(self, *args)
    def setParent(self, *args): return _pyplanet.ossimPlanetKmlObject_setParent(self, *args)
    def getParent(self, *args): return _pyplanet.ossimPlanetKmlObject_getParent(self, *args)
    __swig_getmethods__["getRoot"] = lambda x: _pyplanet.ossimPlanetKmlObject_getRoot
    if _newclass:getRoot = staticmethod(_pyplanet.ossimPlanetKmlObject_getRoot)
    def getCacheLocation(self, sharedLocationFlag = False): return _pyplanet.ossimPlanetKmlObject_getCacheLocation(self, sharedLocationFlag)
    def getKmlFile(self): return _pyplanet.ossimPlanetKmlObject_getKmlFile(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlObject
    __del__ = lambda self : None;
ossimPlanetKmlObject_swigregister = _pyplanet.ossimPlanetKmlObject_swigregister
ossimPlanetKmlObject_swigregister(ossimPlanetKmlObject)

def ossimPlanetKmlConvertUnits(*args):
  return _pyplanet.ossimPlanetKmlConvertUnits(*args)
ossimPlanetKmlConvertUnits = _pyplanet.ossimPlanetKmlConvertUnits

def ossimPlanetKmlConvertAltitudeMode(*args):
  return _pyplanet.ossimPlanetKmlConvertAltitudeMode(*args)
ossimPlanetKmlConvertAltitudeMode = _pyplanet.ossimPlanetKmlConvertAltitudeMode

def ossimPlanetKmlConvertRefreshMode(*args):
  return _pyplanet.ossimPlanetKmlConvertRefreshMode(*args)
ossimPlanetKmlConvertRefreshMode = _pyplanet.ossimPlanetKmlConvertRefreshMode

def ossimPlanetKmlConvertViewRefreshMode(*args):
  return _pyplanet.ossimPlanetKmlConvertViewRefreshMode(*args)
ossimPlanetKmlConvertViewRefreshMode = _pyplanet.ossimPlanetKmlConvertViewRefreshMode

def ossimPlanetKmlObject_getRoot(*args):
  return _pyplanet.ossimPlanetKmlObject_getRoot(*args)
ossimPlanetKmlObject_getRoot = _pyplanet.ossimPlanetKmlObject_getRoot

class ossimPlanetKmlLod(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLod, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLod, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlLod()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlLod_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlLod_write(self, *args)
    def minLodPixels(self): return _pyplanet.ossimPlanetKmlLod_minLodPixels(self)
    def setMinLodPixels(self, *args): return _pyplanet.ossimPlanetKmlLod_setMinLodPixels(self, *args)
    def maxLodPixels(self): return _pyplanet.ossimPlanetKmlLod_maxLodPixels(self)
    def minFadeExtent(self): return _pyplanet.ossimPlanetKmlLod_minFadeExtent(self)
    def setMinFadeExtent(self, *args): return _pyplanet.ossimPlanetKmlLod_setMinFadeExtent(self, *args)
    def maxFadeExtent(self): return _pyplanet.ossimPlanetKmlLod_maxFadeExtent(self)
    def setMaxFadeExtent(self, *args): return _pyplanet.ossimPlanetKmlLod_setMaxFadeExtent(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLod
    __del__ = lambda self : None;
ossimPlanetKmlLod_swigregister = _pyplanet.ossimPlanetKmlLod_swigregister
ossimPlanetKmlLod_swigregister(ossimPlanetKmlLod)

class ossimPlanetKmlScale(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlScale, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlScale, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlScale()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlScale_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlScale_write(self, *args)
    def setX(self, *args): return _pyplanet.ossimPlanetKmlScale_setX(self, *args)
    def x(self): return _pyplanet.ossimPlanetKmlScale_x(self)
    def setY(self, *args): return _pyplanet.ossimPlanetKmlScale_setY(self, *args)
    def y(self): return _pyplanet.ossimPlanetKmlScale_y(self)
    def setZ(self, *args): return _pyplanet.ossimPlanetKmlScale_setZ(self, *args)
    def z(self): return _pyplanet.ossimPlanetKmlScale_z(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlScale
    __del__ = lambda self : None;
ossimPlanetKmlScale_swigregister = _pyplanet.ossimPlanetKmlScale_swigregister
ossimPlanetKmlScale_swigregister(ossimPlanetKmlScale)

class ossimPlanetKmlLocation(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLocation, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLocation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetKmlLocation(*args)
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlLocation_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlLocation_write(self, *args)
    def setLongitude(self, *args): return _pyplanet.ossimPlanetKmlLocation_setLongitude(self, *args)
    def longitude(self): return _pyplanet.ossimPlanetKmlLocation_longitude(self)
    def setLatitude(self, *args): return _pyplanet.ossimPlanetKmlLocation_setLatitude(self, *args)
    def latitude(self): return _pyplanet.ossimPlanetKmlLocation_latitude(self)
    def setAltitude(self, *args): return _pyplanet.ossimPlanetKmlLocation_setAltitude(self, *args)
    def altitude(self): return _pyplanet.ossimPlanetKmlLocation_altitude(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLocation
    __del__ = lambda self : None;
ossimPlanetKmlLocation_swigregister = _pyplanet.ossimPlanetKmlLocation_swigregister
ossimPlanetKmlLocation_swigregister(ossimPlanetKmlLocation)

class ossimPlanetKmlOrientation(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlOrientation, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlOrientation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetKmlOrientation(*args)
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlOrientation_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlOrientation_write(self, *args)
    def setHeading(self, *args): return _pyplanet.ossimPlanetKmlOrientation_setHeading(self, *args)
    def heading(self): return _pyplanet.ossimPlanetKmlOrientation_heading(self)
    def setPitch(self, *args): return _pyplanet.ossimPlanetKmlOrientation_setPitch(self, *args)
    def pitch(self): return _pyplanet.ossimPlanetKmlOrientation_pitch(self)
    def setRoll(self, *args): return _pyplanet.ossimPlanetKmlOrientation_setRoll(self, *args)
    def roll(self): return _pyplanet.ossimPlanetKmlOrientation_roll(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlOrientation
    __del__ = lambda self : None;
ossimPlanetKmlOrientation_swigregister = _pyplanet.ossimPlanetKmlOrientation_swigregister
ossimPlanetKmlOrientation_swigregister(ossimPlanetKmlOrientation)

class ossimPlanetKmlLatLonBox(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLatLonBox, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLatLonBox, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlLatLonBox()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlLatLonBox_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlLatLonBox_write(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlLatLonBox_clearFields(self)
    def getCenter(self, *args): return _pyplanet.ossimPlanetKmlLatLonBox_getCenter(self, *args)
    def setBounds(self, *args): return _pyplanet.ossimPlanetKmlLatLonBox_setBounds(self, *args)
    def setNorth(self, *args): return _pyplanet.ossimPlanetKmlLatLonBox_setNorth(self, *args)
    def north(self): return _pyplanet.ossimPlanetKmlLatLonBox_north(self)
    def setSouth(self, *args): return _pyplanet.ossimPlanetKmlLatLonBox_setSouth(self, *args)
    def south(self): return _pyplanet.ossimPlanetKmlLatLonBox_south(self)
    def setEast(self, *args): return _pyplanet.ossimPlanetKmlLatLonBox_setEast(self, *args)
    def east(self): return _pyplanet.ossimPlanetKmlLatLonBox_east(self)
    def setRotation(self, *args): return _pyplanet.ossimPlanetKmlLatLonBox_setRotation(self, *args)
    def rotation(self): return _pyplanet.ossimPlanetKmlLatLonBox_rotation(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLatLonBox
    __del__ = lambda self : None;
ossimPlanetKmlLatLonBox_swigregister = _pyplanet.ossimPlanetKmlLatLonBox_swigregister
ossimPlanetKmlLatLonBox_swigregister(ossimPlanetKmlLatLonBox)

class ossimPlanetKmlLatLonAltBox(ossimPlanetKmlLatLonBox):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlLatLonBox]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLatLonAltBox, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlLatLonBox]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLatLonAltBox, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlLatLonAltBox()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlLatLonAltBox_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlLatLonAltBox_write(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlLatLonAltBox_clearFields(self)
    def getCenter(self, *args): return _pyplanet.ossimPlanetKmlLatLonAltBox_getCenter(self, *args)
    def setBounds(self, *args): return _pyplanet.ossimPlanetKmlLatLonAltBox_setBounds(self, *args)
    def setMinAltitude(self, *args): return _pyplanet.ossimPlanetKmlLatLonAltBox_setMinAltitude(self, *args)
    def minAltitude(self): return _pyplanet.ossimPlanetKmlLatLonAltBox_minAltitude(self)
    def setMaxAltitude(self, *args): return _pyplanet.ossimPlanetKmlLatLonAltBox_setMaxAltitude(self, *args)
    def maxAltitude(self): return _pyplanet.ossimPlanetKmlLatLonAltBox_maxAltitude(self)
    def altitudeMode(self): return _pyplanet.ossimPlanetKmlLatLonAltBox_altitudeMode(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLatLonAltBox
    __del__ = lambda self : None;
ossimPlanetKmlLatLonAltBox_swigregister = _pyplanet.ossimPlanetKmlLatLonAltBox_swigregister
ossimPlanetKmlLatLonAltBox_swigregister(ossimPlanetKmlLatLonAltBox)

class ossimPlanetKmlLink(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLink, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLink, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlLink()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlLink_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlLink_write(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlLink_clearFields(self)
    def setHref(self, *args): return _pyplanet.ossimPlanetKmlLink_setHref(self, *args)
    def href(self): return _pyplanet.ossimPlanetKmlLink_href(self)
    def setRefreshMode(self, *args): return _pyplanet.ossimPlanetKmlLink_setRefreshMode(self, *args)
    def refreshMode(self): return _pyplanet.ossimPlanetKmlLink_refreshMode(self)
    def refreshInterval(self): return _pyplanet.ossimPlanetKmlLink_refreshInterval(self)
    def setRefreshInterval(self, *args): return _pyplanet.ossimPlanetKmlLink_setRefreshInterval(self, *args)
    def setViewRefreshMode(self, *args): return _pyplanet.ossimPlanetKmlLink_setViewRefreshMode(self, *args)
    def viewRefreshMode(self): return _pyplanet.ossimPlanetKmlLink_viewRefreshMode(self)
    def setViewRefreshTime(self, *args): return _pyplanet.ossimPlanetKmlLink_setViewRefreshTime(self, *args)
    def viewRefreshTime(self): return _pyplanet.ossimPlanetKmlLink_viewRefreshTime(self)
    def setViewBoundScale(self, *args): return _pyplanet.ossimPlanetKmlLink_setViewBoundScale(self, *args)
    def viewBoundScale(self): return _pyplanet.ossimPlanetKmlLink_viewBoundScale(self)
    def setViewFormat(self, *args): return _pyplanet.ossimPlanetKmlLink_setViewFormat(self, *args)
    def viewFormat(self): return _pyplanet.ossimPlanetKmlLink_viewFormat(self)
    def setHttpQuery(self, *args): return _pyplanet.ossimPlanetKmlLink_setHttpQuery(self, *args)
    def httpQuery(self): return _pyplanet.ossimPlanetKmlLink_httpQuery(self)
    def download(self, *args): return _pyplanet.ossimPlanetKmlLink_download(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLink
    __del__ = lambda self : None;
ossimPlanetKmlLink_swigregister = _pyplanet.ossimPlanetKmlLink_swigregister
ossimPlanetKmlLink_swigregister(ossimPlanetKmlLink)

class ossimPlanetKmlIcon(ossimPlanetKmlLink):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlLink]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlIcon, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlLink]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlIcon, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlIcon()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlIcon_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlIcon_write(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlIcon
    __del__ = lambda self : None;
ossimPlanetKmlIcon_swigregister = _pyplanet.ossimPlanetKmlIcon_swigregister
ossimPlanetKmlIcon_swigregister(ossimPlanetKmlIcon)

class ossimPlanetKmlRegion(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlRegion, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlRegion, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlRegion()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlRegion_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlRegion_write(self, *args)
    def getCenter(self, *args): return _pyplanet.ossimPlanetKmlRegion_getCenter(self, *args)
    def setBounds(self, *args): return _pyplanet.ossimPlanetKmlRegion_setBounds(self, *args)
    def setBox(self, *args): return _pyplanet.ossimPlanetKmlRegion_setBox(self, *args)
    def box(self): return _pyplanet.ossimPlanetKmlRegion_box(self)
    def setLod(self, *args): return _pyplanet.ossimPlanetKmlRegion_setLod(self, *args)
    def lod(self): return _pyplanet.ossimPlanetKmlRegion_lod(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlRegion
    __del__ = lambda self : None;
ossimPlanetKmlRegion_swigregister = _pyplanet.ossimPlanetKmlRegion_swigregister
ossimPlanetKmlRegion_swigregister(ossimPlanetKmlRegion)

class ossimPlanetKmlLookAt(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLookAt, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLookAt, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlLookAt()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlLookAt_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlLookAt_write(self, *args)
    def setAll(self, *args): return _pyplanet.ossimPlanetKmlLookAt_setAll(self, *args)
    def lookAt(self, *args): return _pyplanet.ossimPlanetKmlLookAt_lookAt(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlLookAt_clearFields(self)
    def latitude(self): return _pyplanet.ossimPlanetKmlLookAt_latitude(self)
    def longitude(self): return _pyplanet.ossimPlanetKmlLookAt_longitude(self)
    def altitude(self): return _pyplanet.ossimPlanetKmlLookAt_altitude(self)
    def heading(self): return _pyplanet.ossimPlanetKmlLookAt_heading(self)
    def pitch(self): return _pyplanet.ossimPlanetKmlLookAt_pitch(self)
    def roll(self): return _pyplanet.ossimPlanetKmlLookAt_roll(self)
    def range(self): return _pyplanet.ossimPlanetKmlLookAt_range(self)
    def setAlititudeMode(self, *args): return _pyplanet.ossimPlanetKmlLookAt_setAlititudeMode(self, *args)
    def altitudeMode(self): return _pyplanet.ossimPlanetKmlLookAt_altitudeMode(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLookAt
    __del__ = lambda self : None;
ossimPlanetKmlLookAt_swigregister = _pyplanet.ossimPlanetKmlLookAt_swigregister
ossimPlanetKmlLookAt_swigregister(ossimPlanetKmlLookAt)

class ossimPlanetKmlTimePrimitive(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlTimePrimitive, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlTimePrimitive, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlTimePrimitive
    __del__ = lambda self : None;
ossimPlanetKmlTimePrimitive_swigregister = _pyplanet.ossimPlanetKmlTimePrimitive_swigregister
ossimPlanetKmlTimePrimitive_swigregister(ossimPlanetKmlTimePrimitive)

class ossimPlanetKmlTimeSpan(ossimPlanetKmlTimePrimitive):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlTimePrimitive]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlTimeSpan, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlTimePrimitive]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlTimeSpan, name)
    __repr__ = _swig_repr
    def parse(self, *args): return _pyplanet.ossimPlanetKmlTimeSpan_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlTimeSpan_write(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlTimeSpan_clearFields(self)
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlTimeSpan()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlTimeSpan
    __del__ = lambda self : None;
ossimPlanetKmlTimeSpan_swigregister = _pyplanet.ossimPlanetKmlTimeSpan_swigregister
ossimPlanetKmlTimeSpan_swigregister(ossimPlanetKmlTimeSpan)

class ossimPlanetKmlTimeStamp(ossimPlanetKmlTimePrimitive):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlTimePrimitive]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlTimeStamp, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlTimePrimitive]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlTimeStamp, name)
    __repr__ = _swig_repr
    def parse(self, *args): return _pyplanet.ossimPlanetKmlTimeStamp_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlTimeStamp_write(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlTimeStamp_clearFields(self)
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlTimeStamp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlTimeStamp
    __del__ = lambda self : None;
ossimPlanetKmlTimeStamp_swigregister = _pyplanet.ossimPlanetKmlTimeStamp_swigregister
ossimPlanetKmlTimeStamp_swigregister(ossimPlanetKmlTimeStamp)

class ossimPlanetKmlColorStyle(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlColorStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlColorStyle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlColorStyle()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlColorStyle_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlColorStyle_write(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlColorStyle_clearFields(self)
    def color(self): return _pyplanet.ossimPlanetKmlColorStyle_color(self)
    def colorMode(self): return _pyplanet.ossimPlanetKmlColorStyle_colorMode(self)
    __swig_setmethods__["theColor"] = _pyplanet.ossimPlanetKmlColorStyle_theColor_set
    __swig_getmethods__["theColor"] = _pyplanet.ossimPlanetKmlColorStyle_theColor_get
    if _newclass:theColor = _swig_property(_pyplanet.ossimPlanetKmlColorStyle_theColor_get, _pyplanet.ossimPlanetKmlColorStyle_theColor_set)
    __swig_setmethods__["theColorMode"] = _pyplanet.ossimPlanetKmlColorStyle_theColorMode_set
    __swig_getmethods__["theColorMode"] = _pyplanet.ossimPlanetKmlColorStyle_theColorMode_get
    if _newclass:theColorMode = _swig_property(_pyplanet.ossimPlanetKmlColorStyle_theColorMode_get, _pyplanet.ossimPlanetKmlColorStyle_theColorMode_set)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlColorStyle
    __del__ = lambda self : None;
ossimPlanetKmlColorStyle_swigregister = _pyplanet.ossimPlanetKmlColorStyle_swigregister
ossimPlanetKmlColorStyle_swigregister(ossimPlanetKmlColorStyle)

class ossimPlanetKmlLineStyle(ossimPlanetKmlColorStyle):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlColorStyle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLineStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlColorStyle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLineStyle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlLineStyle()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlLineStyle_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlLineStyle_write(self, *args)
    def width(self): return _pyplanet.ossimPlanetKmlLineStyle_width(self)
    def clearFields(self): return _pyplanet.ossimPlanetKmlLineStyle_clearFields(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLineStyle
    __del__ = lambda self : None;
ossimPlanetKmlLineStyle_swigregister = _pyplanet.ossimPlanetKmlLineStyle_swigregister
ossimPlanetKmlLineStyle_swigregister(ossimPlanetKmlLineStyle)

class ossimPlanetKmlPolyStyle(ossimPlanetKmlColorStyle):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlColorStyle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlPolyStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlColorStyle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlPolyStyle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlPolyStyle()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlPolyStyle_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlPolyStyle_write(self, *args)
    def getFillFlag(self): return _pyplanet.ossimPlanetKmlPolyStyle_getFillFlag(self)
    def getOutlineFlag(self): return _pyplanet.ossimPlanetKmlPolyStyle_getOutlineFlag(self)
    def clearFields(self): return _pyplanet.ossimPlanetKmlPolyStyle_clearFields(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlPolyStyle
    __del__ = lambda self : None;
ossimPlanetKmlPolyStyle_swigregister = _pyplanet.ossimPlanetKmlPolyStyle_swigregister
ossimPlanetKmlPolyStyle_swigregister(ossimPlanetKmlPolyStyle)

class ossimPlanetKmlIconStyle(ossimPlanetKmlColorStyle):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlColorStyle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlIconStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlColorStyle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlIconStyle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlIconStyle()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlIconStyle_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlIconStyle_write(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlIconStyle_clearFields(self)
    def icon(self, *args): return _pyplanet.ossimPlanetKmlIconStyle_icon(self, *args)
    def xHotSpot(self): return _pyplanet.ossimPlanetKmlIconStyle_xHotSpot(self)
    def yHotspot(self): return _pyplanet.ossimPlanetKmlIconStyle_yHotspot(self)
    def heading(self): return _pyplanet.ossimPlanetKmlIconStyle_heading(self)
    def scale(self): return _pyplanet.ossimPlanetKmlIconStyle_scale(self)
    def xUnits(self): return _pyplanet.ossimPlanetKmlIconStyle_xUnits(self)
    def yUnits(self): return _pyplanet.ossimPlanetKmlIconStyle_yUnits(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlIconStyle
    __del__ = lambda self : None;
ossimPlanetKmlIconStyle_swigregister = _pyplanet.ossimPlanetKmlIconStyle_swigregister
ossimPlanetKmlIconStyle_swigregister(ossimPlanetKmlIconStyle)

class ossimPlanetKmlLabelStyle(ossimPlanetKmlColorStyle):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlColorStyle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLabelStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlColorStyle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLabelStyle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlLabelStyle()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlLabelStyle_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlLabelStyle_write(self, *args)
    def setScale(self, *args): return _pyplanet.ossimPlanetKmlLabelStyle_setScale(self, *args)
    def scale(self): return _pyplanet.ossimPlanetKmlLabelStyle_scale(self)
    def clearFields(self): return _pyplanet.ossimPlanetKmlLabelStyle_clearFields(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLabelStyle
    __del__ = lambda self : None;
ossimPlanetKmlLabelStyle_swigregister = _pyplanet.ossimPlanetKmlLabelStyle_swigregister
ossimPlanetKmlLabelStyle_swigregister(ossimPlanetKmlLabelStyle)

class ossimPlanetKmlBalloonStyle(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlBalloonStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlBalloonStyle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlBalloonStyle()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlBalloonStyle_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlBalloonStyle_write(self, *args)
    def backgroundColor(self): return _pyplanet.ossimPlanetKmlBalloonStyle_backgroundColor(self)
    def textColor(self): return _pyplanet.ossimPlanetKmlBalloonStyle_textColor(self)
    def text(self): return _pyplanet.ossimPlanetKmlBalloonStyle_text(self)
    def clearFields(self): return _pyplanet.ossimPlanetKmlBalloonStyle_clearFields(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlBalloonStyle
    __del__ = lambda self : None;
ossimPlanetKmlBalloonStyle_swigregister = _pyplanet.ossimPlanetKmlBalloonStyle_swigregister
ossimPlanetKmlBalloonStyle_swigregister(ossimPlanetKmlBalloonStyle)

class ossimPlanetKmlStyleSelector(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlStyleSelector, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlStyleSelector, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlStyleSelector()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlStyleSelector_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlStyleSelector_write(self, *args)
    def toStyle(self, *args): return _pyplanet.ossimPlanetKmlStyleSelector_toStyle(self, *args)
    def toStyleMap(self, *args): return _pyplanet.ossimPlanetKmlStyleSelector_toStyleMap(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlStyleSelector
    __del__ = lambda self : None;
ossimPlanetKmlStyleSelector_swigregister = _pyplanet.ossimPlanetKmlStyleSelector_swigregister
ossimPlanetKmlStyleSelector_swigregister(ossimPlanetKmlStyleSelector)

class ossimPlanetKmlStyle(ossimPlanetKmlStyleSelector):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlStyleSelector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlStyleSelector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlStyle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlStyle()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlStyle_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlStyle_write(self, *args)
    def toStyle(self, *args): return _pyplanet.ossimPlanetKmlStyle_toStyle(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlStyle_clearFields(self)
    def setIconStyle(self, *args): return _pyplanet.ossimPlanetKmlStyle_setIconStyle(self, *args)
    def iconStyle(self): return _pyplanet.ossimPlanetKmlStyle_iconStyle(self)
    def setLabelStyle(self, *args): return _pyplanet.ossimPlanetKmlStyle_setLabelStyle(self, *args)
    def labelStyle(self): return _pyplanet.ossimPlanetKmlStyle_labelStyle(self)
    def setLineStyle(self, *args): return _pyplanet.ossimPlanetKmlStyle_setLineStyle(self, *args)
    def lineStyle(self): return _pyplanet.ossimPlanetKmlStyle_lineStyle(self)
    def setPolyStyle(self, *args): return _pyplanet.ossimPlanetKmlStyle_setPolyStyle(self, *args)
    def polyStyle(self): return _pyplanet.ossimPlanetKmlStyle_polyStyle(self)
    def setBalloonStyle(self, *args): return _pyplanet.ossimPlanetKmlStyle_setBalloonStyle(self, *args)
    def balloonStyle(self): return _pyplanet.ossimPlanetKmlStyle_balloonStyle(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlStyle
    __del__ = lambda self : None;
ossimPlanetKmlStyle_swigregister = _pyplanet.ossimPlanetKmlStyle_swigregister
ossimPlanetKmlStyle_swigregister(ossimPlanetKmlStyle)

class ossimPlanetKmlStyleMap(ossimPlanetKmlStyleSelector):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlStyleSelector]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlStyleMap, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlStyleSelector]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlStyleMap, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlStyleMap()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlStyleMap_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlStyleMap_write(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlStyleMap_clearFields(self)
    def toStyleMap(self, *args): return _pyplanet.ossimPlanetKmlStyleMap_toStyleMap(self, *args)
    def styles(self, *args): return _pyplanet.ossimPlanetKmlStyleMap_styles(self, *args)
    def findStyle(self, *args): return _pyplanet.ossimPlanetKmlStyleMap_findStyle(self, *args)
    def normalUrl(self): return _pyplanet.ossimPlanetKmlStyleMap_normalUrl(self)
    def highlightUrl(self): return _pyplanet.ossimPlanetKmlStyleMap_highlightUrl(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlStyleMap
    __del__ = lambda self : None;
ossimPlanetKmlStyleMap_swigregister = _pyplanet.ossimPlanetKmlStyleMap_swigregister
ossimPlanetKmlStyleMap_swigregister(ossimPlanetKmlStyleMap)

class ossimPlanetKmlFeature(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlFeature, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlFeature, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlFeature()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlFeature_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlFeature_write(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlFeature_clearFields(self)
    def setName(self, *args): return _pyplanet.ossimPlanetKmlFeature_setName(self, *args)
    def name(self): return _pyplanet.ossimPlanetKmlFeature_name(self)
    def visibilityFlag(self): return _pyplanet.ossimPlanetKmlFeature_visibilityFlag(self)
    def setVisibilityFlag(self, *args): return _pyplanet.ossimPlanetKmlFeature_setVisibilityFlag(self, *args)
    def setOpenFlag(self, *args): return _pyplanet.ossimPlanetKmlFeature_setOpenFlag(self, *args)
    def openFlag(self): return _pyplanet.ossimPlanetKmlFeature_openFlag(self)
    def setAddress(self, *args): return _pyplanet.ossimPlanetKmlFeature_setAddress(self, *args)
    def address(self): return _pyplanet.ossimPlanetKmlFeature_address(self)
    def setPhoneNumber(self, *args): return _pyplanet.ossimPlanetKmlFeature_setPhoneNumber(self, *args)
    def phoneNumber(self): return _pyplanet.ossimPlanetKmlFeature_phoneNumber(self)
    def setDescription(self, *args): return _pyplanet.ossimPlanetKmlFeature_setDescription(self, *args)
    def description(self): return _pyplanet.ossimPlanetKmlFeature_description(self)
    def setLookAt(self, *args): return _pyplanet.ossimPlanetKmlFeature_setLookAt(self, *args)
    def lookAt(self): return _pyplanet.ossimPlanetKmlFeature_lookAt(self)
    def setSyleUrl(self, *args): return _pyplanet.ossimPlanetKmlFeature_setSyleUrl(self, *args)
    def styleUrl(self): return _pyplanet.ossimPlanetKmlFeature_styleUrl(self)
    def setRegion(self, *args): return _pyplanet.ossimPlanetKmlFeature_setRegion(self, *args)
    def region(self): return _pyplanet.ossimPlanetKmlFeature_region(self)
    def setExtendedData(self, *args): return _pyplanet.ossimPlanetKmlFeature_setExtendedData(self, *args)
    def extendedData(self, *args): return _pyplanet.ossimPlanetKmlFeature_extendedData(self, *args)
    def getCenter(self, *args): return _pyplanet.ossimPlanetKmlFeature_getCenter(self, *args)
    def getStyleSelector(self): return _pyplanet.ossimPlanetKmlFeature_getStyleSelector(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlFeature
    __del__ = lambda self : None;
ossimPlanetKmlFeature_swigregister = _pyplanet.ossimPlanetKmlFeature_swigregister
ossimPlanetKmlFeature_swigregister(ossimPlanetKmlFeature)

class ossimPlanetKmlGeometry(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlGeometry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def parse(self, *args): return _pyplanet.ossimPlanetKmlGeometry_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlGeometry_write(self, *args)
    def getCenter(self, *args): return _pyplanet.ossimPlanetKmlGeometry_getCenter(self, *args)
    def altitudeMode(self): return _pyplanet.ossimPlanetKmlGeometry_altitudeMode(self)
    def toPoint(self, *args): return _pyplanet.ossimPlanetKmlGeometry_toPoint(self, *args)
    def toLineString(self, *args): return _pyplanet.ossimPlanetKmlGeometry_toLineString(self, *args)
    def toLinearRing(self, *args): return _pyplanet.ossimPlanetKmlGeometry_toLinearRing(self, *args)
    def toPolygon(self, *args): return _pyplanet.ossimPlanetKmlGeometry_toPolygon(self, *args)
    def toMultiGeometry(self, *args): return _pyplanet.ossimPlanetKmlGeometry_toMultiGeometry(self, *args)
    def toModel(self, *args): return _pyplanet.ossimPlanetKmlGeometry_toModel(self, *args)
    __swig_getmethods__["computeCenter"] = lambda x: _pyplanet.ossimPlanetKmlGeometry_computeCenter
    if _newclass:computeCenter = staticmethod(_pyplanet.ossimPlanetKmlGeometry_computeCenter)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlGeometry
    __del__ = lambda self : None;
ossimPlanetKmlGeometry_swigregister = _pyplanet.ossimPlanetKmlGeometry_swigregister
ossimPlanetKmlGeometry_swigregister(ossimPlanetKmlGeometry)

def ossimPlanetKmlGeometry_computeCenter(*args):
  return _pyplanet.ossimPlanetKmlGeometry_computeCenter(*args)
ossimPlanetKmlGeometry_computeCenter = _pyplanet.ossimPlanetKmlGeometry_computeCenter

class ossimPlanetKmlPoint(ossimPlanetKmlGeometry):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlPoint, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlPoint()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlPoint_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlPoint_write(self, *args)
    def getCenter(self, *args): return _pyplanet.ossimPlanetKmlPoint_getCenter(self, *args)
    def toPoint(self, *args): return _pyplanet.ossimPlanetKmlPoint_toPoint(self, *args)
    def altitudeMode(self): return _pyplanet.ossimPlanetKmlPoint_altitudeMode(self)
    def setExtrudeFlag(self, *args): return _pyplanet.ossimPlanetKmlPoint_setExtrudeFlag(self, *args)
    def extrudeFlag(self): return _pyplanet.ossimPlanetKmlPoint_extrudeFlag(self)
    def setTesselateFlag(self, *args): return _pyplanet.ossimPlanetKmlPoint_setTesselateFlag(self, *args)
    def tesselateFlag(self): return _pyplanet.ossimPlanetKmlPoint_tesselateFlag(self)
    def pointList(self, *args): return _pyplanet.ossimPlanetKmlPoint_pointList(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlPoint
    __del__ = lambda self : None;
ossimPlanetKmlPoint_swigregister = _pyplanet.ossimPlanetKmlPoint_swigregister
ossimPlanetKmlPoint_swigregister(ossimPlanetKmlPoint)

class ossimPlanetKmlLineString(ossimPlanetKmlGeometry):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLineString, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLineString, name)
    __repr__ = _swig_repr
    def parse(self, *args): return _pyplanet.ossimPlanetKmlLineString_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlLineString_write(self, *args)
    def toLineString(self, *args): return _pyplanet.ossimPlanetKmlLineString_toLineString(self, *args)
    def altitudeMode(self): return _pyplanet.ossimPlanetKmlLineString_altitudeMode(self)
    def setExtrudeFlag(self, *args): return _pyplanet.ossimPlanetKmlLineString_setExtrudeFlag(self, *args)
    def extrudeFlag(self): return _pyplanet.ossimPlanetKmlLineString_extrudeFlag(self)
    def setTesselateFlag(self, *args): return _pyplanet.ossimPlanetKmlLineString_setTesselateFlag(self, *args)
    def tesselateFlag(self): return _pyplanet.ossimPlanetKmlLineString_tesselateFlag(self)
    def pointList(self, *args): return _pyplanet.ossimPlanetKmlLineString_pointList(self, *args)
    def getCenter(self, *args): return _pyplanet.ossimPlanetKmlLineString_getCenter(self, *args)
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlLineString()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLineString
    __del__ = lambda self : None;
ossimPlanetKmlLineString_swigregister = _pyplanet.ossimPlanetKmlLineString_swigregister
ossimPlanetKmlLineString_swigregister(ossimPlanetKmlLineString)

class ossimPlanetKmlLinearRing(ossimPlanetKmlGeometry):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLinearRing, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLinearRing, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlLinearRing()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlLinearRing_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlLinearRing_write(self, *args)
    def altitudeMode(self): return _pyplanet.ossimPlanetKmlLinearRing_altitudeMode(self)
    def setExtrudeFlag(self, *args): return _pyplanet.ossimPlanetKmlLinearRing_setExtrudeFlag(self, *args)
    def extrudeFlag(self): return _pyplanet.ossimPlanetKmlLinearRing_extrudeFlag(self)
    def setTesselateFlag(self, *args): return _pyplanet.ossimPlanetKmlLinearRing_setTesselateFlag(self, *args)
    def tesselateFlag(self): return _pyplanet.ossimPlanetKmlLinearRing_tesselateFlag(self)
    def getCenter(self, *args): return _pyplanet.ossimPlanetKmlLinearRing_getCenter(self, *args)
    def toLinearRing(self, *args): return _pyplanet.ossimPlanetKmlLinearRing_toLinearRing(self, *args)
    def pointList(self, *args): return _pyplanet.ossimPlanetKmlLinearRing_pointList(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLinearRing
    __del__ = lambda self : None;
ossimPlanetKmlLinearRing_swigregister = _pyplanet.ossimPlanetKmlLinearRing_swigregister
ossimPlanetKmlLinearRing_swigregister(ossimPlanetKmlLinearRing)

class ossimPlanetKmlPolygon(ossimPlanetKmlGeometry):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlPolygon, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlPolygon, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlPolygon()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlPolygon_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlPolygon_write(self, *args)
    def altitudeMode(self): return _pyplanet.ossimPlanetKmlPolygon_altitudeMode(self)
    def setExtrudeFlag(self, *args): return _pyplanet.ossimPlanetKmlPolygon_setExtrudeFlag(self, *args)
    def extrudeFlag(self): return _pyplanet.ossimPlanetKmlPolygon_extrudeFlag(self)
    def setTesselateFlag(self, *args): return _pyplanet.ossimPlanetKmlPolygon_setTesselateFlag(self, *args)
    def tesselateFlag(self): return _pyplanet.ossimPlanetKmlPolygon_tesselateFlag(self)
    def getCenter(self, *args): return _pyplanet.ossimPlanetKmlPolygon_getCenter(self, *args)
    def toPolygon(self, *args): return _pyplanet.ossimPlanetKmlPolygon_toPolygon(self, *args)
    def outerBoundary(self, *args): return _pyplanet.ossimPlanetKmlPolygon_outerBoundary(self, *args)
    def innerBoundaryList(self, *args): return _pyplanet.ossimPlanetKmlPolygon_innerBoundaryList(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlPolygon
    __del__ = lambda self : None;
ossimPlanetKmlPolygon_swigregister = _pyplanet.ossimPlanetKmlPolygon_swigregister
ossimPlanetKmlPolygon_swigregister(ossimPlanetKmlPolygon)

class ossimPlanetKmlMultiGeometry(ossimPlanetKmlGeometry):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlMultiGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlMultiGeometry, name)
    __repr__ = _swig_repr
    def parse(self, *args): return _pyplanet.ossimPlanetKmlMultiGeometry_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlMultiGeometry_write(self, *args)
    def getCenter(self, *args): return _pyplanet.ossimPlanetKmlMultiGeometry_getCenter(self, *args)
    def toMultiGeometry(self, *args): return _pyplanet.ossimPlanetKmlMultiGeometry_toMultiGeometry(self, *args)
    def geomtryList(self, *args): return _pyplanet.ossimPlanetKmlMultiGeometry_geomtryList(self, *args)
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlMultiGeometry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlMultiGeometry
    __del__ = lambda self : None;
ossimPlanetKmlMultiGeometry_swigregister = _pyplanet.ossimPlanetKmlMultiGeometry_swigregister
ossimPlanetKmlMultiGeometry_swigregister(ossimPlanetKmlMultiGeometry)

class ossimPlanetKmlModel(ossimPlanetKmlGeometry):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlModel()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlModel_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlModel_write(self, *args)
    def getCenter(self, *args): return _pyplanet.ossimPlanetKmlModel_getCenter(self, *args)
    def toModel(self, *args): return _pyplanet.ossimPlanetKmlModel_toModel(self, *args)
    def location(self, *args): return _pyplanet.ossimPlanetKmlModel_location(self, *args)
    def orientation(self, *args): return _pyplanet.ossimPlanetKmlModel_orientation(self, *args)
    def scale(self, *args): return _pyplanet.ossimPlanetKmlModel_scale(self, *args)
    def link(self, *args): return _pyplanet.ossimPlanetKmlModel_link(self, *args)
    def altitudeMode(self): return _pyplanet.ossimPlanetKmlModel_altitudeMode(self)
    def setAltitudeMode(self, *args): return _pyplanet.ossimPlanetKmlModel_setAltitudeMode(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlModel
    __del__ = lambda self : None;
ossimPlanetKmlModel_swigregister = _pyplanet.ossimPlanetKmlModel_swigregister
ossimPlanetKmlModel_swigregister(ossimPlanetKmlModel)

class ossimPlanetKmlOverlay(ossimPlanetKmlFeature):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlFeature]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlOverlay, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlFeature]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlOverlay, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlOverlay()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlOverlay_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlOverlay_write(self, *args)
    def setColor(self, *args): return _pyplanet.ossimPlanetKmlOverlay_setColor(self, *args)
    def color(self): return _pyplanet.ossimPlanetKmlOverlay_color(self)
    def setDrawOrder(self, *args): return _pyplanet.ossimPlanetKmlOverlay_setDrawOrder(self, *args)
    def drawOrder(self): return _pyplanet.ossimPlanetKmlOverlay_drawOrder(self)
    def clearFields(self): return _pyplanet.ossimPlanetKmlOverlay_clearFields(self)
    def icon(self, *args): return _pyplanet.ossimPlanetKmlOverlay_icon(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlOverlay
    __del__ = lambda self : None;
ossimPlanetKmlOverlay_swigregister = _pyplanet.ossimPlanetKmlOverlay_swigregister
ossimPlanetKmlOverlay_swigregister(ossimPlanetKmlOverlay)

class ossimPlanetKmlScreenOverlay(ossimPlanetKmlOverlay):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlOverlay]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlScreenOverlay, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlOverlay]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlScreenOverlay, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlScreenOverlay()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_write(self, *args)
    def setOverlayPosition(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setOverlayPosition(self, *args)
    def setOverlayUnits(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setOverlayUnits(self, *args)
    def setOverlayXUnits(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setOverlayXUnits(self, *args)
    def setOverlayYUnits(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setOverlayYUnits(self, *args)
    def overlayX(self): return _pyplanet.ossimPlanetKmlScreenOverlay_overlayX(self)
    def overlayY(self): return _pyplanet.ossimPlanetKmlScreenOverlay_overlayY(self)
    def overlayXUnits(self): return _pyplanet.ossimPlanetKmlScreenOverlay_overlayXUnits(self)
    def overlayYUnits(self): return _pyplanet.ossimPlanetKmlScreenOverlay_overlayYUnits(self)
    def setScreenPosition(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setScreenPosition(self, *args)
    def setScreenUnits(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setScreenUnits(self, *args)
    def setScreenXUnits(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setScreenXUnits(self, *args)
    def setScreenYUnits(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setScreenYUnits(self, *args)
    def screenX(self): return _pyplanet.ossimPlanetKmlScreenOverlay_screenX(self)
    def screenY(self): return _pyplanet.ossimPlanetKmlScreenOverlay_screenY(self)
    def screenXUnits(self): return _pyplanet.ossimPlanetKmlScreenOverlay_screenXUnits(self)
    def screenYUnits(self): return _pyplanet.ossimPlanetKmlScreenOverlay_screenYUnits(self)
    def setRotationXY(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setRotationXY(self, *args)
    def setRotationXYUnits(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setRotationXYUnits(self, *args)
    def setRotationXUnits(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setRotationXUnits(self, *args)
    def setRotationYUnits(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setRotationYUnits(self, *args)
    def rotationX(self): return _pyplanet.ossimPlanetKmlScreenOverlay_rotationX(self)
    def rotationY(self): return _pyplanet.ossimPlanetKmlScreenOverlay_rotationY(self)
    def rotationXUnits(self): return _pyplanet.ossimPlanetKmlScreenOverlay_rotationXUnits(self)
    def rotationYUnits(self): return _pyplanet.ossimPlanetKmlScreenOverlay_rotationYUnits(self)
    def setSize(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setSize(self, *args)
    def setSizeX(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setSizeX(self, *args)
    def setSizeY(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setSizeY(self, *args)
    def setSizeUnits(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setSizeUnits(self, *args)
    def sizeX(self): return _pyplanet.ossimPlanetKmlScreenOverlay_sizeX(self)
    def sizeY(self): return _pyplanet.ossimPlanetKmlScreenOverlay_sizeY(self)
    def sizeXUnits(self): return _pyplanet.ossimPlanetKmlScreenOverlay_sizeXUnits(self)
    def sizeYUnits(self): return _pyplanet.ossimPlanetKmlScreenOverlay_sizeYUnits(self)
    def setRotation(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlay_setRotation(self, *args)
    def rotation(self): return _pyplanet.ossimPlanetKmlScreenOverlay_rotation(self)
    def clearFields(self): return _pyplanet.ossimPlanetKmlScreenOverlay_clearFields(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlScreenOverlay
    __del__ = lambda self : None;
ossimPlanetKmlScreenOverlay_swigregister = _pyplanet.ossimPlanetKmlScreenOverlay_swigregister
ossimPlanetKmlScreenOverlay_swigregister(ossimPlanetKmlScreenOverlay)

class ossimPlanetKmlGroundOverlay(ossimPlanetKmlOverlay):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlOverlay]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlGroundOverlay, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlOverlay]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlGroundOverlay, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlGroundOverlay()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlGroundOverlay_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlGroundOverlay_write(self, *args)
    def altitude(self): return _pyplanet.ossimPlanetKmlGroundOverlay_altitude(self)
    def setAltitude(self, *args): return _pyplanet.ossimPlanetKmlGroundOverlay_setAltitude(self, *args)
    def altitudeMode(self): return _pyplanet.ossimPlanetKmlGroundOverlay_altitudeMode(self)
    def setAltitudeMode(self, *args): return _pyplanet.ossimPlanetKmlGroundOverlay_setAltitudeMode(self, *args)
    def latLonBox(self): return _pyplanet.ossimPlanetKmlGroundOverlay_latLonBox(self)
    def setLatLonBox(self, *args): return _pyplanet.ossimPlanetKmlGroundOverlay_setLatLonBox(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlGroundOverlay_clearFields(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlGroundOverlay
    __del__ = lambda self : None;
ossimPlanetKmlGroundOverlay_swigregister = _pyplanet.ossimPlanetKmlGroundOverlay_swigregister
ossimPlanetKmlGroundOverlay_swigregister(ossimPlanetKmlGroundOverlay)

class ossimPlanetKmlNetworkLink(ossimPlanetKmlFeature):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlFeature]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlNetworkLink, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlFeature]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlNetworkLink, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlNetworkLink()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlNetworkLink_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlNetworkLink_write(self, *args)
    def link(self, *args): return _pyplanet.ossimPlanetKmlNetworkLink_link(self, *args)
    def setLink(self, *args): return _pyplanet.ossimPlanetKmlNetworkLink_setLink(self, *args)
    def refreshVisibilityFlag(self): return _pyplanet.ossimPlanetKmlNetworkLink_refreshVisibilityFlag(self)
    def setRefreshVisibilityFlag(self, *args): return _pyplanet.ossimPlanetKmlNetworkLink_setRefreshVisibilityFlag(self, *args)
    def flyToViewFlag(self): return _pyplanet.ossimPlanetKmlNetworkLink_flyToViewFlag(self)
    def setFlyToViewFlag(self, *args): return _pyplanet.ossimPlanetKmlNetworkLink_setFlyToViewFlag(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlNetworkLink_clearFields(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlNetworkLink
    __del__ = lambda self : None;
ossimPlanetKmlNetworkLink_swigregister = _pyplanet.ossimPlanetKmlNetworkLink_swigregister
ossimPlanetKmlNetworkLink_swigregister(ossimPlanetKmlNetworkLink)

class ossimPlanetKmlPlacemark(ossimPlanetKmlFeature):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlFeature]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlPlacemark, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlFeature]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlPlacemark, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlPlacemark()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlPlacemark_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlPlacemark_write(self, *args)
    def clearFields(self): return _pyplanet.ossimPlanetKmlPlacemark_clearFields(self)
    def getGeometry(self, *args): return _pyplanet.ossimPlanetKmlPlacemark_getGeometry(self, *args)
    def getCenter(self, *args): return _pyplanet.ossimPlanetKmlPlacemark_getCenter(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlPlacemark
    __del__ = lambda self : None;
ossimPlanetKmlPlacemark_swigregister = _pyplanet.ossimPlanetKmlPlacemark_swigregister
ossimPlanetKmlPlacemark_swigregister(ossimPlanetKmlPlacemark)

class ossimPlanetKmlContainer(ossimPlanetKmlFeature):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlFeature]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlContainer, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlFeature]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlContainer, name)
    __repr__ = _swig_repr
    def parse(self, *args): return _pyplanet.ossimPlanetKmlContainer_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlContainer_write(self, *args)
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlContainer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlContainer
    __del__ = lambda self : None;
ossimPlanetKmlContainer_swigregister = _pyplanet.ossimPlanetKmlContainer_swigregister
ossimPlanetKmlContainer_swigregister(ossimPlanetKmlContainer)

class ossimPlanetKmlFolder(ossimPlanetKmlContainer):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlFolder, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlFolder, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlFolder()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlFolder_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlFolder_write(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlFolder
    __del__ = lambda self : None;
ossimPlanetKmlFolder_swigregister = _pyplanet.ossimPlanetKmlFolder_swigregister
ossimPlanetKmlFolder_swigregister(ossimPlanetKmlFolder)

class ossimPlanetKmlDocument(ossimPlanetKmlContainer):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlContainer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlDocument, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlContainer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlDocument, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlDocument()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKmlDocument_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKmlDocument_write(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlDocument
    __del__ = lambda self : None;
ossimPlanetKmlDocument_swigregister = _pyplanet.ossimPlanetKmlDocument_swigregister
ossimPlanetKmlDocument_swigregister(ossimPlanetKmlDocument)

class ossimPlanetKml(ossimPlanetKmlObject):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKml, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKml, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKml()
        try: self.this.append(this)
        except: self.this = this
    def parse(self, *args): return _pyplanet.ossimPlanetKml_parse(self, *args)
    def write(self, *args): return _pyplanet.ossimPlanetKml_write(self, *args)
    def writeDocument(self): return _pyplanet.ossimPlanetKml_writeDocument(self)
    def getAllFeatures(self, *args): return _pyplanet.ossimPlanetKml_getAllFeatures(self, *args)
    def createIdMap(self): return _pyplanet.ossimPlanetKml_createIdMap(self)
    def findById(self, *args): return _pyplanet.ossimPlanetKml_findById(self, *args)
    def filename(self): return _pyplanet.ossimPlanetKml_filename(self)
    def isCompressed(self): return _pyplanet.ossimPlanetKml_isCompressed(self)
    def getCacheLocation(self, sharedLocationFlag = False): return _pyplanet.ossimPlanetKml_getCacheLocation(self, sharedLocationFlag)
    def getKmlFile(self): return _pyplanet.ossimPlanetKml_getKmlFile(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKml
    __del__ = lambda self : None;
ossimPlanetKml_swigregister = _pyplanet.ossimPlanetKml_swigregister
ossimPlanetKml_swigregister(ossimPlanetKml)

class ossimPlanetKmz(ossimPlanetKml):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKml]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmz, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKml]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmz, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmz()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmz
    __del__ = lambda self : None;
    def parse(self, *args): return _pyplanet.ossimPlanetKmz_parse(self, *args)
    def isCompressed(self): return _pyplanet.ossimPlanetKmz_isCompressed(self)
ossimPlanetKmz_swigregister = _pyplanet.ossimPlanetKmz_swigregister
ossimPlanetKmz_swigregister(ossimPlanetKmz)

class ossimPlanetKmlObjectRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlObjectRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlObjectRegistry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["instance"] = lambda x: _pyplanet.ossimPlanetKmlObjectRegistry_instance
    if _newclass:instance = staticmethod(_pyplanet.ossimPlanetKmlObjectRegistry_instance)
    def newObject(self, *args): return _pyplanet.ossimPlanetKmlObjectRegistry_newObject(self, *args)
    def newGeometry(self, *args): return _pyplanet.ossimPlanetKmlObjectRegistry_newGeometry(self, *args)
    def newTimePrimitive(self, *args): return _pyplanet.ossimPlanetKmlObjectRegistry_newTimePrimitive(self, *args)
    def newColorStyle(self, *args): return _pyplanet.ossimPlanetKmlObjectRegistry_newColorStyle(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlObjectRegistry
    __del__ = lambda self : None;
ossimPlanetKmlObjectRegistry_swigregister = _pyplanet.ossimPlanetKmlObjectRegistry_swigregister
ossimPlanetKmlObjectRegistry_swigregister(ossimPlanetKmlObjectRegistry)

def ossimPlanetKmlObjectRegistry_instance():
  return _pyplanet.ossimPlanetKmlObjectRegistry_instance()
ossimPlanetKmlObjectRegistry_instance = _pyplanet.ossimPlanetKmlObjectRegistry_instance

class ossimPlanetKmlLayerReaderWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLayerReaderWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLayerReaderWriter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setLayer(self, *args): return _pyplanet.ossimPlanetKmlLayerReaderWriter_setLayer(self, *args)
    def readNode(self, *args): return _pyplanet.ossimPlanetKmlLayerReaderWriter_readNode(self, *args)
    def setKmlCacheLocation(self, *args): return _pyplanet.ossimPlanetKmlLayerReaderWriter_setKmlCacheLocation(self, *args)
    def readImage(self, *args): return _pyplanet.ossimPlanetKmlLayerReaderWriter_readImage(self, *args)
    def setId(self, *args): return _pyplanet.ossimPlanetKmlLayerReaderWriter_setId(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLayerReaderWriter
    __del__ = lambda self : None;
ossimPlanetKmlLayerReaderWriter_swigregister = _pyplanet.ossimPlanetKmlLayerReaderWriter_swigregister
ossimPlanetKmlLayerReaderWriter_swigregister(ossimPlanetKmlLayerReaderWriter)

class ossimPlanetKmlLayerTile(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLayerTile, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLayerTile, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlLayerTile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLayerTile
    __del__ = lambda self : None;
ossimPlanetKmlLayerTile_swigregister = _pyplanet.ossimPlanetKmlLayerTile_swigregister
ossimPlanetKmlLayerTile_swigregister(ossimPlanetKmlLayerTile)

class ossimPlanetKmlLayer(ossimPlanetLayer):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetLayer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetLayer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLayer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetKmlLayer()
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.ossimPlanetKmlLayer_cloneType(self)
    def isSameKindAs(self, *args): return _pyplanet.ossimPlanetKmlLayer_isSameKindAs(self, *args)
    def className(self): return _pyplanet.ossimPlanetKmlLayer_className(self)
    def libraryName(self): return _pyplanet.ossimPlanetKmlLayer_libraryName(self)
    def traverse(self, *args): return _pyplanet.ossimPlanetKmlLayer_traverse(self, *args)
    def addKml(self, *args): return _pyplanet.ossimPlanetKmlLayer_addKml(self, *args)
    def addChild(self, *args): return _pyplanet.ossimPlanetKmlLayer_addChild(self, *args)
    def getOrCreateIconEntry(self, *args): return _pyplanet.ossimPlanetKmlLayer_getOrCreateIconEntry(self, *args)
    def getIconEntry(self, *args): return _pyplanet.ossimPlanetKmlLayer_getIconEntry(self, *args)
    def deleteNode(self, *args): return _pyplanet.ossimPlanetKmlLayer_deleteNode(self, *args)
    def planet(self, *args): return _pyplanet.ossimPlanetKmlLayer_planet(self, *args)
    def landModel(self, *args): return _pyplanet.ossimPlanetKmlLayer_landModel(self, *args)
    def readyToAddNode(self, *args): return _pyplanet.ossimPlanetKmlLayer_readyToAddNode(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLayer
    __del__ = lambda self : None;
ossimPlanetKmlLayer_swigregister = _pyplanet.ossimPlanetKmlLayer_swigregister
ossimPlanetKmlLayer_swigregister(ossimPlanetKmlLayer)

class ossimPlanetKmlLayerNode(ossimPlanetNode):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlLayerNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlLayerNode, name)
    __repr__ = _swig_repr
    def __init__(self, layer = None, obj = None): 
        this = _pyplanet.new_ossimPlanetKmlLayerNode(layer, obj)
        try: self.this.append(this)
        except: self.this = this
    def setKmlLayer(self, *args): return _pyplanet.ossimPlanetKmlLayerNode_setKmlLayer(self, *args)
    def setLayer(self, *args): return _pyplanet.ossimPlanetKmlLayerNode_setLayer(self, *args)
    def setKmlObject(self, *args): return _pyplanet.ossimPlanetKmlLayerNode_setKmlObject(self, *args)
    def layer(self): return _pyplanet.ossimPlanetKmlLayerNode_layer(self)
    def kmlObject(self): return _pyplanet.ossimPlanetKmlLayerNode_kmlObject(self)
    def traverse(self, *args): return _pyplanet.ossimPlanetKmlLayerNode_traverse(self, *args)
    def doNormalStyle(self): return _pyplanet.ossimPlanetKmlLayerNode_doNormalStyle(self)
    def doHighlightStyle(self): return _pyplanet.ossimPlanetKmlLayerNode_doHighlightStyle(self)
    def init(self): return _pyplanet.ossimPlanetKmlLayerNode_init(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlLayerNode
    __del__ = lambda self : None;
ossimPlanetKmlLayerNode_swigregister = _pyplanet.ossimPlanetKmlLayerNode_swigregister
ossimPlanetKmlLayerNode_swigregister(ossimPlanetKmlLayerNode)

class ossimPlanetKmlNetworkLinkNode(ossimPlanetKmlLayerNode):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlLayerNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlNetworkLinkNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlLayerNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlNetworkLinkNode, name)
    __repr__ = _swig_repr
    def __init__(self, layer = None, obj = None): 
        this = _pyplanet.new_ossimPlanetKmlNetworkLinkNode(layer, obj)
        try: self.this.append(this)
        except: self.this = this
    def traverse(self, *args): return _pyplanet.ossimPlanetKmlNetworkLinkNode_traverse(self, *args)
    def init(self): return _pyplanet.ossimPlanetKmlNetworkLinkNode_init(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlNetworkLinkNode
    __del__ = lambda self : None;
ossimPlanetKmlNetworkLinkNode_swigregister = _pyplanet.ossimPlanetKmlNetworkLinkNode_swigregister
ossimPlanetKmlNetworkLinkNode_swigregister(ossimPlanetKmlNetworkLinkNode)

class ossimPlanetKmlPlacemarkNode(ossimPlanetKmlLayerNode):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlLayerNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlPlacemarkNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlLayerNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlPlacemarkNode, name)
    __repr__ = _swig_repr
    def __init__(self, layer = None, obj = None): 
        this = _pyplanet.new_ossimPlanetKmlPlacemarkNode(layer, obj)
        try: self.this.append(this)
        except: self.this = this
    def traverse(self, *args): return _pyplanet.ossimPlanetKmlPlacemarkNode_traverse(self, *args)
    def init(self): return _pyplanet.ossimPlanetKmlPlacemarkNode_init(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlPlacemarkNode
    __del__ = lambda self : None;
ossimPlanetKmlPlacemarkNode_swigregister = _pyplanet.ossimPlanetKmlPlacemarkNode_swigregister
ossimPlanetKmlPlacemarkNode_swigregister(ossimPlanetKmlPlacemarkNode)

class ossimPlanetKmlScreenOverlayNode(ossimPlanetKmlLayerNode):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetKmlLayerNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetKmlScreenOverlayNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetKmlLayerNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetKmlScreenOverlayNode, name)
    __repr__ = _swig_repr
    def __init__(self, layer = None, obj = None): 
        this = _pyplanet.new_ossimPlanetKmlScreenOverlayNode(layer, obj)
        try: self.this.append(this)
        except: self.this = this
    def traverse(self, *args): return _pyplanet.ossimPlanetKmlScreenOverlayNode_traverse(self, *args)
    def init(self): return _pyplanet.ossimPlanetKmlScreenOverlayNode_init(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetKmlScreenOverlayNode
    __del__ = lambda self : None;
ossimPlanetKmlScreenOverlayNode_swigregister = _pyplanet.ossimPlanetKmlScreenOverlayNode_swigregister
ossimPlanetKmlScreenOverlayNode_swigregister(ossimPlanetKmlScreenOverlayNode)

class ossimPlanetLabelGeom(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLabelGeom, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLabelGeom, name)
    __repr__ = _swig_repr
    SHOW_NO_STATE = _pyplanet.ossimPlanetLabelGeom_SHOW_NO_STATE
    SHOW_WHEN_FULL_RES = _pyplanet.ossimPlanetLabelGeom_SHOW_WHEN_FULL_RES
    SHOW_ALWAYS = _pyplanet.ossimPlanetLabelGeom_SHOW_ALWAYS
    def __init__(self, label = "", characterSizeInObjectSpace = 1.0/osg::WGS_84_RADIUS_EQUATOR): 
        this = _pyplanet.new_ossimPlanetLabelGeom(label, characterSizeInObjectSpace)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLabelGeom
    __del__ = lambda self : None;
    def setAlignment(self, *args): return _pyplanet.ossimPlanetLabelGeom_setAlignment(self, *args)
    def setCharacterSizeInObjectSpace(self, *args): return _pyplanet.ossimPlanetLabelGeom_setCharacterSizeInObjectSpace(self, *args)
    def getLabel(self): return _pyplanet.ossimPlanetLabelGeom_getLabel(self)
    def setLabel(self, *args): return _pyplanet.ossimPlanetLabelGeom_setLabel(self, *args)
    def setMaxHeightInPixels(self, *args): return _pyplanet.ossimPlanetLabelGeom_setMaxHeightInPixels(self, *args)
    def setMinHeightInPixels(self, *args): return _pyplanet.ossimPlanetLabelGeom_setMinHeightInPixels(self, *args)
    def setColor(self, *args): return _pyplanet.ossimPlanetLabelGeom_setColor(self, *args)
    def setEnableFlag(self, *args): return _pyplanet.ossimPlanetLabelGeom_setEnableFlag(self, *args)
    def setShowFlag(self, *args): return _pyplanet.ossimPlanetLabelGeom_setShowFlag(self, *args)
    def traverse(self, *args): return _pyplanet.ossimPlanetLabelGeom_traverse(self, *args)
    def computeBound(self): return _pyplanet.ossimPlanetLabelGeom_computeBound(self)
ossimPlanetLabelGeom_swigregister = _pyplanet.ossimPlanetLabelGeom_swigregister
ossimPlanetLabelGeom_swigregister(ossimPlanetLabelGeom)

class ossimPlanetLand(ossimPlanetLayer):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetLayer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLand, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetLayer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLand, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetLand()
        try: self.this.append(this)
        except: self.this = this
    def cloneType(self): return _pyplanet.ossimPlanetLand_cloneType(self)
    def isSameKindAs(self, *args): return _pyplanet.ossimPlanetLand_isSameKindAs(self, *args)
    def className(self): return _pyplanet.ossimPlanetLand_className(self)
    def libraryName(self): return _pyplanet.ossimPlanetLand_libraryName(self)
    def accept(self, *args): return _pyplanet.ossimPlanetLand_accept(self, *args)
    def traverse(self, *args): return _pyplanet.ossimPlanetLand_traverse(self, *args)
    def setModel(self, *args): return _pyplanet.ossimPlanetLand_setModel(self, *args)
    def setLineOfSiteIntersection(self, *args): return _pyplanet.ossimPlanetLand_setLineOfSiteIntersection(self, *args)
    def setElevationEnabledFlag(self, *args): return _pyplanet.ossimPlanetLand_setElevationEnabledFlag(self, *args)
    def getElevationEnabledFlag(self): return _pyplanet.ossimPlanetLand_getElevationEnabledFlag(self)
    def getHeightExag(self): return _pyplanet.ossimPlanetLand_getHeightExag(self)
    def setHeightExag(self, *args): return _pyplanet.ossimPlanetLand_setHeightExag(self, *args)
    def getElevationPatchSize(self): return _pyplanet.ossimPlanetLand_getElevationPatchSize(self)
    def setElevationPatchSize(self, *args): return _pyplanet.ossimPlanetLand_setElevationPatchSize(self, *args)
    def setReaderWriter(self, *args): return _pyplanet.ossimPlanetLand_setReaderWriter(self, *args)
    def getReaderWriter(self, *args): return _pyplanet.ossimPlanetLand_getReaderWriter(self, *args)
    def getMaxLevelDetail(self): return _pyplanet.ossimPlanetLand_getMaxLevelDetail(self)
    def setMaxLevelDetail(self, *args): return _pyplanet.ossimPlanetLand_setMaxLevelDetail(self, *args)
    def getElevationCacheDir(self): return _pyplanet.ossimPlanetLand_getElevationCacheDir(self)
    def setElevationCacheDir(self, *args): return _pyplanet.ossimPlanetLand_setElevationCacheDir(self, *args)
    def resetGraph(self, *args): return _pyplanet.ossimPlanetLand_resetGraph(self, *args)
    def addChild(self, *args): return _pyplanet.ossimPlanetLand_addChild(self, *args)
    def model(self): return _pyplanet.ossimPlanetLand_model(self)
    def getNumberOfOverlayLayers(self): return _pyplanet.ossimPlanetLand_getNumberOfOverlayLayers(self)
    def setReferenceLayer(self, *args): return _pyplanet.ossimPlanetLand_setReferenceLayer(self, *args)
    def referenceLayer(self, *args): return _pyplanet.ossimPlanetLand_referenceLayer(self, *args)
    def overlayLayers(self, *args): return _pyplanet.ossimPlanetLand_overlayLayers(self, *args)
    def overlayLayer(self, *args): return _pyplanet.ossimPlanetLand_overlayLayer(self, *args)
    def removeOverlayLayer(self, *args): return _pyplanet.ossimPlanetLand_removeOverlayLayer(self, *args)
    def addOverlayLayer(self, *args): return _pyplanet.ossimPlanetLand_addOverlayLayer(self, *args)
    def setOverlayLayer(self, *args): return _pyplanet.ossimPlanetLand_setOverlayLayer(self, *args)
    def getCurrentShader(self): return _pyplanet.ossimPlanetLand_getCurrentShader(self)
    def setCurrentFragmentShaderType(self, *args): return _pyplanet.ossimPlanetLand_setCurrentFragmentShaderType(self, *args)
    def setCacheSize(self, *args): return _pyplanet.ossimPlanetLand_setCacheSize(self, *args)
    def getCacheSize(self): return _pyplanet.ossimPlanetLand_getCacheSize(self)
    def setSplitMetricRatio(self, *args): return _pyplanet.ossimPlanetLand_setSplitMetricRatio(self, *args)
    def getSplitMetricRatio(self): return _pyplanet.ossimPlanetLand_getSplitMetricRatio(self)
    def setSplitPriorityType(self, *args): return _pyplanet.ossimPlanetLand_setSplitPriorityType(self, *args)
    def getSplitPrioirtyType(self): return _pyplanet.ossimPlanetLand_getSplitPrioirtyType(self)
    def setCullingFlag(self, *args): return _pyplanet.ossimPlanetLand_setCullingFlag(self, *args)
    def getCullingFlag(self): return _pyplanet.ossimPlanetLand_getCullingFlag(self)
    def setFreezeRequestFlag(self, *args): return _pyplanet.ossimPlanetLand_setFreezeRequestFlag(self, *args)
    def getFreezRequestFlag(self): return _pyplanet.ossimPlanetLand_getFreezRequestFlag(self)
    def getMipMappingFlag(self): return _pyplanet.ossimPlanetLand_getMipMappingFlag(self)
    def setMipMappingFlag(self, *args): return _pyplanet.ossimPlanetLand_setMipMappingFlag(self, *args)
    def addElevationDirectory(self, *args): return _pyplanet.ossimPlanetLand_addElevationDirectory(self, *args)
    def addElevation(self, *args): return _pyplanet.ossimPlanetLand_addElevation(self, *args)
    def shadersInitialized(self): return _pyplanet.ossimPlanetLand_shadersInitialized(self)
    def clearElevation(self): return _pyplanet.ossimPlanetLand_clearElevation(self)
    def pagedLodAdded(self, *args): return _pyplanet.ossimPlanetLand_pagedLodAdded(self, *args)
    def pagedLodRemoved(self, *args): return _pyplanet.ossimPlanetLand_pagedLodRemoved(self, *args)
    def pagedLodModified(self, *args): return _pyplanet.ossimPlanetLand_pagedLodModified(self, *args)
    def execute(self, *args): return _pyplanet.ossimPlanetLand_execute(self, *args)
ossimPlanetLand_swigregister = _pyplanet.ossimPlanetLand_swigregister
ossimPlanetLand_swigregister(ossimPlanetLand)

class ossimPlanetLandCacheNode(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLandCacheNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLandCacheNode, name)
    __repr__ = _swig_repr
    def __init__(self, landCache = None, id = 0): 
        this = _pyplanet.new_ossimPlanetLandCacheNode(landCache, id)
        try: self.this.append(this)
        except: self.this = this
    def getId(self): return _pyplanet.ossimPlanetLandCacheNode_getId(self)
    def access(self): return _pyplanet.ossimPlanetLandCacheNode_access(self)
    def setExtents(self, *args): return _pyplanet.ossimPlanetLandCacheNode_setExtents(self, *args)
    def setTexture(self, *args): return _pyplanet.ossimPlanetLandCacheNode_setTexture(self, *args)
    def setElevation(self, *args): return _pyplanet.ossimPlanetLandCacheNode_setElevation(self, *args)
    def setLandCache(self, *args): return _pyplanet.ossimPlanetLandCacheNode_setLandCache(self, *args)
    def getExtents(self): return _pyplanet.ossimPlanetLandCacheNode_getExtents(self)
    def clearTextures(self): return _pyplanet.ossimPlanetLandCacheNode_clearTextures(self)
    def getTexture(self, *args): return _pyplanet.ossimPlanetLandCacheNode_getTexture(self, *args)
    def getElevation(self): return _pyplanet.ossimPlanetLandCacheNode_getElevation(self)
    def getTextureListSize(self): return _pyplanet.ossimPlanetLandCacheNode_getTextureListSize(self)
    def getNodeSizeInBytes(self): return _pyplanet.ossimPlanetLandCacheNode_getNodeSizeInBytes(self)
    def timeStamp(self): return _pyplanet.ossimPlanetLandCacheNode_timeStamp(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLandCacheNode
    __del__ = lambda self : None;
ossimPlanetLandCacheNode_swigregister = _pyplanet.ossimPlanetLandCacheNode_swigregister
ossimPlanetLandCacheNode_swigregister(ossimPlanetLandCacheNode)

class ossimPlanetLandCache(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLandCache, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLandCache, name)
    __repr__ = _swig_repr
    def __init__(self, maxCacheSize = 0, minCacheSize = 0): 
        this = _pyplanet.new_ossimPlanetLandCache(maxCacheSize, minCacheSize)
        try: self.this.append(this)
        except: self.this = this
    def addNode(self, *args): return _pyplanet.ossimPlanetLandCache_addNode(self, *args)
    def getNode(self, *args): return _pyplanet.ossimPlanetLandCache_getNode(self, *args)
    def removeNode(self, *args): return _pyplanet.ossimPlanetLandCache_removeNode(self, *args)
    def setCacheSize(self, *args): return _pyplanet.ossimPlanetLandCache_setCacheSize(self, *args)
    def getCacheSize(self): return _pyplanet.ossimPlanetLandCache_getCacheSize(self)
    def shrinkCache(self): return _pyplanet.ossimPlanetLandCache_shrinkCache(self)
    def clearCache(self): return _pyplanet.ossimPlanetLandCache_clearCache(self)
    def clearTexturesWithinExtents(self, *args): return _pyplanet.ossimPlanetLandCache_clearTexturesWithinExtents(self, *args)
    def clearAllWithinExtents(self, *args): return _pyplanet.ossimPlanetLandCache_clearAllWithinExtents(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLandCache
    __del__ = lambda self : None;
ossimPlanetLandCache_swigregister = _pyplanet.ossimPlanetLandCache_swigregister
ossimPlanetLandCache_swigregister(ossimPlanetLandCache)

class ossimPlanetLandCullCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLandCullCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLandCullCallback, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetLandCullCallback(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self): return _pyplanet.ossimPlanetLandCullCallback_clone(self)
    def __call__(self, *args): return _pyplanet.ossimPlanetLandCullCallback___call__(self, *args)
    def setLineOfSite(self, *args): return _pyplanet.ossimPlanetLandCullCallback_setLineOfSite(self, *args)
    def setLineOfSiteValidFlag(self, *args): return _pyplanet.ossimPlanetLandCullCallback_setLineOfSiteValidFlag(self, *args)
    def isLineOfSiteValid(self): return _pyplanet.ossimPlanetLandCullCallback_isLineOfSiteValid(self)
    def setSplitMetricRatio(self, *args): return _pyplanet.ossimPlanetLandCullCallback_setSplitMetricRatio(self, *args)
    def getSplitMetricRatio(self): return _pyplanet.ossimPlanetLandCullCallback_getSplitMetricRatio(self)
    def setSplitPriorityType(self, *args): return _pyplanet.ossimPlanetLandCullCallback_setSplitPriorityType(self, *args)
    def getSplitPriorityType(self): return _pyplanet.ossimPlanetLandCullCallback_getSplitPriorityType(self)
    def setCullingFlag(self, *args): return _pyplanet.ossimPlanetLandCullCallback_setCullingFlag(self, *args)
    def getCullingFlag(self): return _pyplanet.ossimPlanetLandCullCallback_getCullingFlag(self)
    def setFreezeRequestFlag(self, *args): return _pyplanet.ossimPlanetLandCullCallback_setFreezeRequestFlag(self, *args)
    def getFreezRequestFlag(self): return _pyplanet.ossimPlanetLandCullCallback_getFreezRequestFlag(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLandCullCallback
    __del__ = lambda self : None;
ossimPlanetLandCullCallback_swigregister = _pyplanet.ossimPlanetLandCullCallback_swigregister
ossimPlanetLandCullCallback_swigregister(ossimPlanetLandCullCallback)

ossimPlanetLandNormalType_ELLIPSOIDAL = _pyplanet.ossimPlanetLandNormalType_ELLIPSOIDAL
ossimPlanetLandNormalType_FLAT = _pyplanet.ossimPlanetLandNormalType_FLAT
class ossimPlanetLandReaderWriter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLandReaderWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLandReaderWriter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def className(self): return _pyplanet.ossimPlanetLandReaderWriter_className(self)
    def readNode(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_readNode(self, *args)
    def getId(self): return _pyplanet.ossimPlanetLandReaderWriter_getId(self)
    def createDbString(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_createDbString(self, *args)
    def setModel(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setModel(self, *args)
    def model(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_model(self, *args)
    def setLandNodeCullCallback(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setLandNodeCullCallback(self, *args)
    def getElevationEnabledFlag(self): return _pyplanet.ossimPlanetLandReaderWriter_getElevationEnabledFlag(self)
    def setElevationEnabledFlag(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setElevationEnabledFlag(self, *args)
    def getHeightExag(self): return _pyplanet.ossimPlanetLandReaderWriter_getHeightExag(self)
    def setHeightExag(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setHeightExag(self, *args)
    def getElevationPatchSize(self): return _pyplanet.ossimPlanetLandReaderWriter_getElevationPatchSize(self)
    def setElevationPatchSize(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setElevationPatchSize(self, *args)
    def getMaxLevelDetail(self): return _pyplanet.ossimPlanetLandReaderWriter_getMaxLevelDetail(self)
    def setMaxLevelDetail(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setMaxLevelDetail(self, *args)
    def getElevationCacheDir(self): return _pyplanet.ossimPlanetLandReaderWriter_getElevationCacheDir(self)
    def setElevationCacheDir(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setElevationCacheDir(self, *args)
    def gridUtility(self): return _pyplanet.ossimPlanetLandReaderWriter_gridUtility(self)
    def setGridUtility(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setGridUtility(self, *args)
    def setReferenceLayer(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setReferenceLayer(self, *args)
    def setOverlayLayers(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setOverlayLayers(self, *args)
    def setMipMappingFlag(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setMipMappingFlag(self, *args)
    def getMipMappingFlag(self): return _pyplanet.ossimPlanetLandReaderWriter_getMipMappingFlag(self)
    def setMultiTextureEnableFlag(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setMultiTextureEnableFlag(self, *args)
    def getMultiTextureEnableFlag(self): return _pyplanet.ossimPlanetLandReaderWriter_getMultiTextureEnableFlag(self)
    def setLandCache(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setLandCache(self, *args)
    def setElevationDatabase(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_setElevationDatabase(self, *args)
    def getElevationGroup(self, *args): return _pyplanet.ossimPlanetLandReaderWriter_getElevationGroup(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLandReaderWriter
    __del__ = lambda self : None;
ossimPlanetLandReaderWriter_swigregister = _pyplanet.ossimPlanetLandReaderWriter_swigregister
ossimPlanetLandReaderWriter_swigregister(ossimPlanetLandReaderWriter)

class ossimPlanetLandTextureRequest(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLandTextureRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLandTextureRequest, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetLandTextureRequest(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLandTextureRequest
    __del__ = lambda self : None;
    def setTextures(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setTextures(self, *args)
    def setTransform(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setTransform(self, *args)
    def setCullCallback(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setCullCallback(self, *args)
    def getTransform(self): return _pyplanet.ossimPlanetLandTextureRequest_getTransform(self)
    def getTextures(self): return _pyplanet.ossimPlanetLandTextureRequest_getTextures(self)
    def getCullCallback(self): return _pyplanet.ossimPlanetLandTextureRequest_getCullCallback(self)
    def getLevel(self): return _pyplanet.ossimPlanetLandTextureRequest_getLevel(self)
    def getRow(self): return _pyplanet.ossimPlanetLandTextureRequest_getRow(self)
    def getCol(self): return _pyplanet.ossimPlanetLandTextureRequest_getCol(self)
    def setCenterPoint(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setCenterPoint(self, *args)
    def setUlPoint(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setUlPoint(self, *args)
    def setUrPoint(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setUrPoint(self, *args)
    def setLrPoint(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setLrPoint(self, *args)
    def setLlPoint(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setLlPoint(self, *args)
    def setCenterNormal(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setCenterNormal(self, *args)
    def setUlNormal(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setUlNormal(self, *args)
    def setUrNormal(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setUrNormal(self, *args)
    def setLrNormal(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setLrNormal(self, *args)
    def setLlNormal(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setLlNormal(self, *args)
    def centerPoint(self): return _pyplanet.ossimPlanetLandTextureRequest_centerPoint(self)
    def ulPoint(self): return _pyplanet.ossimPlanetLandTextureRequest_ulPoint(self)
    def urPoint(self): return _pyplanet.ossimPlanetLandTextureRequest_urPoint(self)
    def lrPoint(self): return _pyplanet.ossimPlanetLandTextureRequest_lrPoint(self)
    def llPoint(self): return _pyplanet.ossimPlanetLandTextureRequest_llPoint(self)
    def centerNormal(self): return _pyplanet.ossimPlanetLandTextureRequest_centerNormal(self)
    def ulNormal(self): return _pyplanet.ossimPlanetLandTextureRequest_ulNormal(self)
    def urNormal(self): return _pyplanet.ossimPlanetLandTextureRequest_urNormal(self)
    def lrNormal(self): return _pyplanet.ossimPlanetLandTextureRequest_lrNormal(self)
    def llNormal(self): return _pyplanet.ossimPlanetLandTextureRequest_llNormal(self)
    def setBoundingBox(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setBoundingBox(self, *args)
    def boundingBox(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_boundingBox(self, *args)
    def setChildrenBounds(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setChildrenBounds(self, *args)
    def childrenBounds(self): return _pyplanet.ossimPlanetLandTextureRequest_childrenBounds(self)
    def getTextureState(self): return _pyplanet.ossimPlanetLandTextureRequest_getTextureState(self)
    def setTextureState(self, *args): return _pyplanet.ossimPlanetLandTextureRequest_setTextureState(self, *args)
ossimPlanetLandTextureRequest_swigregister = _pyplanet.ossimPlanetLandTextureRequest_swigregister
ossimPlanetLandTextureRequest_swigregister(ossimPlanetLandTextureRequest)

class ossimPlanetLandTreeNode(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLandTreeNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLandTreeNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetLandTreeNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLandTreeNode
    __del__ = lambda self : None;
ossimPlanetLandTreeNode_swigregister = _pyplanet.ossimPlanetLandTreeNode_swigregister
ossimPlanetLandTreeNode_swigregister(ossimPlanetLandTreeNode)

class ossimPlanetLatLonHud(ossimPlanetLayer):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetLayer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLatLonHud, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetLayer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLatLonHud, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetLatLonHud()
        try: self.this.append(this)
        except: self.this = this
    def traverse(self, *args): return _pyplanet.ossimPlanetLatLonHud_traverse(self, *args)
    def getCrossHairColor(self): return _pyplanet.ossimPlanetLatLonHud_getCrossHairColor(self)
    def getTextColor(self): return _pyplanet.ossimPlanetLatLonHud_getTextColor(self)
    def setCrosshairColor(self, *args): return _pyplanet.ossimPlanetLatLonHud_setCrosshairColor(self, *args)
    def setTextColor(self, *args): return _pyplanet.ossimPlanetLatLonHud_setTextColor(self, *args)
    def setFont(self, *args): return _pyplanet.ossimPlanetLatLonHud_setFont(self, *args)
    def setLatDisplayString(self, *args): return _pyplanet.ossimPlanetLatLonHud_setLatDisplayString(self, *args)
    def setLonDisplayString(self, *args): return _pyplanet.ossimPlanetLatLonHud_setLonDisplayString(self, *args)
    def setCharacterSize(self, *args): return _pyplanet.ossimPlanetLatLonHud_setCharacterSize(self, *args)
    def setViewport(self, *args): return _pyplanet.ossimPlanetLatLonHud_setViewport(self, *args)
    def setAutoUpdateFlag(self, *args): return _pyplanet.ossimPlanetLatLonHud_setAutoUpdateFlag(self, *args)
    def setCompassTexture(self, *args): return _pyplanet.ossimPlanetLatLonHud_setCompassTexture(self, *args)
    def execute(self, *args): return _pyplanet.ossimPlanetLatLonHud_execute(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLatLonHud
    __del__ = lambda self : None;
ossimPlanetLatLonHud_swigregister = _pyplanet.ossimPlanetLatLonHud_swigregister
ossimPlanetLatLonHud_swigregister(ossimPlanetLatLonHud)

class ossimPlanetLayerFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLayerFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLayerFactory, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetLayerFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLayerFactory
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyplanet.ossimPlanetLayerFactory_instance
    if _newclass:instance = staticmethod(_pyplanet.ossimPlanetLayerFactory_instance)
    def create(self, *args): return _pyplanet.ossimPlanetLayerFactory_create(self, *args)
ossimPlanetLayerFactory_swigregister = _pyplanet.ossimPlanetLayerFactory_swigregister
ossimPlanetLayerFactory_swigregister(ossimPlanetLayerFactory)

def ossimPlanetLayerFactory_instance():
  return _pyplanet.ossimPlanetLayerFactory_instance()
ossimPlanetLayerFactory_instance = _pyplanet.ossimPlanetLayerFactory_instance

class ossimPlanetLayerFactoryBase(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLayerFactoryBase, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLayerFactoryBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def create(self, *args): return _pyplanet.ossimPlanetLayerFactoryBase_create(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLayerFactoryBase
    __del__ = lambda self : None;
ossimPlanetLayerFactoryBase_swigregister = _pyplanet.ossimPlanetLayerFactoryBase_swigregister
ossimPlanetLayerFactoryBase_swigregister(ossimPlanetLayerFactoryBase)

class ossimPlanetLayerRegistry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLayerRegistry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLayerRegistry, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetLayerRegistry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLayerRegistry
    __del__ = lambda self : None;
    __swig_getmethods__["instance"] = lambda x: _pyplanet.ossimPlanetLayerRegistry_instance
    if _newclass:instance = staticmethod(_pyplanet.ossimPlanetLayerRegistry_instance)
    def finalize(self): return _pyplanet.ossimPlanetLayerRegistry_finalize(self)
    def create(self, *args): return _pyplanet.ossimPlanetLayerRegistry_create(self, *args)
    def registerFactory(self, *args): return _pyplanet.ossimPlanetLayerRegistry_registerFactory(self, *args)
    def unregisterFactory(self, *args): return _pyplanet.ossimPlanetLayerRegistry_unregisterFactory(self, *args)
ossimPlanetLayerRegistry_swigregister = _pyplanet.ossimPlanetLayerRegistry_swigregister
ossimPlanetLayerRegistry_swigregister(ossimPlanetLayerRegistry)

def ossimPlanetLayerRegistry_instance():
  return _pyplanet.ossimPlanetLayerRegistry_instance()
ossimPlanetLayerRegistry_instance = _pyplanet.ossimPlanetLayerRegistry_instance

class ossimPlanetLookAt(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLookAt, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLookAt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetLookAt(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self): return _pyplanet.ossimPlanetLookAt_clone(self)
    def setAll(self, *args): return _pyplanet.ossimPlanetLookAt_setAll(self, *args)
    def setLat(self, *args): return _pyplanet.ossimPlanetLookAt_setLat(self, *args)
    def lat(self): return _pyplanet.ossimPlanetLookAt_lat(self)
    def setLon(self, *args): return _pyplanet.ossimPlanetLookAt_setLon(self, *args)
    def lon(self): return _pyplanet.ossimPlanetLookAt_lon(self)
    def setAltitude(self, *args): return _pyplanet.ossimPlanetLookAt_setAltitude(self, *args)
    def altitude(self): return _pyplanet.ossimPlanetLookAt_altitude(self)
    def setHeading(self, *args): return _pyplanet.ossimPlanetLookAt_setHeading(self, *args)
    def heading(self): return _pyplanet.ossimPlanetLookAt_heading(self)
    def setPitch(self, *args): return _pyplanet.ossimPlanetLookAt_setPitch(self, *args)
    def pitch(self): return _pyplanet.ossimPlanetLookAt_pitch(self)
    def setRoll(self, *args): return _pyplanet.ossimPlanetLookAt_setRoll(self, *args)
    def roll(self): return _pyplanet.ossimPlanetLookAt_roll(self)
    def setRange(self, *args): return _pyplanet.ossimPlanetLookAt_setRange(self, *args)
    def range(self): return _pyplanet.ossimPlanetLookAt_range(self)
    def setAltitudeMode(self, *args): return _pyplanet.ossimPlanetLookAt_setAltitudeMode(self, *args)
    def altitudeMode(self): return _pyplanet.ossimPlanetLookAt_altitudeMode(self)
    def toNavigationString(self): return _pyplanet.ossimPlanetLookAt_toNavigationString(self)
    def toKml(self): return _pyplanet.ossimPlanetLookAt_toKml(self)
    def saveXml(self): return _pyplanet.ossimPlanetLookAt_saveXml(self)
    def loadXml(self, *args): return _pyplanet.ossimPlanetLookAt_loadXml(self, *args)
    __swig_getmethods__["modeToString"] = lambda x: _pyplanet.ossimPlanetLookAt_modeToString
    if _newclass:modeToString = staticmethod(_pyplanet.ossimPlanetLookAt_modeToString)
    __swig_getmethods__["modeFromString"] = lambda x: _pyplanet.ossimPlanetLookAt_modeFromString
    if _newclass:modeFromString = staticmethod(_pyplanet.ossimPlanetLookAt_modeFromString)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLookAt
    __del__ = lambda self : None;
ossimPlanetLookAt_swigregister = _pyplanet.ossimPlanetLookAt_swigregister
ossimPlanetLookAt_swigregister(ossimPlanetLookAt)

def ossimPlanetLookAt_modeToString(*args):
  return _pyplanet.ossimPlanetLookAt_modeToString(*args)
ossimPlanetLookAt_modeToString = _pyplanet.ossimPlanetLookAt_modeToString

def ossimPlanetLookAt_modeFromString(*args):
  return _pyplanet.ossimPlanetLookAt_modeFromString(*args)
ossimPlanetLookAt_modeFromString = _pyplanet.ossimPlanetLookAt_modeFromString

class ossimPlanetLsrSpaceTransformCallback(ossimPlanetCallback):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLsrSpaceTransformCallback, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLsrSpaceTransformCallback, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def lsrSpaceChanged(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransformCallback_lsrSpaceChanged(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLsrSpaceTransformCallback
    __del__ = lambda self : None;
ossimPlanetLsrSpaceTransformCallback_swigregister = _pyplanet.ossimPlanetLsrSpaceTransformCallback_swigregister
ossimPlanetLsrSpaceTransformCallback_swigregister(ossimPlanetLsrSpaceTransformCallback)

class ossimPlanetLsrSpaceTransform(Transform,ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback):
    __swig_setmethods__ = {}
    for _s in [Transform,ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetLsrSpaceTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [Transform,ossimPlanetCallbackIface_ossimPlanetLsrSpaceTransformCallback]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetLsrSpaceTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetLsrSpaceTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def setModel(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransform_setModel(self, *args)
    def copyParametersOnly(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransform_copyParametersOnly(self, *args)
    def model(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransform_model(self, *args)
    def setMatrix(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransform_setMatrix(self, *args)
    def lat(self): return _pyplanet.ossimPlanetLsrSpaceTransform_lat(self)
    def lon(self): return _pyplanet.ossimPlanetLsrSpaceTransform_lon(self)
    def altitude(self): return _pyplanet.ossimPlanetLsrSpaceTransform_altitude(self)
    def latLonAltitude(self): return _pyplanet.ossimPlanetLsrSpaceTransform_latLonAltitude(self)
    def x(self): return _pyplanet.ossimPlanetLsrSpaceTransform_x(self)
    def y(self): return _pyplanet.ossimPlanetLsrSpaceTransform_y(self)
    def z(self): return _pyplanet.ossimPlanetLsrSpaceTransform_z(self)
    def xyz(self): return _pyplanet.ossimPlanetLsrSpaceTransform_xyz(self)
    def heading(self): return _pyplanet.ossimPlanetLsrSpaceTransform_heading(self)
    def pitch(self): return _pyplanet.ossimPlanetLsrSpaceTransform_pitch(self)
    def roll(self): return _pyplanet.ossimPlanetLsrSpaceTransform_roll(self)
    def headingPitchRoll(self): return _pyplanet.ossimPlanetLsrSpaceTransform_headingPitchRoll(self)
    def scalex(self): return _pyplanet.ossimPlanetLsrSpaceTransform_scalex(self)
    def scaley(self): return _pyplanet.ossimPlanetLsrSpaceTransform_scaley(self)
    def scalez(self): return _pyplanet.ossimPlanetLsrSpaceTransform_scalez(self)
    def scale(self): return _pyplanet.ossimPlanetLsrSpaceTransform_scale(self)
    def setHeadingPitchRoll(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransform_setHeadingPitchRoll(self, *args)
    def setLatLonAltitude(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransform_setLatLonAltitude(self, *args)
    def setLatLonAltitudeMeanSeaLevel(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransform_setLatLonAltitudeMeanSeaLevel(self, *args)
    def setScale(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransform_setScale(self, *args)
    def setXYZ(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransform_setXYZ(self, *args)
    def computeLocalToWorldMatrix(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransform_computeLocalToWorldMatrix(self, *args)
    def computeWorldToLocalMatrix(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransform_computeWorldToLocalMatrix(self, *args)
    def traverse(self, *args): return _pyplanet.ossimPlanetLsrSpaceTransform_traverse(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetLsrSpaceTransform
    __del__ = lambda self : None;
ossimPlanetLsrSpaceTransform_swigregister = _pyplanet.ossimPlanetLsrSpaceTransform_swigregister
ossimPlanetLsrSpaceTransform_swigregister(ossimPlanetLsrSpaceTransform)

OSSIM_PLANETMANIPULATOR = _pyplanet.OSSIM_PLANETMANIPULATOR
class ossimPlanetManipulator(ossimPlanetActionReceiver):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetActionReceiver]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetManipulator, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetActionReceiver]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetManipulator, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetManipulator()
        try: self.this.append(this)
        except: self.this = this
    def className(self): return _pyplanet.ossimPlanetManipulator_className(self)
    def setByMatrix(self, *args): return _pyplanet.ossimPlanetManipulator_setByMatrix(self, *args)
    def setByInverseMatrix(self, *args): return _pyplanet.ossimPlanetManipulator_setByInverseMatrix(self, *args)
    def getMatrix(self): return _pyplanet.ossimPlanetManipulator_getMatrix(self)
    def getInverseMatrix(self): return _pyplanet.ossimPlanetManipulator_getInverseMatrix(self)
    def setNode(self, *args): return _pyplanet.ossimPlanetManipulator_setNode(self, *args)
    def getFusionDistanceMode(self): return _pyplanet.ossimPlanetManipulator_getFusionDistanceMode(self)
    def getFusionDistanceValue(self): return _pyplanet.ossimPlanetManipulator_getFusionDistanceValue(self)
    def getNode(self, *args): return _pyplanet.ossimPlanetManipulator_getNode(self, *args)
    def home(self, *args): return _pyplanet.ossimPlanetManipulator_home(self, *args)
    def init(self, *args): return _pyplanet.ossimPlanetManipulator_init(self, *args)
    def handle(self, *args): return _pyplanet.ossimPlanetManipulator_handle(self, *args)
    def getUsage(self, *args): return _pyplanet.ossimPlanetManipulator_getUsage(self, *args)
    def setLockToNode(self, *args): return _pyplanet.ossimPlanetManipulator_setLockToNode(self, *args)
    def getLatLonHgtHPR(self, *args): return _pyplanet.ossimPlanetManipulator_getLatLonHgtHPR(self, *args)
    def solveLookAt(self, *args): return _pyplanet.ossimPlanetManipulator_solveLookAt(self, *args)
    def playRecording(self): return _pyplanet.ossimPlanetManipulator_playRecording(self)
    def startRecording(self): return _pyplanet.ossimPlanetManipulator_startRecording(self)
    def stopRecording(self): return _pyplanet.ossimPlanetManipulator_stopRecording(self)
    def saveRecording(self, *args): return _pyplanet.ossimPlanetManipulator_saveRecording(self, *args)
    def loadRecording(self, *args): return _pyplanet.ossimPlanetManipulator_loadRecording(self, *args)
    def extractLookFromParameters(self, *args): return _pyplanet.ossimPlanetManipulator_extractLookFromParameters(self, *args)
    def setEventHandlingFlag(self, *args): return _pyplanet.ossimPlanetManipulator_setEventHandlingFlag(self, *args)
    def setUseFrameEventForUpdateFlag(self, *args): return _pyplanet.ossimPlanetManipulator_setUseFrameEventForUpdateFlag(self, *args)
    def setAutoCalculateIntersectionFlag(self, *args): return _pyplanet.ossimPlanetManipulator_setAutoCalculateIntersectionFlag(self, *args)
    def setLosXYZ(self, *args): return _pyplanet.ossimPlanetManipulator_setLosXYZ(self, *args)
    def updateNavigator(self): return _pyplanet.ossimPlanetManipulator_updateNavigator(self)
    def navigator(self): return _pyplanet.ossimPlanetManipulator_navigator(self)
    def setLatitude(self, *args): return _pyplanet.ossimPlanetManipulator_setLatitude(self, *args)
    def setLongitude(self, *args): return _pyplanet.ossimPlanetManipulator_setLongitude(self, *args)
    def setAltitude(self, *args): return _pyplanet.ossimPlanetManipulator_setAltitude(self, *args)
    def setLatitudeLongitudeAltitude(self, *args): return _pyplanet.ossimPlanetManipulator_setLatitudeLongitudeAltitude(self, *args)
    def setPosition(self, *args): return _pyplanet.ossimPlanetManipulator_setPosition(self, *args)
    def setHeading(self, *args): return _pyplanet.ossimPlanetManipulator_setHeading(self, *args)
    def setPitch(self, *args): return _pyplanet.ossimPlanetManipulator_setPitch(self, *args)
    def setRoll(self, *args): return _pyplanet.ossimPlanetManipulator_setRoll(self, *args)
    def setHeadingPitchRoll(self, *args): return _pyplanet.ossimPlanetManipulator_setHeadingPitchRoll(self, *args)
    def setOrientation(self, *args): return _pyplanet.ossimPlanetManipulator_setOrientation(self, *args)
    def setPositionAndOrientation(self, *args): return _pyplanet.ossimPlanetManipulator_setPositionAndOrientation(self, *args)
    def viewMatrixBuilder(self, *args): return _pyplanet.ossimPlanetManipulator_viewMatrixBuilder(self, *args)
    def execute(self, *args): return _pyplanet.ossimPlanetManipulator_execute(self, *args)
    def initializeDefaultBindings(self, pathName = ":navigator"): return _pyplanet.ossimPlanetManipulator_initializeDefaultBindings(self, pathName)
ossimPlanetManipulator_swigregister = _pyplanet.ossimPlanetManipulator_swigregister
ossimPlanetManipulator_swigregister(ossimPlanetManipulator)

class ossimPlanetMessage(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetMessage, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetMessage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetMessage(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self): return _pyplanet.ossimPlanetMessage_clone(self)
    def id(self): return _pyplanet.ossimPlanetMessage_id(self)
    def setId(self, *args): return _pyplanet.ossimPlanetMessage_setId(self, *args)
    def setData(self, *args): return _pyplanet.ossimPlanetMessage_setData(self, *args)
    def dataSize(self): return _pyplanet.ossimPlanetMessage_dataSize(self)
    def data(self): return _pyplanet.ossimPlanetMessage_data(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetMessage
    __del__ = lambda self : None;
ossimPlanetMessage_swigregister = _pyplanet.ossimPlanetMessage_swigregister
ossimPlanetMessage_swigregister(ossimPlanetMessage)

class ossimPlanetNavigator(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetNavigator, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetNavigator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetNavigator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetNavigator
    __del__ = lambda self : None;
    def lat(self): return _pyplanet.ossimPlanetNavigator_lat(self)
    def lon(self): return _pyplanet.ossimPlanetNavigator_lon(self)
    def elev(self): return _pyplanet.ossimPlanetNavigator_elev(self)
    def orientation(self): return _pyplanet.ossimPlanetNavigator_orientation(self)
    def metersToCenter(self): return _pyplanet.ossimPlanetNavigator_metersToCenter(self)
    def setLatLonHeight(self, *args): return _pyplanet.ossimPlanetNavigator_setLatLonHeight(self, *args)
    def setHpr(self, *args): return _pyplanet.ossimPlanetNavigator_setHpr(self, *args)
    def centerOfInterest(self): return _pyplanet.ossimPlanetNavigator_centerOfInterest(self)
    def update(self): return _pyplanet.ossimPlanetNavigator_update(self)
    def updateZoomParameters(self): return _pyplanet.ossimPlanetNavigator_updateZoomParameters(self)
    def primary(self): return _pyplanet.ossimPlanetNavigator_primary(self)
    def execute(self, *args): return _pyplanet.ossimPlanetNavigator_execute(self, *args)
    def orientationLsrMatrix(self, *args): return _pyplanet.ossimPlanetNavigator_orientationLsrMatrix(self, *args)
    def viewMatrix(self, *args): return _pyplanet.ossimPlanetNavigator_viewMatrix(self, *args)
    def setViewParameters(self, *args): return _pyplanet.ossimPlanetNavigator_setViewParameters(self, *args)
    def setPlanet(self, *args): return _pyplanet.ossimPlanetNavigator_setPlanet(self, *args)
    def canSetLineOfSite(self): return _pyplanet.ossimPlanetNavigator_canSetLineOfSite(self)
    def pitchOffset(self): return _pyplanet.ossimPlanetNavigator_pitchOffset(self)
    def setLosXYZ(self, *args): return _pyplanet.ossimPlanetNavigator_setLosXYZ(self, *args)
    def setLosXYZValidFlag(self, *args): return _pyplanet.ossimPlanetNavigator_setLosXYZValidFlag(self, *args)
    def gotZoomingLosFlag(self): return _pyplanet.ossimPlanetNavigator_gotZoomingLosFlag(self)
    def getLosLookingFlag(self): return _pyplanet.ossimPlanetNavigator_getLosLookingFlag(self)
    def setLosLookingFlag(self, *args): return _pyplanet.ossimPlanetNavigator_setLosLookingFlag(self, *args)
    NAV_ANIMATION_NONE = _pyplanet.ossimPlanetNavigator_NAV_ANIMATION_NONE
    NAV_ANIMATION_RECORDING = _pyplanet.ossimPlanetNavigator_NAV_ANIMATION_RECORDING
    NAV_ANIMATION_PLAYBACK = _pyplanet.ossimPlanetNavigator_NAV_ANIMATION_PLAYBACK
    def solveLookAt(self, *args): return _pyplanet.ossimPlanetNavigator_solveLookAt(self, *args)
    def solveEyeGivenLocalSpaceAndRange(self, *args): return _pyplanet.ossimPlanetNavigator_solveEyeGivenLocalSpaceAndRange(self, *args)
    def playRecording(self): return _pyplanet.ossimPlanetNavigator_playRecording(self)
    def startRecording(self): return _pyplanet.ossimPlanetNavigator_startRecording(self)
    def stopRecording(self): return _pyplanet.ossimPlanetNavigator_stopRecording(self)
    def saveRecording(self, *args): return _pyplanet.ossimPlanetNavigator_saveRecording(self, *args)
    def loadRecording(self, *args): return _pyplanet.ossimPlanetNavigator_loadRecording(self, *args)
    def setUseTimedUpdateFlag(self, *args): return _pyplanet.ossimPlanetNavigator_setUseTimedUpdateFlag(self, *args)
    def needsContinuousUpdate(self): return _pyplanet.ossimPlanetNavigator_needsContinuousUpdate(self)
    def setRedrawFlag(self, *args): return _pyplanet.ossimPlanetNavigator_setRedrawFlag(self, *args)
    def redrawFlag(self): return _pyplanet.ossimPlanetNavigator_redrawFlag(self)
    def landModel(self, *args): return _pyplanet.ossimPlanetNavigator_landModel(self, *args)
    def gotoLatLonElevHpr(self, *args): return _pyplanet.ossimPlanetNavigator_gotoLatLonElevHpr(self, *args)
    def gotoLookAt(self, *args): return _pyplanet.ossimPlanetNavigator_gotoLookAt(self, *args)
ossimPlanetNavigator_swigregister = _pyplanet.ossimPlanetNavigator_swigregister
ossimPlanetNavigator_swigregister(ossimPlanetNavigator)

class ossimPlanetNetworkConnection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetNetworkConnection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetNetworkConnection, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyplanet.delete_ossimPlanetNetworkConnection
    __del__ = lambda self : None;
    def name(self): return _pyplanet.ossimPlanetNetworkConnection_name(self)
    def error(self): return _pyplanet.ossimPlanetNetworkConnection_error(self)
    def send(self, *args): return _pyplanet.ossimPlanetNetworkConnection_send(self, *args)
    def receive(self): return _pyplanet.ossimPlanetNetworkConnection_receive(self)
ossimPlanetNetworkConnection_swigregister = _pyplanet.ossimPlanetNetworkConnection_swigregister
ossimPlanetNetworkConnection_swigregister(ossimPlanetNetworkConnection)

class ossimPlanetAnimationPath(AnimationPath):
    __swig_setmethods__ = {}
    for _s in [AnimationPath]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnimationPath, name, value)
    __swig_getmethods__ = {}
    for _s in [AnimationPath]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnimationPath, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setGeoRefModel(self, *args): return _pyplanet.ossimPlanetAnimationPath_setGeoRefModel(self, *args)
    def geoRefModel(self, *args): return _pyplanet.ossimPlanetAnimationPath_geoRefModel(self, *args)
    def openAnimationPathByXmlDocument(self, *args): return _pyplanet.ossimPlanetAnimationPath_openAnimationPathByXmlDocument(self, *args)
    def setAnimationPathByXmlDocument(self, *args): return _pyplanet.ossimPlanetAnimationPath_setAnimationPathByXmlDocument(self, *args)
    def openAnimationPathByXmlNode(self, *args): return _pyplanet.ossimPlanetAnimationPath_openAnimationPathByXmlNode(self, *args)
    def setAnimationPathByXmlNode(self, *args): return _pyplanet.ossimPlanetAnimationPath_setAnimationPathByXmlNode(self, *args)
    def saveXml(self): return _pyplanet.ossimPlanetAnimationPath_saveXml(self)
    def getInterpolatedControlPoint(self, *args): return _pyplanet.ossimPlanetAnimationPath_getInterpolatedControlPoint(self, *args)
    def generateWorldCoordinates(self, *args): return _pyplanet.ossimPlanetAnimationPath_generateWorldCoordinates(self, *args)
    def generateModelCoordinates(self, *args): return _pyplanet.ossimPlanetAnimationPath_generateModelCoordinates(self, *args)
    def moveToLocationLatLon(self, *args): return _pyplanet.ossimPlanetAnimationPath_moveToLocationLatLon(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnimationPath
    __del__ = lambda self : None;
ossimPlanetAnimationPath_swigregister = _pyplanet.ossimPlanetAnimationPath_swigregister
ossimPlanetAnimationPath_swigregister(ossimPlanetAnimationPath)

ossimPlanetAnnotationColorMode_NORMAL = _pyplanet.ossimPlanetAnnotationColorMode_NORMAL
ossimPlanetAnnotationColorMode_RANDOM = _pyplanet.ossimPlanetAnnotationColorMode_RANDOM
class ossimPlanetAnnotationExpireTime(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnnotationExpireTime, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnnotationExpireTime, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def initTimeStamp(self): return _pyplanet.ossimPlanetAnnotationExpireTime_initTimeStamp(self)
    def hasExpired(self): return _pyplanet.ossimPlanetAnnotationExpireTime_hasExpired(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnnotationExpireTime
    __del__ = lambda self : None;
ossimPlanetAnnotationExpireTime_swigregister = _pyplanet.ossimPlanetAnnotationExpireTime_swigregister
ossimPlanetAnnotationExpireTime_swigregister(ossimPlanetAnnotationExpireTime)

class ossimPlanetAnnotationColorStyle(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnnotationColorStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnnotationColorStyle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetAnnotationColorStyle()
        try: self.this.append(this)
        except: self.this = this
    def setColor(self, *args): return _pyplanet.ossimPlanetAnnotationColorStyle_setColor(self, *args)
    def color(self, *args): return _pyplanet.ossimPlanetAnnotationColorStyle_color(self, *args)
    def setColorMode(self, *args): return _pyplanet.ossimPlanetAnnotationColorStyle_setColorMode(self, *args)
    def colorMode(self): return _pyplanet.ossimPlanetAnnotationColorStyle_colorMode(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnnotationColorStyle
    __del__ = lambda self : None;
ossimPlanetAnnotationColorStyle_swigregister = _pyplanet.ossimPlanetAnnotationColorStyle_swigregister
ossimPlanetAnnotationColorStyle_swigregister(ossimPlanetAnnotationColorStyle)

class ossimPlanetAnnotationLabelStyle(ossimPlanetAnnotationColorStyle):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetAnnotationColorStyle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnnotationLabelStyle, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetAnnotationColorStyle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnnotationLabelStyle, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetAnnotationLabelStyle()
        try: self.this.append(this)
        except: self.this = this
    def setScale(self, *args): return _pyplanet.ossimPlanetAnnotationLabelStyle_setScale(self, *args)
    def scale(self): return _pyplanet.ossimPlanetAnnotationLabelStyle_scale(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnnotationLabelStyle
    __del__ = lambda self : None;
ossimPlanetAnnotationLabelStyle_swigregister = _pyplanet.ossimPlanetAnnotationLabelStyle_swigregister
ossimPlanetAnnotationLabelStyle_swigregister(ossimPlanetAnnotationLabelStyle)

class ossimPlanetAnnotationExpireDuration(ossimPlanetAnnotationExpireTime):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetAnnotationExpireTime]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnnotationExpireDuration, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetAnnotationExpireTime]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnnotationExpireDuration, name)
    __repr__ = _swig_repr
    def __init__(self, duration = 0.0): 
        this = _pyplanet.new_ossimPlanetAnnotationExpireDuration(duration)
        try: self.this.append(this)
        except: self.this = this
    def duration(self): return _pyplanet.ossimPlanetAnnotationExpireDuration_duration(self)
    def setDuration(self, *args): return _pyplanet.ossimPlanetAnnotationExpireDuration_setDuration(self, *args)
    def unit(self): return _pyplanet.ossimPlanetAnnotationExpireDuration_unit(self)
    def initTimeStamp(self): return _pyplanet.ossimPlanetAnnotationExpireDuration_initTimeStamp(self)
    def hasExpired(self): return _pyplanet.ossimPlanetAnnotationExpireDuration_hasExpired(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnnotationExpireDuration
    __del__ = lambda self : None;
ossimPlanetAnnotationExpireDuration_swigregister = _pyplanet.ossimPlanetAnnotationExpireDuration_swigregister
ossimPlanetAnnotationExpireDuration_swigregister(ossimPlanetAnnotationExpireDuration)

class ossimPlanetAnnotationLayerNode(ossimPlanetNode):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnnotationLayerNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnnotationLayerNode, name)
    __repr__ = _swig_repr
    NOT_DIRTY = _pyplanet.ossimPlanetAnnotationLayerNode_NOT_DIRTY
    COORDINATE_DIRTY = _pyplanet.ossimPlanetAnnotationLayerNode_COORDINATE_DIRTY
    COLOR_DIRTY = _pyplanet.ossimPlanetAnnotationLayerNode_COLOR_DIRTY
    LABEL_DIRTY = _pyplanet.ossimPlanetAnnotationLayerNode_LABEL_DIRTY
    ICON_DIRTY = _pyplanet.ossimPlanetAnnotationLayerNode_ICON_DIRTY
    MATRIX_DIRTY = _pyplanet.ossimPlanetAnnotationLayerNode_MATRIX_DIRTY
    GENERIC_DIRTY = _pyplanet.ossimPlanetAnnotationLayerNode_GENERIC_DIRTY
    ALL_DIRTY = _pyplanet.ossimPlanetAnnotationLayerNode_ALL_DIRTY
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetAnnotationLayerNode()
        try: self.this.append(this)
        except: self.this = this
    def setExtendedData(self, *args): return _pyplanet.ossimPlanetAnnotationLayerNode_setExtendedData(self, *args)
    def execute(self, *args): return _pyplanet.ossimPlanetAnnotationLayerNode_execute(self, *args)
    def update(self): return _pyplanet.ossimPlanetAnnotationLayerNode_update(self)
    def stage(self): return _pyplanet.ossimPlanetAnnotationLayerNode_stage(self)
    def isStaged(self): return _pyplanet.ossimPlanetAnnotationLayerNode_isStaged(self)
    def traverse(self, *args): return _pyplanet.ossimPlanetAnnotationLayerNode_traverse(self, *args)
    def setStagedFlag(self, *args): return _pyplanet.ossimPlanetAnnotationLayerNode_setStagedFlag(self, *args)
    def asAnnotationGroup(self, *args): return _pyplanet.ossimPlanetAnnotationLayerNode_asAnnotationGroup(self, *args)
    def setDirtyBits(self, *args): return _pyplanet.ossimPlanetAnnotationLayerNode_setDirtyBits(self, *args)
    def setDirtyBit(self, *args): return _pyplanet.ossimPlanetAnnotationLayerNode_setDirtyBit(self, *args)
    def clearDirtyBit(self, *args): return _pyplanet.ossimPlanetAnnotationLayerNode_clearDirtyBit(self, *args)
    def isDirtyBitSet(self, *args): return _pyplanet.ossimPlanetAnnotationLayerNode_isDirtyBitSet(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnnotationLayerNode
    __del__ = lambda self : None;
ossimPlanetAnnotationLayerNode_swigregister = _pyplanet.ossimPlanetAnnotationLayerNode_swigregister
ossimPlanetAnnotationLayerNode_swigregister(ossimPlanetAnnotationLayerNode)

class ossimPlanetAnnotationGeometry(Referenced):
    __swig_setmethods__ = {}
    for _s in [Referenced]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnnotationGeometry, name, value)
    __swig_getmethods__ = {}
    for _s in [Referenced]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnnotationGeometry, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def setExtrudeFlag(self, *args): return _pyplanet.ossimPlanetAnnotationGeometry_setExtrudeFlag(self, *args)
    def setAltitudeMode(self, *args): return _pyplanet.ossimPlanetAnnotationGeometry_setAltitudeMode(self, *args)
    def altitudeMode(self): return _pyplanet.ossimPlanetAnnotationGeometry_altitudeMode(self)
    def asPoint(self, *args): return _pyplanet.ossimPlanetAnnotationGeometry_asPoint(self, *args)
    def traverse(self, *args): return _pyplanet.ossimPlanetAnnotationGeometry_traverse(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnnotationGeometry
    __del__ = lambda self : None;
ossimPlanetAnnotationGeometry_swigregister = _pyplanet.ossimPlanetAnnotationGeometry_swigregister
ossimPlanetAnnotationGeometry_swigregister(ossimPlanetAnnotationGeometry)

class ossimPlanetAnnotationPoint(ossimPlanetAnnotationGeometry):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetAnnotationGeometry]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnnotationPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetAnnotationGeometry]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnnotationPoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetAnnotationPoint(*args)
        try: self.this.append(this)
        except: self.this = this
    def asPoint(self, *args): return _pyplanet.ossimPlanetAnnotationPoint_asPoint(self, *args)
    def setCoordinate(self, *args): return _pyplanet.ossimPlanetAnnotationPoint_setCoordinate(self, *args)
    def coordinate(self): return _pyplanet.ossimPlanetAnnotationPoint_coordinate(self)
    def setModelCoordinate(self, *args): return _pyplanet.ossimPlanetAnnotationPoint_setModelCoordinate(self, *args)
    def modelCoordinate(self): return _pyplanet.ossimPlanetAnnotationPoint_modelCoordinate(self)
    def traverse(self, *args): return _pyplanet.ossimPlanetAnnotationPoint_traverse(self, *args)
    def setMatrixTransform(self, *args): return _pyplanet.ossimPlanetAnnotationPoint_setMatrixTransform(self, *args)
    def matrixTransform(self, *args): return _pyplanet.ossimPlanetAnnotationPoint_matrixTransform(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnnotationPoint
    __del__ = lambda self : None;
ossimPlanetAnnotationPoint_swigregister = _pyplanet.ossimPlanetAnnotationPoint_swigregister
ossimPlanetAnnotationPoint_swigregister(ossimPlanetAnnotationPoint)

class ossimPlanetAnnotationGroupNode(ossimPlanetAnnotationLayerNode):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetAnnotationLayerNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnnotationGroupNode, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetAnnotationLayerNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnnotationGroupNode, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetAnnotationGroupNode()
        try: self.this.append(this)
        except: self.this = this
    def asAnnotationGroup(self, *args): return _pyplanet.ossimPlanetAnnotationGroupNode_asAnnotationGroup(self, *args)
    def addChild(self, *args): return _pyplanet.ossimPlanetAnnotationGroupNode_addChild(self, *args)
    def stage(self): return _pyplanet.ossimPlanetAnnotationGroupNode_stage(self)
    def update(self): return _pyplanet.ossimPlanetAnnotationGroupNode_update(self)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnnotationGroupNode
    __del__ = lambda self : None;
ossimPlanetAnnotationGroupNode_swigregister = _pyplanet.ossimPlanetAnnotationGroupNode_swigregister
ossimPlanetAnnotationGroupNode_swigregister(ossimPlanetAnnotationGroupNode)

class ossimPlanetAnnotationTextGeode(Geode):
    __swig_setmethods__ = {}
    for _s in [Geode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnnotationTextGeode, name, value)
    __swig_getmethods__ = {}
    for _s in [Geode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnnotationTextGeode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetAnnotationTextGeode(*args)
        try: self.this.append(this)
        except: self.this = this
    def traverse(self, *args): return _pyplanet.ossimPlanetAnnotationTextGeode_traverse(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnnotationTextGeode
    __del__ = lambda self : None;
ossimPlanetAnnotationTextGeode_swigregister = _pyplanet.ossimPlanetAnnotationTextGeode_swigregister
ossimPlanetAnnotationTextGeode_swigregister(ossimPlanetAnnotationTextGeode)

class ossimPlanetAnnotationPlacemark(ossimPlanetAnnotationLayerNode):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetAnnotationLayerNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnnotationPlacemark, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetAnnotationLayerNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnnotationPlacemark, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyplanet.new_ossimPlanetAnnotationPlacemark(*args)
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pyplanet.ossimPlanetAnnotationPlacemark_execute(self, *args)
    def stage(self): return _pyplanet.ossimPlanetAnnotationPlacemark_stage(self)
    def update(self): return _pyplanet.ossimPlanetAnnotationPlacemark_update(self)
    def traverse(self, *args): return _pyplanet.ossimPlanetAnnotationPlacemark_traverse(self, *args)
    def setName(self, *args): return _pyplanet.ossimPlanetAnnotationPlacemark_setName(self, *args)
    def label(self, *args): return _pyplanet.ossimPlanetAnnotationPlacemark_label(self, *args)
    def labelGeode(self, *args): return _pyplanet.ossimPlanetAnnotationPlacemark_labelGeode(self, *args)
    def clusterCull(self, *args): return _pyplanet.ossimPlanetAnnotationPlacemark_clusterCull(self, *args)
    def labelStyle(self): return _pyplanet.ossimPlanetAnnotationPlacemark_labelStyle(self)
    def geometry(self, *args): return _pyplanet.ossimPlanetAnnotationPlacemark_geometry(self, *args)
    def setGeometry(self, *args): return _pyplanet.ossimPlanetAnnotationPlacemark_setGeometry(self, *args)
    def setEnableFlag(self, *args): return _pyplanet.ossimPlanetAnnotationPlacemark_setEnableFlag(self, *args)
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnnotationPlacemark
    __del__ = lambda self : None;
ossimPlanetAnnotationPlacemark_swigregister = _pyplanet.ossimPlanetAnnotationPlacemark_swigregister
ossimPlanetAnnotationPlacemark_swigregister(ossimPlanetAnnotationPlacemark)

class ossimPlanetAnimatedPointModel(ossimPlanetAnnotationLayerNode):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetAnnotationLayerNode]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnimatedPointModel, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetAnnotationLayerNode]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnimatedPointModel, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetAnimatedPointModel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnimatedPointModel
    __del__ = lambda self : None;
    def execute(self, *args): return _pyplanet.ossimPlanetAnimatedPointModel_execute(self, *args)
    def setAnimationPath(self, *args): return _pyplanet.ossimPlanetAnimatedPointModel_setAnimationPath(self, *args)
    def setAnimationPathColor(self, *args): return _pyplanet.ossimPlanetAnimatedPointModel_setAnimationPathColor(self, *args)
    def setAnimationPathLineThickness(self, *args): return _pyplanet.ossimPlanetAnimatedPointModel_setAnimationPathLineThickness(self, *args)
    def setShowPathFlag(self, *args): return _pyplanet.ossimPlanetAnimatedPointModel_setShowPathFlag(self, *args)
    def setShowModelFlag(self, *args): return _pyplanet.ossimPlanetAnimatedPointModel_setShowModelFlag(self, *args)
    def setPointModel(self, *args): return _pyplanet.ossimPlanetAnimatedPointModel_setPointModel(self, *args)
    def setTimeScale(self, *args): return _pyplanet.ossimPlanetAnimatedPointModel_setTimeScale(self, *args)
    def setTimeOffset(self, *args): return _pyplanet.ossimPlanetAnimatedPointModel_setTimeOffset(self, *args)
    def traverse(self, *args): return _pyplanet.ossimPlanetAnimatedPointModel_traverse(self, *args)
    def stage(self): return _pyplanet.ossimPlanetAnimatedPointModel_stage(self)
    def pointModel(self, *args): return _pyplanet.ossimPlanetAnimatedPointModel_pointModel(self, *args)
    def animationPath(self, *args): return _pyplanet.ossimPlanetAnimatedPointModel_animationPath(self, *args)
ossimPlanetAnimatedPointModel_swigregister = _pyplanet.ossimPlanetAnimatedPointModel_swigregister
ossimPlanetAnimatedPointModel_swigregister(ossimPlanetAnimatedPointModel)

class ossimPlanetAnnotationLayer(ossimPlanetLayer):
    __swig_setmethods__ = {}
    for _s in [ossimPlanetLayer]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ossimPlanetAnnotationLayer, name, value)
    __swig_getmethods__ = {}
    for _s in [ossimPlanetLayer]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ossimPlanetAnnotationLayer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyplanet.new_ossimPlanetAnnotationLayer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyplanet.delete_ossimPlanetAnnotationLayer
    __del__ = lambda self : None;
    def cloneType(self): return _pyplanet.ossimPlanetAnnotationLayer_cloneType(self)
    def isSameKindAs(self, *args): return _pyplanet.ossimPlanetAnnotationLayer_isSameKindAs(self, *args)
    def className(self): return _pyplanet.ossimPlanetAnnotationLayer_className(self)
    def libraryName(self): return _pyplanet.ossimPlanetAnnotationLayer_libraryName(self)
    def traverse(self, *args): return _pyplanet.ossimPlanetAnnotationLayer_traverse(self, *args)
    def execute(self, *args): return _pyplanet.ossimPlanetAnnotationLayer_execute(self, *args)
    def defaultIconTexture(self): return _pyplanet.ossimPlanetAnnotationLayer_defaultIconTexture(self)
    def defaultFont(self, *args): return _pyplanet.ossimPlanetAnnotationLayer_defaultFont(self, *args)
    def removeByNameAndId(self, *args): return _pyplanet.ossimPlanetAnnotationLayer_removeByNameAndId(self, *args)
    def stagingThreadQueue(self): return _pyplanet.ossimPlanetAnnotationLayer_stagingThreadQueue(self)
    def updateThreadQueue(self): return _pyplanet.ossimPlanetAnnotationLayer_updateThreadQueue(self)
ossimPlanetAnnotationLayer_swigregister = _pyplanet.ossimPlanetAnnotationLayer_swigregister
ossimPlanetAnnotationLayer_swigregister(ossimPlanetAnnotationLayer)



